{
  "address": "0xB58E80f655F451f4AD2278a7D806C475AcCdB8bd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_drainAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_drainController",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_IBVETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DrainedReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ETHValue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RewardClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "IBVETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Victim",
          "name": "_victim",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_victimPoolId",
          "type": "uint256"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Victim",
          "name": "_victim",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "victimPids",
          "type": "uint256[]"
        }
      ],
      "name": "addBulk",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tipAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "flag",
          "type": "uint8"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributionPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "drain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "drainAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "drainController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "pendingVictimReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingWeth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingWethReal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "poolAccWeth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract Victim",
          "name": "victim",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "victimPoolId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdateBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accWethPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wethAccumulator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "periodFinish",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "basePoolShares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "baseDeposits",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolRewardUpdater",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "recoverUnsupported",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "rewardForDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_devAddress",
          "type": "address"
        }
      ],
      "name": "updateDevAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_distributionPeriod",
          "type": "uint256"
        }
      ],
      "name": "updateDistributionPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_drainAddress",
          "type": "address"
        }
      ],
      "name": "updateDrainAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_drainController",
          "type": "address"
        }
      ],
      "name": "updateDrainController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ibveth",
          "type": "address"
        }
      ],
      "name": "updateIBEthStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wethDrainModifier",
          "type": "uint256"
        }
      ],
      "name": "updatePoolDrain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolRewardUpdater",
          "type": "address"
        }
      ],
      "name": "updateRewardUpdaterAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_victim",
          "type": "address"
        }
      ],
      "name": "updateVictimAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "pids",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "_victim",
          "type": "address"
        }
      ],
      "name": "updateVictimAddressBulk",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_victim",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_victimPoolId",
          "type": "uint256"
        }
      ],
      "name": "updateVictimInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewards",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolShares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wethDrainModifier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "wethPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tipAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "flag",
          "type": "uint8"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3053cec37fc8da4dcbb2ed201488113a636e1e3b657ebba6c93a20a686866d0a",
  "receipt": {
    "to": null,
    "from": "0x94627695F66Ab36Ae00c1995a30Bf5B30E139873",
    "contractAddress": "0xB58E80f655F451f4AD2278a7D806C475AcCdB8bd",
    "transactionIndex": 43,
    "gasUsed": "3476624",
    "logsBloom": "0x
    "blockHash": "0x4a3f65c104b05438d2f98906eac4406104d4ea9368ec22396120261d86ebd824",
    "transactionHash": "0x3053cec37fc8da4dcbb2ed201488113a636e1e3b657ebba6c93a20a686866d0a",
    "logs": [
      {
        "transactionIndex": 43,
        "blockNumber": 12719403,
        "transactionHash": "0x3053cec37fc8da4dcbb2ed201488113a636e1e3b657ebba6c93a20a686866d0a",
        "address": "0xB58E80f655F451f4AD2278a7D806C475AcCdB8bd",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000094627695f66ab36ae00c1995a30bf5b30e139873"
        ],
        "data": "0x",
        "logIndex": 103,
        "blockHash": "0x4a3f65c104b05438d2f98906eac4406104d4ea9368ec22396120261d86ebd824"
      }
    ],
    "blockNumber": 12719403,
    "cumulativeGasUsed": "7248652",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x62440aE6a5b861D01b0104D6ED77DbEDA29c4dc8",
    "0x4852a488F15AE544C75FED466908A2D1559EBAfa",
    "0x4918944100507ED88F825D2ffBFD74875dd7EdC5",
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
  ],
  "solcInputHash": "e166554613407b5e5de9c2eccf5906c7",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_drainAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_drainController\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_IBVETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DrainedReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ETHValue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"IBVETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Victim\",\"name\":\"_victim\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_victimPoolId\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Victim\",\"name\":\"_victim\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"victimPids\",\"type\":\"uint256[]\"}],\"name\":\"addBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tipAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"flag\",\"type\":\"uint8\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"drain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drainAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"drainController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"pendingVictimReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingWeth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingWethReal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"poolAccWeth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract Victim\",\"name\":\"victim\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"victimPoolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accWethPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wethAccumulator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"periodFinish\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basePoolShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseDeposits\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolRewardUpdater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"recoverUnsupported\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"rewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"updateDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_distributionPeriod\",\"type\":\"uint256\"}],\"name\":\"updateDistributionPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_drainAddress\",\"type\":\"address\"}],\"name\":\"updateDrainAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_drainController\",\"type\":\"address\"}],\"name\":\"updateDrainController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ibveth\",\"type\":\"address\"}],\"name\":\"updateIBEthStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wethDrainModifier\",\"type\":\"uint256\"}],\"name\":\"updatePoolDrain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolRewardUpdater\",\"type\":\"address\"}],\"name\":\"updateRewardUpdaterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_victim\",\"type\":\"address\"}],\"name\":\"updateVictimAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"pids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_victim\",\"type\":\"address\"}],\"name\":\"updateVictimAddressBulk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_victim\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_victimPoolId\",\"type\":\"uint256\"}],\"name\":\"updateVictimInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethDrainModifier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"wethPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tipAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"flag\",\"type\":\"uint8\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"drain(uint256)\":{\"notice\":\"Can only be called by DrainController\"},\"recoverUnsupported(address,uint256,address)\":{\"notice\":\"This function allows owner to take unsupported tokens out of the contract. It also allows for removal of airdropped tokens.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MasterVampire.sol\":\"MasterVampire\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x549c5343ad9f7e3f38aa4c4761854403502574bbc15b822db2ce892ff9b79da7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0xa4fdec0ea7d943692cac780111ff2ff9d89848cad0494a59cfaed63a705054b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc77dd6233a82c7c6e3dc49da8f3456baa00ecd3ea4dfa9222002a9aebf155dcd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf89f005a3d98f7768cdee2583707db0ac725cf567d455751af32ee68132f3db3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1153f6dd334c01566417b8c551122450542a2b75a2bbb379d59a8c320ed6da28\",\"license\":\"MIT\"},\"contracts/ChiGasSaver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\nimport \\\"./interfaces/IChiToken.sol\\\";\\n\\n/**\\n* @title Inheritable contract to enable optional gas savings on functions via a modifier\\n*/\\nabstract contract ChiGasSaver {\\n\\n    modifier saveGas(uint8 flag) {\\n        if ((flag & 0x1) == 0) {\\n            _;\\n        } else {\\n            uint256 gasStart = gasleft();\\n            _;\\n            uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\\n\\n            IChiToken chi = IChiToken(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\\n            chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41947);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5d5472c4a08861c821a07d06bc15a7b8c62a35ad6aae1ad160e403ca7eb55b5e\",\"license\":\"MIT\"},\"contracts/IIBVEth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\n\\n/**\\n* @title Interface for interest bearing ETH strategies\\n*/\\nabstract contract IIBVEth  {\\n\\n    IWETH immutable WETH;\\n\\n    constructor(address weth) {\\n        WETH = IWETH(weth);\\n    }\\n\\n    function handleDrainedWETH(uint256 amount) external virtual;\\n    function handleClaim(uint256 pending, uint256 tipAmount, uint8 flag) external payable virtual;\\n    function migrate() external virtual;\\n    function ibToken() external view virtual returns(IERC20);\\n    function balance(address account) external view virtual returns(uint256);\\n    function ethBalance(address account) external virtual returns(uint256);\\n    function ibETHValue(uint256 amount) external virtual returns (uint256);\\n\\n    function _safeETHTransfer(address payable to, uint256 amount) internal virtual {\\n        uint256 _balance = address(this).balance;\\n        if (amount > _balance) {\\n            to.transfer(_balance);\\n        } else {\\n            to.transfer(amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xce8d4dcfe2c10b91381f2def952a3f1c93cf32512530731b618f925d9450a109\",\"license\":\"MIT\"},\"contracts/IMasterVampire.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./VampireAdapter.sol\\\";\\nimport \\\"./ChiGasSaver.sol\\\";\\n\\n/**\\n* @title Interface for MV and adapters that follows the `Inherited Storage` pattern\\n* This allows adapters to add storage variables locally without causing collisions.\\n* Adapters simply need to inherit this interface so that new variables are appended.\\n*/\\nabstract contract IMasterVampire is Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using VampireAdapter for Victim;\\n\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewards;\\n        uint256 rewardDebt;\\n        uint256 poolShares;\\n    }\\n\\n    struct PoolInfo {\\n        Victim victim;\\n        uint256 victimPoolId;\\n        uint256 lastUpdateBlock;\\n        uint256 accWethPerShare;\\n        uint256 wethAccumulator;\\n        uint256 rewardRate;\\n        uint256 periodFinish;\\n        // Base amount of shares from user deposits for victims that return shares for the pool.\\n        uint256 basePoolShares;\\n        uint256 baseDeposits;\\n    }\\n\\n    address public IBVETH;\\n\\n    address public drainController;\\n    address public drainAddress;\\n    address public poolRewardUpdater;\\n    address public devAddress;\\n    uint256 public distributionPeriod = 6519; // Blocks in 24 hour period\\n    uint256 public wethDrainModifier = 150;\\n\\n    // Info of each pool\\n    PoolInfo[] public poolInfo;\\n    // Info of each user that stakes LP tokens\\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\\n}\\n\",\"keccak256\":\"0x7ff50d4282ad4fbe909b7d387c20ab7c4dd56ccc8e0f94f4e8bad6166a93d89f\",\"license\":\"MIT\"},\"contracts/MasterVampire.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.7.6;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\r\\nimport \\\"./IMasterVampire.sol\\\";\\r\\nimport \\\"./IIBVEth.sol\\\";\\r\\n\\r\\ncontract MasterVampire is IMasterVampire, ChiGasSaver {\\r\\n    using SafeMath for uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n    using VampireAdapter for Victim;\\r\\n    //     (_                   _)\\r\\n    //      /\\\\                 /\\\\\\r\\n    //     / \\\\'._   (\\\\_/)   _.'/ \\\\\\r\\n    //    /_.''._'--('.')--'_.''._\\\\\\r\\n    //    | \\\\_ / `;=/ \\\" \\\\=;` \\\\ _/ |\\r\\n    //     \\\\/ `\\\\__|`\\\\___/`|__/`  \\\\/\\r\\n    //   jgs`      \\\\(/|\\\\)/       `\\r\\n    //              \\\" ` \\\"\\r\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event RewardClaimed(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event ETHValue(uint256 amount);\\r\\n    event DrainedReward(uint256 indexed pid, uint256 amount);\\r\\n\\r\\n    IWETH immutable weth;\\r\\n\\r\\n    modifier onlyDev() {\\r\\n        require(devAddress == msg.sender, \\\"not dev\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyRewardUpdater() {\\r\\n        require(poolRewardUpdater == msg.sender, \\\"not reward updater\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier updateReward(uint256 _pid, address _user) {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        pool.accWethPerShare = wethPerShare(_pid);\\r\\n        pool.lastUpdateBlock = lastTimeRewardApplicable(_pid);\\r\\n        if (_user != address(0)) {\\r\\n            UserInfo storage user = userInfo[_pid][_user];\\r\\n            user.rewards = pendingWeth(_pid, _user);\\r\\n            user.rewardDebt = pool.accWethPerShare;\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        address _drainAddress,\\r\\n        address _drainController,\\r\\n        address _IBVETH,\\r\\n        address _weth\\r\\n    ) {\\r\\n        drainAddress = _drainAddress;\\r\\n        drainController = _drainController;\\r\\n        devAddress = msg.sender;\\r\\n        poolRewardUpdater = msg.sender;\\r\\n        IBVETH = _IBVETH;\\r\\n        weth = IWETH(_weth);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Allow depositing ether to the contract\\r\\n     */\\r\\n    receive() external payable {}\\r\\n\\r\\n    function poolLength() external view returns (uint256) {\\r\\n        return poolInfo.length;\\r\\n    }\\r\\n\\r\\n    function add(Victim _victim, uint256 _victimPoolId) external onlyOwner {\\r\\n        poolInfo.push(PoolInfo({\\r\\n            victim: _victim,\\r\\n            victimPoolId: _victimPoolId,\\r\\n            lastUpdateBlock: 0,\\r\\n            accWethPerShare: 0,\\r\\n            wethAccumulator: 0,\\r\\n            rewardRate: 0,\\r\\n            periodFinish: 0,\\r\\n            basePoolShares: 0,\\r\\n            baseDeposits: 0\\r\\n        }));\\r\\n    }\\r\\n\\r\\n    // Add multiple pools for one victim\\r\\n    function addBulk(Victim _victim, uint256[] memory victimPids) external onlyOwner {\\r\\n        for (uint i = 0; i < victimPids.length; i++) {\\r\\n            poolInfo.push(PoolInfo({\\r\\n                victim: _victim,\\r\\n                victimPoolId: victimPids[i],\\r\\n                lastUpdateBlock: 0,\\r\\n                accWethPerShare: 0,\\r\\n                wethAccumulator: 0,\\r\\n                rewardRate: 0,\\r\\n                periodFinish: 0,\\r\\n                basePoolShares: 0,\\r\\n                baseDeposits: 0\\r\\n            }));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateDistributionPeriod(uint256 _distributionPeriod) external onlyRewardUpdater {\\r\\n        distributionPeriod = _distributionPeriod;\\r\\n    }\\r\\n\\r\\n    function updateVictimAddress(uint256 _pid, address _victim) external onlyOwner {\\r\\n        poolInfo[_pid].victim = Victim(_victim);\\r\\n    }\\r\\n\\r\\n    function updateVictimAddressBulk(uint256[] memory pids, address _victim) public onlyRewardUpdater {\\r\\n        for (uint i = 0; i < pids.length; i++) {\\r\\n            uint256 pid = pids[i];\\r\\n            poolInfo[pid].victim = Victim(_victim);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function updateVictimInfo(uint256 _pid, address _victim, uint256 _victimPoolId) external onlyOwner {\\r\\n        poolInfo[_pid].victim = Victim(_victim);\\r\\n        poolInfo[_pid].victimPoolId = _victimPoolId;\\r\\n    }\\r\\n\\r\\n    function updatePoolDrain(uint256 _wethDrainModifier) external onlyOwner {\\r\\n        wethDrainModifier = _wethDrainModifier;\\r\\n    }\\r\\n\\r\\n    function updateDevAddress(address _devAddress) external onlyDev {\\r\\n        devAddress = _devAddress;\\r\\n    }\\r\\n\\r\\n    function updateDrainAddress(address _drainAddress) external onlyOwner {\\r\\n        drainAddress = _drainAddress;\\r\\n    }\\r\\n\\r\\n    function updateIBEthStrategy(address _ibveth) external onlyOwner {\\r\\n        IBVETH = _ibveth;\\r\\n        (bool success,) = address(IBVETH).delegatecall(abi.encodeWithSignature(\\\"migrate()\\\"));\\r\\n        require(success, \\\"migrate() delegatecall failed.\\\");\\r\\n    }\\r\\n\\r\\n    function updateDrainController(address _drainController) external onlyOwner {\\r\\n        drainController = _drainController;\\r\\n    }\\r\\n\\r\\n    function updateRewardUpdaterAddress(address _poolRewardUpdater) external onlyOwner {\\r\\n        poolRewardUpdater = _poolRewardUpdater;\\r\\n    }\\r\\n\\r\\n    function lastTimeRewardApplicable(uint256 _pid) public view returns (uint256) {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        return Math.min(block.number, pool.periodFinish);\\r\\n    }\\r\\n\\r\\n    // WETH reward per staked share\\r\\n    function wethPerShare(uint256 _pid) public view returns (uint256) {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        uint256 totalStaked = pool.victim.lockedAmount(pool.victimPoolId);\\r\\n        if (totalStaked == 0) {\\r\\n            return pool.accWethPerShare;\\r\\n        }\\r\\n        return\\r\\n            pool.accWethPerShare.add(\\r\\n                lastTimeRewardApplicable(_pid)\\r\\n                    .sub(pool.lastUpdateBlock)\\r\\n                    .mul(pool.rewardRate)\\r\\n                    .mul(1e18)\\r\\n                    .div(totalStaked)\\r\\n            );\\r\\n    }\\r\\n\\r\\n    // Total rewards to distribute for the duration\\r\\n    function rewardForDuration(uint256 _pid) external view returns (uint256) {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        return pool.rewardRate.mul(distributionPeriod);\\r\\n    }\\r\\n\\r\\n    // Returns the interest-bearing ETH value\\r\\n    function pendingWeth(uint256 _pid, address _user) public view returns (uint256) {\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        return\\r\\n            user.amount\\r\\n                .mul(wethPerShare(_pid).sub(user.rewardDebt))\\r\\n                .div(1e18)\\r\\n                .add(user.rewards);\\r\\n    }\\r\\n\\r\\n    // Returns the actual WETH value (interest-bearing ETH converted)\\r\\n    function pendingWethReal(uint256 _pid, address _user) external returns (uint256) {\\r\\n        uint256 ibETH = pendingWeth(_pid, _user);\\r\\n        uint256 ethVal = IIBVEth(IBVETH).ibETHValue(ibETH);\\r\\n        emit ETHValue(ethVal);\\r\\n        return ethVal;\\r\\n    }\\r\\n\\r\\n    // Returns the underlying pending rewards for a victim\\r\\n    function pendingVictimReward(uint256 pid) external view returns (uint256) {\\r\\n        PoolInfo storage pool = poolInfo[pid];\\r\\n        return pool.victim.pendingReward(pid, pool.victimPoolId);\\r\\n    }\\r\\n\\r\\n    // Returns the current drained/accumulated rewards for a pool\\r\\n    function poolAccWeth(uint256 pid) external view returns (uint256) {\\r\\n        PoolInfo storage pool = poolInfo[pid];\\r\\n        return pool.wethAccumulator;\\r\\n    }\\r\\n\\r\\n    function deposit(uint256 pid, uint256 amount) external nonReentrant updateReward(pid, msg.sender) {\\r\\n        require(amount > 0, \\\"Cannot deposit 0\\\");\\r\\n        PoolInfo storage pool = poolInfo[pid];\\r\\n        UserInfo storage user = userInfo[pid][msg.sender];\\r\\n\\r\\n        pool.victim.lockableToken(pool.victimPoolId).safeTransferFrom(address(msg.sender), address(this), amount);\\r\\n        uint256 shares = pool.victim.deposit(pool.victimPoolId, amount);\\r\\n        if (shares > 0) {\\r\\n            pool.basePoolShares = pool.basePoolShares.add(shares);\\r\\n            pool.baseDeposits = pool.baseDeposits.add(amount);\\r\\n            user.poolShares = user.poolShares.add(shares);\\r\\n        }\\r\\n        user.amount = user.amount.add(amount);\\r\\n        emit Deposit(msg.sender, pid, amount);\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 pid, uint256 amount, uint256 tipAmount, uint8 flag) external payable nonReentrant updateReward(pid, msg.sender) {\\r\\n        PoolInfo storage pool = poolInfo[pid];\\r\\n        UserInfo storage user = userInfo[pid][msg.sender];\\r\\n        require(amount > 0 && user.amount >= amount, \\\"withdraw: not good\\\");\\r\\n\\r\\n        user.amount = user.amount.sub(amount);\\r\\n        uint256 shares = pool.victim.withdraw(pool.victimPoolId, amount);\\r\\n        if (shares > 0) {\\r\\n            pool.basePoolShares = pool.basePoolShares.sub(shares);\\r\\n            pool.baseDeposits = pool.baseDeposits.sub(amount);\\r\\n            user.poolShares = user.poolShares.sub(shares);\\r\\n        }\\r\\n        pool.victim.lockableToken(pool.victimPoolId).safeTransfer(address(msg.sender), amount);\\r\\n        _claim(pid, tipAmount, flag);\\r\\n        emit Withdraw(msg.sender, pid, amount);\\r\\n    }\\r\\n\\r\\n    function claim(uint256 pid, uint256 tipAmount, uint8 flag) external payable nonReentrant updateReward(pid, msg.sender) {\\r\\n        _claim(pid, tipAmount, flag);\\r\\n    }\\r\\n\\r\\n    // Withdraw in case of emergency. No rewards will be claimed.\\r\\n    function emergencyWithdraw(uint256 pid) external nonReentrant {\\r\\n        PoolInfo storage pool = poolInfo[pid];\\r\\n        UserInfo storage user = userInfo[pid][msg.sender];\\r\\n        pool.victim.withdraw(pool.victimPoolId, user.amount);\\r\\n        pool.victim.lockableToken(pool.victimPoolId).safeTransfer(address(msg.sender), user.amount);\\r\\n        emit EmergencyWithdraw(msg.sender, pid, user.amount);\\r\\n        user.amount = 0;\\r\\n        user.rewards = 0;\\r\\n        user.rewardDebt = 0;\\r\\n        user.poolShares = 0;\\r\\n    }\\r\\n\\r\\n    /// Can only be called by DrainController\\r\\n    function drain(uint256 pid) external updateReward(pid, address(0)) {\\r\\n        require(drainController == msg.sender, \\\"not drainctrl\\\");\\r\\n        PoolInfo storage pool = poolInfo[pid];\\r\\n        Victim victim = pool.victim;\\r\\n        uint256 victimPoolId = pool.victimPoolId;\\r\\n        victim.claimReward(pid, victimPoolId);\\r\\n        IERC20 rewardToken = victim.rewardToken(pid);\\r\\n        uint256 claimedReward = rewardToken.balanceOf(address(this));\\r\\n\\r\\n        if (claimedReward == 0) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 wethReward = victim.sellRewardForWeth(pid, claimedReward, address(this));\\r\\n\\r\\n        // Take a % of the drained reward to be redistributed to other contracts\\r\\n        uint256 wethDrainAmount = wethReward.mul(wethDrainModifier).div(1000);\\r\\n        if (wethDrainAmount > 0) {\\r\\n            weth.transfer(drainAddress, wethDrainAmount);\\r\\n            wethReward = wethReward.sub(wethDrainAmount);\\r\\n        }\\r\\n\\r\\n        // Remainder of rewards go to users of the drained pool as interest-bearing ETH\\r\\n        uint256 ibethBefore = IIBVEth(IBVETH).balance(address(this));\\r\\n        (bool success,) = IBVETH.delegatecall(abi.encodeWithSignature(\\\"handleDrainedWETH(uint256)\\\", wethReward));\\r\\n        require(success, \\\"handleDrainedWETH(uint256 amount) delegatecall failed.\\\");\\r\\n        uint256 ibethAfter = IIBVEth(IBVETH).balance(address(this));\\r\\n        uint256 newRewards = ibethAfter.sub(ibethBefore);\\r\\n        pool.wethAccumulator = pool.wethAccumulator.add(newRewards);\\r\\n\\r\\n        if (block.number >= pool.periodFinish) {\\r\\n            pool.rewardRate = newRewards.div(distributionPeriod);\\r\\n        } else {\\r\\n            uint256 remaining = pool.periodFinish.sub(block.number);\\r\\n            uint256 leftover = remaining.mul(pool.rewardRate);\\r\\n            pool.rewardRate = newRewards.add(leftover).div(distributionPeriod);\\r\\n        }\\r\\n\\r\\n        pool.lastUpdateBlock = block.number;\\r\\n        pool.periodFinish = block.number.add(distributionPeriod);\\r\\n        emit DrainedReward(pid, newRewards);\\r\\n    }\\r\\n\\r\\n    /// This function allows owner to take unsupported tokens out of the contract.\\r\\n    /// It also allows for removal of airdropped tokens.\\r\\n    function recoverUnsupported(IERC20 token, uint256 amount, address to) external onlyOwner {\\r\\n        uint256 length = poolInfo.length;\\r\\n        for (uint256 pid = 0; pid < length; ++pid) {\\r\\n            PoolInfo storage pool = poolInfo[pid];\\r\\n            IERC20 lpToken = pool.victim.lockableToken(pool.victimPoolId);\\r\\n            // cant take staked asset\\r\\n            require(token != lpToken, \\\"!pool.lpToken\\\");\\r\\n        }\\r\\n        // transfer to\\r\\n        token.safeTransfer(to, amount);\\r\\n    }\\r\\n\\r\\n    /// Claim rewards from pool\\r\\n    function _claim(uint256 pid, uint256 tipAmount, uint8 flag) internal {\\r\\n        PoolInfo storage pool = poolInfo[pid];\\r\\n        UserInfo storage user = userInfo[pid][msg.sender];\\r\\n        uint256 pending = user.rewards;\\r\\n        if (pending > 0) {\\r\\n            user.rewards = 0;\\r\\n            uint256 poolBalance = pool.wethAccumulator;\\r\\n            if (poolBalance < pending) {\\r\\n                pending = poolBalance; // Prevents contract from locking up\\r\\n            }\\r\\n            (bool success,) = address(IBVETH).delegatecall(abi.encodeWithSignature(\\\"handleClaim(uint256,uint256,uint8)\\\", pending, tipAmount, flag));\\r\\n            require(success, \\\"handleClaim(uint256 pending, uint256 tipAmount, uint8 flag) delegatecall failed.\\\");\\r\\n            emit RewardClaimed(msg.sender, pid, pending);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x4ea5b57f4823e68a51afaaaa959571c6d745f177722aa75e241ab17910c03ec8\",\"license\":\"MIT\"},\"contracts/VampireAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Victim {}\\n\\nlibrary VampireAdapter {\\n    // Victim info\\n    function rewardToken(Victim victim, uint256 poolId) external view returns (IERC20) {\\n        (bool success, bytes memory result) = address(victim).staticcall(abi.encodeWithSignature(\\\"rewardToken(uint256)\\\", poolId));\\n        require(success, \\\"rewardToken(uint256) staticcall failed.\\\");\\n        return abi.decode(result, (IERC20));\\n    }\\n\\n    function rewardValue(Victim victim, uint256 poolId, uint256 amount) external view returns (uint256) {\\n        (bool success, bytes memory result) = address(victim).staticcall(abi.encodeWithSignature(\\\"rewardValue(uint256,uint256)\\\", poolId, amount));\\n        require(success, \\\"rewardValue(uint256,uint256) staticcall failed.\\\");\\n        return abi.decode(result, (uint256));\\n    }\\n\\n    function poolCount(Victim victim) external view returns (uint256) {\\n        (bool success, bytes memory result) = address(victim).staticcall(abi.encodeWithSignature(\\\"poolCount()\\\"));\\n        require(success, \\\"poolCount() staticcall failed.\\\");\\n        return abi.decode(result, (uint256));\\n    }\\n\\n    function sellableRewardAmount(Victim victim, uint256 poolId) external view returns (uint256) {\\n        (bool success, bytes memory result) = address(victim).staticcall(abi.encodeWithSignature(\\\"sellableRewardAmount(uint256)\\\", poolId));\\n        require(success, \\\"sellableRewardAmount(uint256) staticcall failed.\\\");\\n        return abi.decode(result, (uint256));\\n    }\\n\\n    // Victim actions\\n    function sellRewardForWeth(Victim victim, uint256 poolId, uint256 rewardAmount, address to) external returns(uint256) {\\n        (bool success, bytes memory result) = address(victim).delegatecall(abi.encodeWithSignature(\\\"sellRewardForWeth(address,uint256,uint256,address)\\\", address(victim), poolId, rewardAmount, to));\\n        require(success, \\\"sellRewardForWeth(uint256,address) delegatecall failed.\\\");\\n        return abi.decode(result, (uint256));\\n    }\\n\\n    // Pool info\\n    function lockableToken(Victim victim, uint256 poolId) external view returns (IERC20) {\\n        (bool success, bytes memory result) = address(victim).staticcall(abi.encodeWithSignature(\\\"lockableToken(uint256)\\\", poolId));\\n        require(success, \\\"lockableToken(uint256) staticcall failed.\\\");\\n        return abi.decode(result, (IERC20));\\n    }\\n\\n    function lockedAmount(Victim victim, uint256 poolId) external view returns (uint256) {\\n        // note the impersonation\\n        (bool success, bytes memory result) = address(victim).staticcall(abi.encodeWithSignature(\\\"lockedAmount(address,uint256)\\\", address(this), poolId));\\n        require(success, \\\"lockedAmount(uint256) staticcall failed.\\\");\\n        return abi.decode(result, (uint256));\\n    }\\n\\n    function pendingReward(Victim victim, uint256 poolId, uint256 victimPoolId) external view returns (uint256) {\\n        // note the impersonation\\n        (bool success, bytes memory result) = address(victim).staticcall(abi.encodeWithSignature(\\\"pendingReward(address,uint256,uint256)\\\", address(victim), poolId, victimPoolId));\\n        require(success, \\\"pendingReward(address,uint256,uint256) staticcall failed.\\\");\\n        return abi.decode(result, (uint256));\\n    }\\n\\n    // Pool actions\\n    function deposit(Victim victim, uint256 poolId, uint256 amount) external returns (uint256) {\\n        (bool success, bytes memory result) = address(victim).delegatecall(abi.encodeWithSignature(\\\"deposit(address,uint256,uint256)\\\", address(victim), poolId, amount));\\n        require(success, \\\"deposit(uint256,uint256) delegatecall failed.\\\");\\n        return abi.decode(result, (uint256));\\n    }\\n\\n    function withdraw(Victim victim, uint256 poolId, uint256 amount) external returns (uint256) {\\n        (bool success, bytes memory result) = address(victim).delegatecall(abi.encodeWithSignature(\\\"withdraw(address,uint256,uint256)\\\", address(victim), poolId, amount));\\n        require(success, \\\"withdraw(uint256,uint256) delegatecall failed.\\\");\\n        return abi.decode(result, (uint256));\\n    }\\n\\n    function claimReward(Victim victim, uint256 poolId, uint256 victimPoolId) external {\\n        (bool success,) = address(victim).delegatecall(abi.encodeWithSignature(\\\"claimReward(address,uint256,uint256)\\\", address(victim), poolId, victimPoolId));\\n        require(success, \\\"claimReward(uint256,uint256) delegatecall failed.\\\");\\n    }\\n\\n    function emergencyWithdraw(Victim victim, uint256 poolId) external {\\n        (bool success,) = address(victim).delegatecall(abi.encodeWithSignature(\\\"emergencyWithdraw(address,uint256)\\\", address(victim), poolId));\\n        require(success, \\\"emergencyWithdraw(uint256) delegatecall failed.\\\");\\n    }\\n\\n    // Service methods\\n    function poolAddress(Victim victim, uint256 poolId) external view returns (address) {\\n        (bool success, bytes memory result) = address(victim).staticcall(abi.encodeWithSignature(\\\"poolAddress(uint256)\\\", poolId));\\n        require(success, \\\"poolAddress(uint256) staticcall failed.\\\");\\n        return abi.decode(result, (address));\\n    }\\n\\n    function rewardToWethPool(Victim victim) external view returns (address) {\\n        (bool success, bytes memory result) = address(victim).staticcall(abi.encodeWithSignature(\\\"rewardToWethPool()\\\"));\\n        require(success, \\\"rewardToWethPool() staticcall failed.\\\");\\n        return abi.decode(result, (address));\\n    }\\n}\",\"keccak256\":\"0x0e27a650f2a17e4bd6765182a82685d8349eb7bb1d40c7373c76fc3a79711611\",\"license\":\"MIT\"},\"contracts/interfaces/IChiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IChiToken is IERC20 {\\n    function mint(uint256 value) external;\\n    function freeFromUpTo(address from, uint256 value) external returns(uint256 freed);\\n}\",\"keccak256\":\"0x50021275c39583e189bd5b98435f37afc552059b819604409b8e83c532e56be8\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n    function withdraw(uint) external;\\n}\",\"keccak256\":\"0xf6938676784c0f4bd5fffe57fd90f932ce854925d4d705a8c45fa5e0dda72d87\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405261197760075560966008553480156200001c57600080fd5b5060405162003ba338038062003ba3833981810160405260808110156200004257600080fd5b50805160208201516040830151606090930151919290916000620000656200011e565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060018055600480546001600160a01b03199081166001600160a01b039687161790915560038054821694861694909417909355600680543390851681179091556005805485169091179055600280549093169190931617905560601b6001600160601b03191660805262000122565b3390565b60805160601c613a636200014060003980612bd25250613a636000f3fe6080604052600436106102895760003560e01c806394a1af4611610153578063e10f8f06116100cb578063efedb5d61161007f578063f5d82b6b11610064578063f5d82b6b146109f6578063f6b19c7414610a2f578063feab159214610a5957610290565b8063efedb5d614610999578063f2fde38b146109c357610290565b8063e2bbb158116100b0578063e2bbb15814610900578063ede2302e14610930578063eeca15621461096f57610290565b8063e10f8f06146108b8578063e22fae06146108cd57610290565b8063cbb4e2e111610122578063d35e295a11610107578063d35e295a146107b7578063d4c2840d146107e3578063e0a9b09d146108a357610290565b8063cbb4e2e11461075a578063d17f2a591461078d57610290565b806394a1af461461060e5780639b501723146106c9578063a081ddbd146106de578063b6f525a71461072157610290565b8063592e7def1161020157806385033762116101b55780638da5cb5b1161019a5780638da5cb5b1461058557806392f2cff01461059a57806393f1a40b146105af57610290565b8063850337621461052857806389c70e791461055b57610290565b8063715018a6116101e6578063715018a6146104a857806374e9d093146104bd5780637fd7dc8a146104ef57610290565b8063592e7def1461047e57806368cdd86e1461049357610290565b806333fc552e11610258578063431de0071161023d578063431de007146103f55780635312ea8e1461042a578063577fbd5f1461045457610290565b806333fc552e1461039a5780633ad10ef6146103c457610290565b80630661cefb14610295578063081e3eda146102e05780631526fe27146102f5578063217f9c391461037057610290565b3661029057005b600080fd5b3480156102a157600080fd5b506102ce600480360360408110156102b857600080fd5b50803590602001356001600160a01b0316610a8c565b60408051918252519081900360200190f35b3480156102ec57600080fd5b506102ce610b72565b34801561030157600080fd5b5061031f6004803603602081101561031857600080fd5b5035610b78565b604080516001600160a01b03909a168a5260208a0198909852888801969096526060880194909452608087019290925260a086015260c085015260e084015261010083015251908190036101200190f35b34801561037c57600080fd5b506102ce6004803603602081101561039357600080fd5b5035610bdd565b3480156103a657600080fd5b506102ce600480360360208110156103bd57600080fd5b5035610d11565b3480156103d057600080fd5b506103d9610d3c565b604080516001600160a01b039092168252519081900360200190f35b34801561040157600080fd5b506104286004803603602081101561041857600080fd5b50356001600160a01b0316610d4b565b005b34801561043657600080fd5b506104286004803603602081101561044d57600080fd5b5035610df9565b34801561046057600080fd5b506104286004803603602081101561047757600080fd5b5035611065565b34801561048a57600080fd5b506103d96110c9565b34801561049f57600080fd5b506103d96110d8565b3480156104b457600080fd5b506104286110e7565b610428600480360360808110156104d357600080fd5b508035906020810135906040810135906060013560ff166111bd565b3480156104fb57600080fd5b506104286004803603604081101561051257600080fd5b50803590602001356001600160a01b0316611527565b34801561053457600080fd5b506104286004803603602081101561054b57600080fd5b50356001600160a01b03166115f3565b34801561056757600080fd5b506102ce6004803603602081101561057e57600080fd5b503561168c565b34801561059157600080fd5b506103d9611767565b3480156105a657600080fd5b506103d9611776565b3480156105bb57600080fd5b506105e8600480360360408110156105d257600080fd5b50803590602001356001600160a01b0316611785565b604080519485526020850193909352838301919091526060830152519081900360800190f35b34801561061a57600080fd5b506104286004803603604081101561063157600080fd5b81019060208101813564010000000081111561064c57600080fd5b82018360208201111561065e57600080fd5b8035906020019184602083028401116401000000008311171561068057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550505090356001600160a01b031691506117b79050565b3480156106d557600080fd5b506102ce61189c565b3480156106ea57600080fd5b506104286004803603606081101561070157600080fd5b506001600160a01b038135811691602081013591604090910135166118a2565b34801561072d57600080fd5b506102ce6004803603604081101561074457600080fd5b50803590602001356001600160a01b0316611a79565b34801561076657600080fd5b506104286004803603602081101561077d57600080fd5b50356001600160a01b0316611adf565b34801561079957600080fd5b50610428600480360360208110156107b057600080fd5b5035611b8d565b610428600480360360608110156107cd57600080fd5b508035906020810135906040013560ff16611c06565b3480156107ef57600080fd5b506104286004803603604081101561080657600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561083157600080fd5b82018360208201111561084357600080fd5b8035906020019184602083028401116401000000008311171561086557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611d06945050505050565b3480156108af57600080fd5b506103d9611e91565b3480156108c457600080fd5b506102ce611ea0565b3480156108d957600080fd5b50610428600480360360208110156108f057600080fd5b50356001600160a01b0316611ea6565b34801561090c57600080fd5b506104286004803603604081101561092357600080fd5b5080359060200135611f54565b34801561093c57600080fd5b506104286004803603606081101561095357600080fd5b508035906001600160a01b0360208201351690604001356122e2565b34801561097b57600080fd5b506102ce6004803603602081101561099257600080fd5b50356123c1565b3480156109a557600080fd5b506102ce600480360360208110156109bc57600080fd5b50356123f6565b3480156109cf57600080fd5b50610428600480360360208110156109e657600080fd5b50356001600160a01b031661242f565b348015610a0257600080fd5b5061042860048036036040811015610a1957600080fd5b506001600160a01b03813516906020013561255b565b348015610a3b57600080fd5b5061042860048036036020811015610a5257600080fd5b50356127b8565b348015610a6557600080fd5b5061042860048036036020811015610a7c57600080fd5b50356001600160a01b0316612fd8565b600080610a998484611a79565b600254604080517f9d3f50390000000000000000000000000000000000000000000000000000000081526004810184905290519293506000926001600160a01b0390921691639d3f50399160248082019260209290919082900301818787803b158015610b0557600080fd5b505af1158015610b19573d6000803e3d6000fd5b505050506040513d6020811015610b2f57600080fd5b50516040805182815290519192507fb37961da3972b7b5f62cae2d8c10d43840dbe99529a868d75b318ad6f2c09c0e919081900360200190a19150505b92915050565b60095490565b60098181548110610b8857600080fd5b60009182526020909120600990910201805460018201546002830154600384015460048501546005860154600687015460078801546008909801546001600160a01b0390971698509496939592949193909289565b60008060098381548110610bed57fe5b60009182526020808320600990920290910180546001820154604080517f1e95069c0000000000000000000000000000000000000000000000000000000081526001600160a01b0390931660048401526024830191909152519194507344DdA8E799dE6A4a4a50052793D208B3bE16cA3392631e95069c92604480840193829003018186803b158015610c7f57600080fd5b505af4158015610c93573d6000803e3d6000fd5b505050506040513d6020811015610ca957600080fd5b5051905080610cbe5750600301549050610d0c565b610d07610cfc82610cf6670de0b6b3a7640000610cf08760050154610cf08960020154610cea8d6123c1565b906131ef565b9061324c565b906132a5565b60038401549061330c565b925050505b919050565b60008060098381548110610d2157fe5b60009182526020909120600460099092020101549392505050565b6006546001600160a01b031681565b610d53613366565b6001600160a01b0316610d64611767565b6001600160a01b031614610dbf576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600480547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60026001541415610e51576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600181905550600060098281548110610e6857fe5b60009182526020808320858452600a8252604080852033865283529384902060099093020180546001820154845486517fa2c16fe70000000000000000000000000000000000000000000000000000000081526001600160a01b0393909316600484015260248301919091526044820152935190945091927344DdA8E799dE6A4a4a50052793D208B3bE16cA339263a2c16fe792606480840193919291829003018186803b158015610f1957600080fd5b505af4158015610f2d573d6000803e3d6000fd5b505050506040513d6020811015610f4357600080fd5b5050805482546001840154604080517f9f7433410000000000000000000000000000000000000000000000000000000081526001600160a01b03909316600484015260248301919091525161100d92339290917344DdA8E799dE6A4a4a50052793D208B3bE16cA3391639f743341916044808301926020929190829003018186803b158015610fd157600080fd5b505af4158015610fe5573d6000803e3d6000fd5b505050506040513d6020811015610ffb57600080fd5b50516001600160a01b0316919061336a565b80546040805191825251849133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a3600080825560018083018290556002830182905560039092015580555050565b6005546001600160a01b031633146110c4576040805162461bcd60e51b815260206004820152601260248201527f6e6f742072657761726420757064617465720000000000000000000000000000604482015290519081900360640190fd5b600755565b6002546001600160a01b031681565b6005546001600160a01b031681565b6110ef613366565b6001600160a01b0316611100611767565b6001600160a01b03161461115b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60026001541415611215576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600181905550833360006009838154811061122e57fe5b9060005260206000209060090201905061124783610bdd565b6003820155611255836123c1565b60028201556001600160a01b038216156112a6576000838152600a602090815260408083206001600160a01b038616845290915290206112958484611a79565b600182015560038201546002909101555b6000600988815481106112b557fe5b600091825260208083208b8452600a8252604080852033865290925292206009909102909101915087158015906112ed575080548811155b61133e576040805162461bcd60e51b815260206004820152601260248201527f77697468647261773a206e6f7420676f6f640000000000000000000000000000604482015290519081900360640190fd5b805461134a90896131ef565b815581546001830154604080517fa2c16fe70000000000000000000000000000000000000000000000000000000081526001600160a01b0390931660048401526024830191909152604482018a9052516000917344DdA8E799dE6A4a4a50052793D208B3bE16cA339163a2c16fe791606480820192602092909190829003018186803b1580156113d957600080fd5b505af41580156113ed573d6000803e3d6000fd5b505050506040513d602081101561140357600080fd5b50519050801561144a57600783015461141c90826131ef565b60078401556008830154611430908a6131ef565b6008840155600382015461144490826131ef565b60038301555b82546001840154604080517f9f7433410000000000000000000000000000000000000000000000000000000081526001600160a01b0390931660048401526024830191909152516114d59133918c917344DdA8E799dE6A4a4a50052793D208B3bE16cA3391639f74334191604480820192602092909190829003018186803b158015610fd157600080fd5b6114e08a89896133ea565b604080518a815290518b9133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a35050600180555050505050505050565b61152f613366565b6001600160a01b0316611540611767565b6001600160a01b03161461159b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b80600983815481106115a957fe5b6000918252602090912060099091020180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03929092169190911790555050565b6006546001600160a01b03163314611652576040805162461bcd60e51b815260206004820152600760248201527f6e6f742064657600000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600680547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000806009838154811061169c57fe5b600091825260209182902060099091020180546001820154604080517f3d0dfc3b0000000000000000000000000000000000000000000000000000000081526001600160a01b039093166004840152602483018890526044830191909152519193507344DdA8E799dE6A4a4a50052793D208B3bE16cA3392633d0dfc3b92606480840193829003018186803b15801561173457600080fd5b505af4158015611748573d6000803e3d6000fd5b505050506040513d602081101561175e57600080fd5b50519392505050565b6000546001600160a01b031690565b6004546001600160a01b031681565b600a60209081526000928352604080842090915290825290208054600182015460028301546003909301549192909184565b6005546001600160a01b03163314611816576040805162461bcd60e51b815260206004820152601260248201527f6e6f742072657761726420757064617465720000000000000000000000000000604482015290519081900360640190fd5b60005b825181101561189757600083828151811061183057fe5b60200260200101519050826009828154811061184857fe5b6000918252602090912060099091020180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905550600101611819565b505050565b60075481565b6118aa613366565b6001600160a01b03166118bb611767565b6001600160a01b031614611916576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60095460005b81811015611a5e5760006009828154811061193357fe5b60009182526020808320600990920290910180546001820154604080517f9f7433410000000000000000000000000000000000000000000000000000000081526001600160a01b0390931660048401526024830191909152519194507344DdA8E799dE6A4a4a50052793D208B3bE16cA3392639f74334192604480840193829003018186803b1580156119c557600080fd5b505af41580156119d9573d6000803e3d6000fd5b505050506040513d60208110156119ef57600080fd5b505190506001600160a01b038781169082161415611a54576040805162461bcd60e51b815260206004820152600d60248201527f21706f6f6c2e6c70546f6b656e00000000000000000000000000000000000000604482015290519081900360640190fd5b505060010161191c565b50611a736001600160a01b038516838561336a565b50505050565b6000828152600a602090815260408083206001600160a01b0385168452909152812060018101546002820154611ad79190611ad190670de0b6b3a764000090610cf690611ac990610cea8b610bdd565b86549061324c565b9061330c565b949350505050565b611ae7613366565b6001600160a01b0316611af8611767565b6001600160a01b031614611b53576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600380547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b611b95613366565b6001600160a01b0316611ba6611767565b6001600160a01b031614611c01576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600855565b60026001541415611c5e576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001819055508233600060098381548110611c7757fe5b90600052602060002090600902019050611c9083610bdd565b6003820155611c9e836123c1565b60028201556001600160a01b03821615611cef576000838152600a602090815260408083206001600160a01b03861684529091529020611cde8484611a79565b600182015560038201546002909101555b611cfa8686866133ea565b50506001805550505050565b611d0e613366565b6001600160a01b0316611d1f611767565b6001600160a01b031614611d7a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60005b8151811015611897576009604051806101200160405280856001600160a01b03168152602001848481518110611daf57fe5b6020908102919091018101518252600082820181905260408084018290526060808501839052608080860184905260a080870185905260c080880186905260e0978801869052895460018082018c559a875295879020895160099097020180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0390971696909617865595880151858a0155928701516002850155908601516003840155850151600483015584015160058201559083015160068201559082015160078201556101009091015160089091015501611d7d565b6003546001600160a01b031681565b60085481565b611eae613366565b6001600160a01b0316611ebf611767565b6001600160a01b031614611f1a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60026001541415611fac576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001819055508133600060098381548110611fc557fe5b90600052602060002090600902019050611fde83610bdd565b6003820155611fec836123c1565b60028201556001600160a01b0382161561203d576000838152600a602090815260408083206001600160a01b0386168452909152902061202c8484611a79565b600182015560038201546002909101555b60008411612092576040805162461bcd60e51b815260206004820152601060248201527f43616e6e6f74206465706f736974203000000000000000000000000000000000604482015290519081900360640190fd5b6000600986815481106120a157fe5b60009182526020808320898452600a82526040808520338087529084529481902060099094029091018054600182015483517f9f7433410000000000000000000000000000000000000000000000000000000081526001600160a01b0392909216600483015260248201529151909550929361219193909230928b927344DdA8E799dE6A4a4a50052793D208B3bE16cA3392639f7433419260448082019391829003018186803b15801561215457600080fd5b505af4158015612168573d6000803e3d6000fd5b505050506040513d602081101561217e57600080fd5b50516001600160a01b03169291906135fa565b81546001830154604080517ff8c35b370000000000000000000000000000000000000000000000000000000081526001600160a01b039093166004840152602483019190915260448201889052516000917344DdA8E799dE6A4a4a50052793D208B3bE16cA339163f8c35b3791606480820192602092909190829003018186803b15801561221e57600080fd5b505af4158015612232573d6000803e3d6000fd5b505050506040513d602081101561224857600080fd5b50519050801561228f576007830154612261908261330c565b60078401556008830154612275908861330c565b60088401556003820154612289908261330c565b60038301555b815461229b908861330c565b8255604080518881529051899133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a3505060018055505050505050565b6122ea613366565b6001600160a01b03166122fb611767565b6001600160a01b031614612356576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b816009848154811061236457fe5b906000526020600020906009020160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080600984815481106123a757fe5b906000526020600020906009020160010181905550505050565b600080600983815481106123d157fe5b906000526020600020906009020190506123ef438260060154613682565b9392505050565b6000806009838154811061240657fe5b906000526020600020906009020190506123ef600754826005015461324c90919063ffffffff16565b612437613366565b6001600160a01b0316612448611767565b6001600160a01b0316146124a3576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166124e85760405162461bcd60e51b81526004018080602001828103825260268152602001806139376026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b612563613366565b6001600160a01b0316612574611767565b6001600160a01b0316146125cf576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60408051610120810182526001600160a01b039384168152602081019283526000918101828152606082018381526080830184815260a0840185815260c0850186815260e086018781526101008701888152600980546001810182559981905297517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af9990980298890180547fffffffffffffffffffffffff00000000000000000000000000000000000000001698909b169790971790995596517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b087015592517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b186015590517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b2850155517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b3840155517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b483015591517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b582015591517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b6830155517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b790910155565b80600080600983815481106127c957fe5b906000526020600020906009020190506127e283610bdd565b60038201556127f0836123c1565b60028201556001600160a01b03821615612841576000838152600a602090815260408083206001600160a01b038616845290915290206128308484611a79565b600182015560038201546002909101555b6003546001600160a01b031633146128a0576040805162461bcd60e51b815260206004820152600d60248201527f6e6f7420647261696e6374726c00000000000000000000000000000000000000604482015290519081900360640190fd5b6000600985815481106128af57fe5b60009182526020822060099091020180546001820154604080517f53d6afd40000000000000000000000000000000000000000000000000000000081526001600160a01b0390931660048401819052602484018b90526044840183905290519395509390927344DdA8E799dE6A4a4a50052793D208B3bE16cA33926353d6afd4926064808301939192829003018186803b15801561294c57600080fd5b505af4158015612960573d6000803e3d6000fd5b5050604080517fb50c4fb60000000000000000000000000000000000000000000000000000000081526001600160a01b0386166004820152602481018b90529051600093507344DdA8E799dE6A4a4a50052793D208B3bE16cA33925063b50c4fb691604480820192602092909190829003018186803b1580156129e257600080fd5b505af41580156129f6573d6000803e3d6000fd5b505050506040513d6020811015612a0c57600080fd5b5051604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519192506000916001600160a01b038416916370a08231916024808301926020929190829003018186803b158015612a7357600080fd5b505afa158015612a87573d6000803e3d6000fd5b505050506040513d6020811015612a9d57600080fd5b5051905080612ab0575050505050611a73565b604080517ff35294550000000000000000000000000000000000000000000000000000000081526001600160a01b0386166004820152602481018b90526044810183905230606482015290516000917344DdA8E799dE6A4a4a50052793D208B3bE16cA339163f352945591608480820192602092909190829003018186803b158015612b3b57600080fd5b505af4158015612b4f573d6000803e3d6000fd5b505050506040513d6020811015612b6557600080fd5b5051600854909150600090612b83906103e890610cf690859061324c565b90508015612c565760048054604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b039283169381019390935260248301849052517f00000000000000000000000000000000000000000000000000000000000000009091169163a9059cbb9160448083019260209291908290030181600087803b158015612c1c57600080fd5b505af1158015612c30573d6000803e3d6000fd5b505050506040513d6020811015612c4657600080fd5b50612c53905082826131ef565b91505b600254604080517fe3d670d700000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b03169163e3d670d7916024808301926020929190829003018186803b158015612cba57600080fd5b505afa158015612cce573d6000803e3d6000fd5b505050506040513d6020811015612ce457600080fd5b505160025460408051602480820188905282518083039091018152604490910182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f104f823c00000000000000000000000000000000000000000000000000000000178152915181519495506000946001600160a01b0390941693919290918291908083835b60208310612dac57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101612d6f565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114612e0c576040519150601f19603f3d011682016040523d82523d6000602084013e612e11565b606091505b5050905080612e515760405162461bcd60e51b815260040180806020018281038252603681526020018061397e6036913960400191505060405180910390fd5b600254604080517fe3d670d700000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b03169163e3d670d7916024808301926020929190829003018186803b158015612eb557600080fd5b505afa158015612ec9573d6000803e3d6000fd5b505050506040513d6020811015612edf57600080fd5b505190506000612eef82856131ef565b60048c0154909150612f01908261330c565b60048c015560068b01544310612f2957600754612f1f9082906132a5565b60058c0155612f72565b60068b0154600090612f3b90436131ef565b90506000612f568d600501548361324c90919063ffffffff16565b600754909150612f6a90610cf6858461330c565b60058e015550505b4360028c01819055600754612f87919061330c565b8b600601819055508e7ff7580ecfeb93fe4d13723dc9622b0a0b3647488def26a04ceac8e648c0a35843826040518082815260200191505060405180910390a2505050505050505050505050505050565b612fe0613366565b6001600160a01b0316612ff1611767565b6001600160a01b03161461304c576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600280546001600160a01b038084167fffffffffffffffffffffffff0000000000000000000000000000000000000000909216919091179182905560408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f8fd3ab80000000000000000000000000000000000000000000000000000000001781529151815160009590941693919290918291908083835b6020831061313057805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016130f3565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114613190576040519150601f19603f3d011682016040523d82523d6000602084013e613195565b606091505b50509050806131eb576040805162461bcd60e51b815260206004820152601e60248201527f6d69677261746528292064656c656761746563616c6c206661696c65642e0000604482015290519081900360640190fd5b5050565b600082821115613246576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60008261325b57506000610b6c565b8282028284828161326857fe5b04146123ef5760405162461bcd60e51b815260040180806020018281038252602181526020018061395d6021913960400191505060405180910390fd5b60008082116132fb576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161330457fe5b049392505050565b6000828201838110156123ef576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b3390565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052611897908490613698565b6000600984815481106133f957fe5b60009182526020808320878452600a82526040808520338652909252922060018101546009909202909201925080156135f25760006001830155600483015481811015613444578091505b60025460408051602481018590526044810189905260ff881660648083019190915282518083039091018152608490910182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fb939f40700000000000000000000000000000000000000000000000000000000178152915181516000946001600160a01b03169382918083835b6020831061351357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016134d6565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114613573576040519150601f19603f3d011682016040523d82523d6000602084013e613578565b606091505b50509050806135b85760405162461bcd60e51b81526004018080602001828103825260508152602001806139de6050913960600191505060405180910390fd5b604080518481529051899133917ff01da32686223933d8a18a391060918c7f11a3648639edd87ae013e2e27317439181900360200190a350505b505050505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052611a73908590613698565b600081831061369157816123ef565b5090919050565b60006136ed826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166137499092919063ffffffff16565b8051909150156118975780806020019051602081101561370c57600080fd5b50516118975760405162461bcd60e51b815260040180806020018281038252602a8152602001806139b4602a913960400191505060405180910390fd5b6060611ad784846000858561375d8561388c565b6137ae576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b6020831061380a57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016137cd565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461386c576040519150601f19603f3d011682016040523d82523d6000602084013e613871565b606091505b5091509150613881828286613892565b979650505050505050565b3b151590565b606083156138a15750816123ef565b8251156138b15782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156138fb5781810151838201526020016138e3565b50505050905090810190601f1680156139285780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7768616e646c65447261696e6564574554482875696e7432353620616d6f756e74292064656c656761746563616c6c206661696c65642e5361666545524332303a204552433230206f7065726174696f6e20646964206e6f74207375636365656468616e646c65436c61696d2875696e743235362070656e64696e672c2075696e7432353620746970416d6f756e742c2075696e743820666c6167292064656c656761746563616c6c206661696c65642ea264697066735822122097dd08139b580c22836548606d5d8db95bb4cae537c80dcad9f205e17c2d3bf164736f6c63430007060033",
  "deployedBytecode": "0x6080604052600436106102895760003560e01c806394a1af4611610153578063e10f8f06116100cb578063efedb5d61161007f578063f5d82b6b11610064578063f5d82b6b146109f6578063f6b19c7414610a2f578063feab159214610a5957610290565b8063efedb5d614610999578063f2fde38b146109c357610290565b8063e2bbb158116100b0578063e2bbb15814610900578063ede2302e14610930578063eeca15621461096f57610290565b8063e10f8f06146108b8578063e22fae06146108cd57610290565b8063cbb4e2e111610122578063d35e295a11610107578063d35e295a146107b7578063d4c2840d146107e3578063e0a9b09d146108a357610290565b8063cbb4e2e11461075a578063d17f2a591461078d57610290565b806394a1af461461060e5780639b501723146106c9578063a081ddbd146106de578063b6f525a71461072157610290565b8063592e7def1161020157806385033762116101b55780638da5cb5b1161019a5780638da5cb5b1461058557806392f2cff01461059a57806393f1a40b146105af57610290565b8063850337621461052857806389c70e791461055b57610290565b8063715018a6116101e6578063715018a6146104a857806374e9d093146104bd5780637fd7dc8a146104ef57610290565b8063592e7def1461047e57806368cdd86e1461049357610290565b806333fc552e11610258578063431de0071161023d578063431de007146103f55780635312ea8e1461042a578063577fbd5f1461045457610290565b806333fc552e1461039a5780633ad10ef6146103c457610290565b80630661cefb14610295578063081e3eda146102e05780631526fe27146102f5578063217f9c391461037057610290565b3661029057005b600080fd5b3480156102a157600080fd5b506102ce600480360360408110156102b857600080fd5b50803590602001356001600160a01b0316610a8c565b60408051918252519081900360200190f35b3480156102ec57600080fd5b506102ce610b72565b34801561030157600080fd5b5061031f6004803603602081101561031857600080fd5b5035610b78565b604080516001600160a01b03909a168a5260208a0198909852888801969096526060880194909452608087019290925260a086015260c085015260e084015261010083015251908190036101200190f35b34801561037c57600080fd5b506102ce6004803603602081101561039357600080fd5b5035610bdd565b3480156103a657600080fd5b506102ce600480360360208110156103bd57600080fd5b5035610d11565b3480156103d057600080fd5b506103d9610d3c565b604080516001600160a01b039092168252519081900360200190f35b34801561040157600080fd5b506104286004803603602081101561041857600080fd5b50356001600160a01b0316610d4b565b005b34801561043657600080fd5b506104286004803603602081101561044d57600080fd5b5035610df9565b34801561046057600080fd5b506104286004803603602081101561047757600080fd5b5035611065565b34801561048a57600080fd5b506103d96110c9565b34801561049f57600080fd5b506103d96110d8565b3480156104b457600080fd5b506104286110e7565b610428600480360360808110156104d357600080fd5b508035906020810135906040810135906060013560ff166111bd565b3480156104fb57600080fd5b506104286004803603604081101561051257600080fd5b50803590602001356001600160a01b0316611527565b34801561053457600080fd5b506104286004803603602081101561054b57600080fd5b50356001600160a01b03166115f3565b34801561056757600080fd5b506102ce6004803603602081101561057e57600080fd5b503561168c565b34801561059157600080fd5b506103d9611767565b3480156105a657600080fd5b506103d9611776565b3480156105bb57600080fd5b506105e8600480360360408110156105d257600080fd5b50803590602001356001600160a01b0316611785565b604080519485526020850193909352838301919091526060830152519081900360800190f35b34801561061a57600080fd5b506104286004803603604081101561063157600080fd5b81019060208101813564010000000081111561064c57600080fd5b82018360208201111561065e57600080fd5b8035906020019184602083028401116401000000008311171561068057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550505090356001600160a01b031691506117b79050565b3480156106d557600080fd5b506102ce61189c565b3480156106ea57600080fd5b506104286004803603606081101561070157600080fd5b506001600160a01b038135811691602081013591604090910135166118a2565b34801561072d57600080fd5b506102ce6004803603604081101561074457600080fd5b50803590602001356001600160a01b0316611a79565b34801561076657600080fd5b506104286004803603602081101561077d57600080fd5b50356001600160a01b0316611adf565b34801561079957600080fd5b50610428600480360360208110156107b057600080fd5b5035611b8d565b610428600480360360608110156107cd57600080fd5b508035906020810135906040013560ff16611c06565b3480156107ef57600080fd5b506104286004803603604081101561080657600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561083157600080fd5b82018360208201111561084357600080fd5b8035906020019184602083028401116401000000008311171561086557600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550611d06945050505050565b3480156108af57600080fd5b506103d9611e91565b3480156108c457600080fd5b506102ce611ea0565b3480156108d957600080fd5b50610428600480360360208110156108f057600080fd5b50356001600160a01b0316611ea6565b34801561090c57600080fd5b506104286004803603604081101561092357600080fd5b5080359060200135611f54565b34801561093c57600080fd5b506104286004803603606081101561095357600080fd5b508035906001600160a01b0360208201351690604001356122e2565b34801561097b57600080fd5b506102ce6004803603602081101561099257600080fd5b50356123c1565b3480156109a557600080fd5b506102ce600480360360208110156109bc57600080fd5b50356123f6565b3480156109cf57600080fd5b50610428600480360360208110156109e657600080fd5b50356001600160a01b031661242f565b348015610a0257600080fd5b5061042860048036036040811015610a1957600080fd5b506001600160a01b03813516906020013561255b565b348015610a3b57600080fd5b5061042860048036036020811015610a5257600080fd5b50356127b8565b348015610a6557600080fd5b5061042860048036036020811015610a7c57600080fd5b50356001600160a01b0316612fd8565b600080610a998484611a79565b600254604080517f9d3f50390000000000000000000000000000000000000000000000000000000081526004810184905290519293506000926001600160a01b0390921691639d3f50399160248082019260209290919082900301818787803b158015610b0557600080fd5b505af1158015610b19573d6000803e3d6000fd5b505050506040513d6020811015610b2f57600080fd5b50516040805182815290519192507fb37961da3972b7b5f62cae2d8c10d43840dbe99529a868d75b318ad6f2c09c0e919081900360200190a19150505b92915050565b60095490565b60098181548110610b8857600080fd5b60009182526020909120600990910201805460018201546002830154600384015460048501546005860154600687015460078801546008909801546001600160a01b0390971698509496939592949193909289565b60008060098381548110610bed57fe5b60009182526020808320600990920290910180546001820154604080517f1e95069c0000000000000000000000000000000000000000000000000000000081526001600160a01b03909316600484015260248301919091525191945073__$73c6edfe3f2e6e88b24dd13808d31aba3f$__92631e95069c92604480840193829003018186803b158015610c7f57600080fd5b505af4158015610c93573d6000803e3d6000fd5b505050506040513d6020811015610ca957600080fd5b5051905080610cbe5750600301549050610d0c565b610d07610cfc82610cf6670de0b6b3a7640000610cf08760050154610cf08960020154610cea8d6123c1565b906131ef565b9061324c565b906132a5565b60038401549061330c565b925050505b919050565b60008060098381548110610d2157fe5b60009182526020909120600460099092020101549392505050565b6006546001600160a01b031681565b610d53613366565b6001600160a01b0316610d64611767565b6001600160a01b031614610dbf576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600480547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60026001541415610e51576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600181905550600060098281548110610e6857fe5b60009182526020808320858452600a8252604080852033865283529384902060099093020180546001820154845486517fa2c16fe70000000000000000000000000000000000000000000000000000000081526001600160a01b03939093166004840152602483019190915260448201529351909450919273__$73c6edfe3f2e6e88b24dd13808d31aba3f$__9263a2c16fe792606480840193919291829003018186803b158015610f1957600080fd5b505af4158015610f2d573d6000803e3d6000fd5b505050506040513d6020811015610f4357600080fd5b5050805482546001840154604080517f9f7433410000000000000000000000000000000000000000000000000000000081526001600160a01b03909316600484015260248301919091525161100d923392909173__$73c6edfe3f2e6e88b24dd13808d31aba3f$__91639f743341916044808301926020929190829003018186803b158015610fd157600080fd5b505af4158015610fe5573d6000803e3d6000fd5b505050506040513d6020811015610ffb57600080fd5b50516001600160a01b0316919061336a565b80546040805191825251849133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a3600080825560018083018290556002830182905560039092015580555050565b6005546001600160a01b031633146110c4576040805162461bcd60e51b815260206004820152601260248201527f6e6f742072657761726420757064617465720000000000000000000000000000604482015290519081900360640190fd5b600755565b6002546001600160a01b031681565b6005546001600160a01b031681565b6110ef613366565b6001600160a01b0316611100611767565b6001600160a01b03161461115b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60026001541415611215576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600181905550833360006009838154811061122e57fe5b9060005260206000209060090201905061124783610bdd565b6003820155611255836123c1565b60028201556001600160a01b038216156112a6576000838152600a602090815260408083206001600160a01b038616845290915290206112958484611a79565b600182015560038201546002909101555b6000600988815481106112b557fe5b600091825260208083208b8452600a8252604080852033865290925292206009909102909101915087158015906112ed575080548811155b61133e576040805162461bcd60e51b815260206004820152601260248201527f77697468647261773a206e6f7420676f6f640000000000000000000000000000604482015290519081900360640190fd5b805461134a90896131ef565b815581546001830154604080517fa2c16fe70000000000000000000000000000000000000000000000000000000081526001600160a01b0390931660048401526024830191909152604482018a90525160009173__$73c6edfe3f2e6e88b24dd13808d31aba3f$__9163a2c16fe791606480820192602092909190829003018186803b1580156113d957600080fd5b505af41580156113ed573d6000803e3d6000fd5b505050506040513d602081101561140357600080fd5b50519050801561144a57600783015461141c90826131ef565b60078401556008830154611430908a6131ef565b6008840155600382015461144490826131ef565b60038301555b82546001840154604080517f9f7433410000000000000000000000000000000000000000000000000000000081526001600160a01b0390931660048401526024830191909152516114d59133918c9173__$73c6edfe3f2e6e88b24dd13808d31aba3f$__91639f74334191604480820192602092909190829003018186803b158015610fd157600080fd5b6114e08a89896133ea565b604080518a815290518b9133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a35050600180555050505050505050565b61152f613366565b6001600160a01b0316611540611767565b6001600160a01b03161461159b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b80600983815481106115a957fe5b6000918252602090912060099091020180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03929092169190911790555050565b6006546001600160a01b03163314611652576040805162461bcd60e51b815260206004820152600760248201527f6e6f742064657600000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b600680547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000806009838154811061169c57fe5b600091825260209182902060099091020180546001820154604080517f3d0dfc3b0000000000000000000000000000000000000000000000000000000081526001600160a01b0390931660048401526024830188905260448301919091525191935073__$73c6edfe3f2e6e88b24dd13808d31aba3f$__92633d0dfc3b92606480840193829003018186803b15801561173457600080fd5b505af4158015611748573d6000803e3d6000fd5b505050506040513d602081101561175e57600080fd5b50519392505050565b6000546001600160a01b031690565b6004546001600160a01b031681565b600a60209081526000928352604080842090915290825290208054600182015460028301546003909301549192909184565b6005546001600160a01b03163314611816576040805162461bcd60e51b815260206004820152601260248201527f6e6f742072657761726420757064617465720000000000000000000000000000604482015290519081900360640190fd5b60005b825181101561189757600083828151811061183057fe5b60200260200101519050826009828154811061184857fe5b6000918252602090912060099091020180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905550600101611819565b505050565b60075481565b6118aa613366565b6001600160a01b03166118bb611767565b6001600160a01b031614611916576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60095460005b81811015611a5e5760006009828154811061193357fe5b60009182526020808320600990920290910180546001820154604080517f9f7433410000000000000000000000000000000000000000000000000000000081526001600160a01b03909316600484015260248301919091525191945073__$73c6edfe3f2e6e88b24dd13808d31aba3f$__92639f74334192604480840193829003018186803b1580156119c557600080fd5b505af41580156119d9573d6000803e3d6000fd5b505050506040513d60208110156119ef57600080fd5b505190506001600160a01b038781169082161415611a54576040805162461bcd60e51b815260206004820152600d60248201527f21706f6f6c2e6c70546f6b656e00000000000000000000000000000000000000604482015290519081900360640190fd5b505060010161191c565b50611a736001600160a01b038516838561336a565b50505050565b6000828152600a602090815260408083206001600160a01b0385168452909152812060018101546002820154611ad79190611ad190670de0b6b3a764000090610cf690611ac990610cea8b610bdd565b86549061324c565b9061330c565b949350505050565b611ae7613366565b6001600160a01b0316611af8611767565b6001600160a01b031614611b53576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600380547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b611b95613366565b6001600160a01b0316611ba6611767565b6001600160a01b031614611c01576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600855565b60026001541415611c5e576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001819055508233600060098381548110611c7757fe5b90600052602060002090600902019050611c9083610bdd565b6003820155611c9e836123c1565b60028201556001600160a01b03821615611cef576000838152600a602090815260408083206001600160a01b03861684529091529020611cde8484611a79565b600182015560038201546002909101555b611cfa8686866133ea565b50506001805550505050565b611d0e613366565b6001600160a01b0316611d1f611767565b6001600160a01b031614611d7a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60005b8151811015611897576009604051806101200160405280856001600160a01b03168152602001848481518110611daf57fe5b6020908102919091018101518252600082820181905260408084018290526060808501839052608080860184905260a080870185905260c080880186905260e0978801869052895460018082018c559a875295879020895160099097020180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0390971696909617865595880151858a0155928701516002850155908601516003840155850151600483015584015160058201559083015160068201559082015160078201556101009091015160089091015501611d7d565b6003546001600160a01b031681565b60085481565b611eae613366565b6001600160a01b0316611ebf611767565b6001600160a01b031614611f1a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600580547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60026001541415611fac576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026001819055508133600060098381548110611fc557fe5b90600052602060002090600902019050611fde83610bdd565b6003820155611fec836123c1565b60028201556001600160a01b0382161561203d576000838152600a602090815260408083206001600160a01b0386168452909152902061202c8484611a79565b600182015560038201546002909101555b60008411612092576040805162461bcd60e51b815260206004820152601060248201527f43616e6e6f74206465706f736974203000000000000000000000000000000000604482015290519081900360640190fd5b6000600986815481106120a157fe5b60009182526020808320898452600a82526040808520338087529084529481902060099094029091018054600182015483517f9f7433410000000000000000000000000000000000000000000000000000000081526001600160a01b0392909216600483015260248201529151909550929361219193909230928b9273__$73c6edfe3f2e6e88b24dd13808d31aba3f$__92639f7433419260448082019391829003018186803b15801561215457600080fd5b505af4158015612168573d6000803e3d6000fd5b505050506040513d602081101561217e57600080fd5b50516001600160a01b03169291906135fa565b81546001830154604080517ff8c35b370000000000000000000000000000000000000000000000000000000081526001600160a01b0390931660048401526024830191909152604482018890525160009173__$73c6edfe3f2e6e88b24dd13808d31aba3f$__9163f8c35b3791606480820192602092909190829003018186803b15801561221e57600080fd5b505af4158015612232573d6000803e3d6000fd5b505050506040513d602081101561224857600080fd5b50519050801561228f576007830154612261908261330c565b60078401556008830154612275908861330c565b60088401556003820154612289908261330c565b60038301555b815461229b908861330c565b8255604080518881529051899133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a3505060018055505050505050565b6122ea613366565b6001600160a01b03166122fb611767565b6001600160a01b031614612356576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b816009848154811061236457fe5b906000526020600020906009020160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080600984815481106123a757fe5b906000526020600020906009020160010181905550505050565b600080600983815481106123d157fe5b906000526020600020906009020190506123ef438260060154613682565b9392505050565b6000806009838154811061240657fe5b906000526020600020906009020190506123ef600754826005015461324c90919063ffffffff16565b612437613366565b6001600160a01b0316612448611767565b6001600160a01b0316146124a3576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166124e85760405162461bcd60e51b81526004018080602001828103825260268152602001806139376026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b612563613366565b6001600160a01b0316612574611767565b6001600160a01b0316146125cf576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60408051610120810182526001600160a01b039384168152602081019283526000918101828152606082018381526080830184815260a0840185815260c0850186815260e086018781526101008701888152600980546001810182559981905297517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af9990980298890180547fffffffffffffffffffffffff00000000000000000000000000000000000000001698909b169790971790995596517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b087015592517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b186015590517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b2850155517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b3840155517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b483015591517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b582015591517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b6830155517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b790910155565b80600080600983815481106127c957fe5b906000526020600020906009020190506127e283610bdd565b60038201556127f0836123c1565b60028201556001600160a01b03821615612841576000838152600a602090815260408083206001600160a01b038616845290915290206128308484611a79565b600182015560038201546002909101555b6003546001600160a01b031633146128a0576040805162461bcd60e51b815260206004820152600d60248201527f6e6f7420647261696e6374726c00000000000000000000000000000000000000604482015290519081900360640190fd5b6000600985815481106128af57fe5b60009182526020822060099091020180546001820154604080517f53d6afd40000000000000000000000000000000000000000000000000000000081526001600160a01b0390931660048401819052602484018b905260448401839052905193955093909273__$73c6edfe3f2e6e88b24dd13808d31aba3f$__926353d6afd4926064808301939192829003018186803b15801561294c57600080fd5b505af4158015612960573d6000803e3d6000fd5b5050604080517fb50c4fb60000000000000000000000000000000000000000000000000000000081526001600160a01b0386166004820152602481018b905290516000935073__$73c6edfe3f2e6e88b24dd13808d31aba3f$__925063b50c4fb691604480820192602092909190829003018186803b1580156129e257600080fd5b505af41580156129f6573d6000803e3d6000fd5b505050506040513d6020811015612a0c57600080fd5b5051604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290519192506000916001600160a01b038416916370a08231916024808301926020929190829003018186803b158015612a7357600080fd5b505afa158015612a87573d6000803e3d6000fd5b505050506040513d6020811015612a9d57600080fd5b5051905080612ab0575050505050611a73565b604080517ff35294550000000000000000000000000000000000000000000000000000000081526001600160a01b0386166004820152602481018b905260448101839052306064820152905160009173__$73c6edfe3f2e6e88b24dd13808d31aba3f$__9163f352945591608480820192602092909190829003018186803b158015612b3b57600080fd5b505af4158015612b4f573d6000803e3d6000fd5b505050506040513d6020811015612b6557600080fd5b5051600854909150600090612b83906103e890610cf690859061324c565b90508015612c565760048054604080517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b039283169381019390935260248301849052517f00000000000000000000000000000000000000000000000000000000000000009091169163a9059cbb9160448083019260209291908290030181600087803b158015612c1c57600080fd5b505af1158015612c30573d6000803e3d6000fd5b505050506040513d6020811015612c4657600080fd5b50612c53905082826131ef565b91505b600254604080517fe3d670d700000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b03169163e3d670d7916024808301926020929190829003018186803b158015612cba57600080fd5b505afa158015612cce573d6000803e3d6000fd5b505050506040513d6020811015612ce457600080fd5b505160025460408051602480820188905282518083039091018152604490910182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f104f823c00000000000000000000000000000000000000000000000000000000178152915181519495506000946001600160a01b0390941693919290918291908083835b60208310612dac57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101612d6f565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114612e0c576040519150601f19603f3d011682016040523d82523d6000602084013e612e11565b606091505b5050905080612e515760405162461bcd60e51b815260040180806020018281038252603681526020018061397e6036913960400191505060405180910390fd5b600254604080517fe3d670d700000000000000000000000000000000000000000000000000000000815230600482015290516000926001600160a01b03169163e3d670d7916024808301926020929190829003018186803b158015612eb557600080fd5b505afa158015612ec9573d6000803e3d6000fd5b505050506040513d6020811015612edf57600080fd5b505190506000612eef82856131ef565b60048c0154909150612f01908261330c565b60048c015560068b01544310612f2957600754612f1f9082906132a5565b60058c0155612f72565b60068b0154600090612f3b90436131ef565b90506000612f568d600501548361324c90919063ffffffff16565b600754909150612f6a90610cf6858461330c565b60058e015550505b4360028c01819055600754612f87919061330c565b8b600601819055508e7ff7580ecfeb93fe4d13723dc9622b0a0b3647488def26a04ceac8e648c0a35843826040518082815260200191505060405180910390a2505050505050505050505050505050565b612fe0613366565b6001600160a01b0316612ff1611767565b6001600160a01b03161461304c576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600280546001600160a01b038084167fffffffffffffffffffffffff0000000000000000000000000000000000000000909216919091179182905560408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f8fd3ab80000000000000000000000000000000000000000000000000000000001781529151815160009590941693919290918291908083835b6020831061313057805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016130f3565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114613190576040519150601f19603f3d011682016040523d82523d6000602084013e613195565b606091505b50509050806131eb576040805162461bcd60e51b815260206004820152601e60248201527f6d69677261746528292064656c656761746563616c6c206661696c65642e0000604482015290519081900360640190fd5b5050565b600082821115613246576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b60008261325b57506000610b6c565b8282028284828161326857fe5b04146123ef5760405162461bcd60e51b815260040180806020018281038252602181526020018061395d6021913960400191505060405180910390fd5b60008082116132fb576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161330457fe5b049392505050565b6000828201838110156123ef576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b3390565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052611897908490613698565b6000600984815481106133f957fe5b60009182526020808320878452600a82526040808520338652909252922060018101546009909202909201925080156135f25760006001830155600483015481811015613444578091505b60025460408051602481018590526044810189905260ff881660648083019190915282518083039091018152608490910182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fb939f40700000000000000000000000000000000000000000000000000000000178152915181516000946001600160a01b03169382918083835b6020831061351357805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016134d6565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855af49150503d8060008114613573576040519150601f19603f3d011682016040523d82523d6000602084013e613578565b606091505b50509050806135b85760405162461bcd60e51b81526004018080602001828103825260508152602001806139de6050913960600191505060405180910390fd5b604080518481529051899133917ff01da32686223933d8a18a391060918c7f11a3648639edd87ae013e2e27317439181900360200190a350505b505050505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052611a73908590613698565b600081831061369157816123ef565b5090919050565b60006136ed826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166137499092919063ffffffff16565b8051909150156118975780806020019051602081101561370c57600080fd5b50516118975760405162461bcd60e51b815260040180806020018281038252602a8152602001806139b4602a913960400191505060405180910390fd5b6060611ad784846000858561375d8561388c565b6137ae576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b6020831061380a57805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016137cd565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461386c576040519150601f19603f3d011682016040523d82523d6000602084013e613871565b606091505b5091509150613881828286613892565b979650505050505050565b3b151590565b606083156138a15750816123ef565b8251156138b15782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156138fb5781810151838201526020016138e3565b50505050905090810190601f1680156139285780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7768616e646c65447261696e6564574554482875696e7432353620616d6f756e74292064656c656761746563616c6c206661696c65642e5361666545524332303a204552433230206f7065726174696f6e20646964206e6f74207375636365656468616e646c65436c61696d2875696e743235362070656e64696e672c2075696e7432353620746970416d6f756e742c2075696e743820666c6167292064656c656761746563616c6c206661696c65642ea264697066735822122097dd08139b580c22836548606d5d8db95bb4cae537c80dcad9f205e17c2d3bf164736f6c63430007060033",
  "libraries": {
    "VampireAdapter": "0x44DdA8E799dE6A4a4a50052793D208B3bE16cA33"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "drain(uint256)": {
        "notice": "Can only be called by DrainController"
      },
      "recoverUnsupported(address,uint256,address)": {
        "notice": "This function allows owner to take unsupported tokens out of the contract. It also allows for removal of airdropped tokens."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/MasterVampire.sol:MasterVampire",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2153,
        "contract": "contracts/MasterVampire.sol:MasterVampire",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5102,
        "contract": "contracts/MasterVampire.sol:MasterVampire",
        "label": "IBVETH",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5104,
        "contract": "contracts/MasterVampire.sol:MasterVampire",
        "label": "drainController",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 5106,
        "contract": "contracts/MasterVampire.sol:MasterVampire",
        "label": "drainAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 5108,
        "contract": "contracts/MasterVampire.sol:MasterVampire",
        "label": "poolRewardUpdater",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 5110,
        "contract": "contracts/MasterVampire.sol:MasterVampire",
        "label": "devAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 5113,
        "contract": "contracts/MasterVampire.sol:MasterVampire",
        "label": "distributionPeriod",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 5116,
        "contract": "contracts/MasterVampire.sol:MasterVampire",
        "label": "wethDrainModifier",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 5119,
        "contract": "contracts/MasterVampire.sol:MasterVampire",
        "label": "poolInfo",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_struct(PoolInfo)5100_storage)dyn_storage"
      },
      {
        "astId": 5125,
        "contract": "contracts/MasterVampire.sol:MasterVampire",
        "label": "userInfo",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5081_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)5100_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)5100_storage",
        "encoding": "dynamic_array",
        "label": "struct IMasterVampire.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_contract(Victim)7763": {
        "encoding": "inplace",
        "label": "contract Victim",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)5081_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IMasterVampire.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)5081_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)5081_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct IMasterVampire.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)5081_storage)"
      },
      "t_struct(PoolInfo)5100_storage": {
        "encoding": "inplace",
        "label": "struct IMasterVampire.PoolInfo",
        "members": [
          {
            "astId": 5083,
            "contract": "contracts/MasterVampire.sol:MasterVampire",
            "label": "victim",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(Victim)7763"
          },
          {
            "astId": 5085,
            "contract": "contracts/MasterVampire.sol:MasterVampire",
            "label": "victimPoolId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5087,
            "contract": "contracts/MasterVampire.sol:MasterVampire",
            "label": "lastUpdateBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5089,
            "contract": "contracts/MasterVampire.sol:MasterVampire",
            "label": "accWethPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5091,
            "contract": "contracts/MasterVampire.sol:MasterVampire",
            "label": "wethAccumulator",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5093,
            "contract": "contracts/MasterVampire.sol:MasterVampire",
            "label": "rewardRate",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5095,
            "contract": "contracts/MasterVampire.sol:MasterVampire",
            "label": "periodFinish",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 5097,
            "contract": "contracts/MasterVampire.sol:MasterVampire",
            "label": "basePoolShares",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 5099,
            "contract": "contracts/MasterVampire.sol:MasterVampire",
            "label": "baseDeposits",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(UserInfo)5081_storage": {
        "encoding": "inplace",
        "label": "struct IMasterVampire.UserInfo",
        "members": [
          {
            "astId": 5074,
            "contract": "contracts/MasterVampire.sol:MasterVampire",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5076,
            "contract": "contracts/MasterVampire.sol:MasterVampire",
            "label": "rewards",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5078,
            "contract": "contracts/MasterVampire.sol:MasterVampire",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5080,
            "contract": "contracts/MasterVampire.sol:MasterVampire",
            "label": "poolShares",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}