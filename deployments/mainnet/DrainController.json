{
  "address": "0x4852a488F15AE544C75FED466908A2D1559EBAfa",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_chi",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "chi",
      "outputs": [
        {
          "internalType": "contract IChiToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "pids",
          "type": "uint256[]"
        }
      ],
      "name": "drainPools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isDrainable",
      "outputs": [
        {
          "internalType": "int32[]",
          "name": "",
          "type": "int32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "kill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterVampire",
      "outputs": [
        {
          "internalType": "contract IMasterVampire",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxGasPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "masterVampire_",
          "type": "address"
        }
      ],
      "name": "setMasterVampire",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxGasPrice_",
          "type": "uint256"
        }
      ],
      "name": "setMaxGasPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "wethThreshold_",
          "type": "uint256"
        }
      ],
      "name": "setWETHThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "unWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wethThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8a28a63339a6c2313ec3637b087a4ac1aa2d838c212e96a85499f37455377c0c",
  "receipt": {
    "to": null,
    "from": "0x94627695F66Ab36Ae00c1995a30Bf5B30E139873",
    "contractAddress": "0x4852a488F15AE544C75FED466908A2D1559EBAfa",
    "transactionIndex": 114,
    "gasUsed": "1298361",
    "logsBloom": "0x
    "blockHash": "0x4c71ec0ed59f5b60a4c1e6fb9363364388c85f8c864e1ff12ee92be5de55de3a",
    "transactionHash": "0x8a28a63339a6c2313ec3637b087a4ac1aa2d838c212e96a85499f37455377c0c",
    "logs": [
      {
        "transactionIndex": 114,
        "blockNumber": 12719283,
        "transactionHash": "0x8a28a63339a6c2313ec3637b087a4ac1aa2d838c212e96a85499f37455377c0c",
        "address": "0x4852a488F15AE544C75FED466908A2D1559EBAfa",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000094627695f66ab36ae00c1995a30bf5b30e139873"
        ],
        "data": "0x",
        "logIndex": 283,
        "blockHash": "0x4c71ec0ed59f5b60a4c1e6fb9363364388c85f8c864e1ff12ee92be5de55de3a"
      }
    ],
    "blockNumber": 12719283,
    "cumulativeGasUsed": "14336337",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000004946c0e9F43F4Dee607b0eF1fA1c"
  ],
  "solcInputHash": "e166554613407b5e5de9c2eccf5906c7",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_chi\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"chi\",\"outputs\":[{\"internalType\":\"contract IChiToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"pids\",\"type\":\"uint256[]\"}],\"name\":\"drainPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDrainable\",\"outputs\":[{\"internalType\":\"int32[]\",\"name\":\"\",\"type\":\"int32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterVampire\",\"outputs\":[{\"internalType\":\"contract IMasterVampire\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxGasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"masterVampire_\",\"type\":\"address\"}],\"name\":\"setMasterVampire\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxGasPrice_\",\"type\":\"uint256\"}],\"name\":\"setMaxGasPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wethThreshold_\",\"type\":\"uint256\"}],\"name\":\"setWETHThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"unWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wethThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"kill(address)\":{\"params\":{\"to\":\"Address to send any remaining ETH to before contract is destroyed\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unWhitelist(address)\":{\"details\":\"Removes account from whitelist\",\"params\":{\"account_\":\"The address to remove from the whitelist\"}},\"whitelist(address)\":{\"details\":\"Adds account to whitelist\",\"params\":{\"account_\":\"The address to whitelist\"}},\"withdrawETH(address)\":{\"params\":{\"to\":\"Address to send ETH balance\"}}},\"title\":\"Controls the \\\"drain\\\" of pool rewards drainPools should be called by a whitelisted node. This function calls drain() for each pool in MasterVampire if the reward WETH value is greater then the configured threshold. This contract has \\\"gas treasury\\\" which is funded in ETH by DrainDistributor. ETH is refunded to the node to pay for a portion of the gas fee. Chi Tokens can be used for any remaining gas discounts if caller holds the tokens. If the contract needs to be replaced the deployer can destruct the contract and get a gas refund, as well as collect any remaining ETH to be deployed to the new contract.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"drainPools(uint256[])\":{\"notice\":\"Drains the specified pools\"},\"isDrainable()\":{\"notice\":\"Determines if drain can be performed\"},\"kill(address)\":{\"notice\":\"Destruct contract to get a refund and also move any left over ETH to specified address\"},\"setMasterVampire(address)\":{\"notice\":\"Change MasterVampire contract\"},\"setMaxGasPrice(uint256)\":{\"notice\":\"Change the maximum gas price in Gwei for refunds\"},\"setWETHThreshold(uint256)\":{\"notice\":\"Change the WETH drain threshold\"},\"withdrawETH(address)\":{\"notice\":\"Provides a way to remove ETH balance from contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DrainController.sol\":\"DrainController\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x549c5343ad9f7e3f38aa4c4761854403502574bbc15b822db2ce892ff9b79da7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc77dd6233a82c7c6e3dc49da8f3456baa00ecd3ea4dfa9222002a9aebf155dcd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf89f005a3d98f7768cdee2583707db0ac725cf567d455751af32ee68132f3db3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/DrainController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./VampireAdapter.sol\\\";\\nimport \\\"./interfaces/IChiToken.sol\\\";\\n\\ninterface IMasterVampire {\\n    function drain(uint256 pid) external;\\n    function poolInfo(uint256 pid) external view returns (Victim victim,\\n                                                          uint256 victimPoolId,\\n                                                          uint256 lastRewardBlock,\\n                                                          uint256 accWethPerShare,\\n                                                          uint256 wethAccumulator,\\n                                                          uint256 basePoolShares,\\n                                                          uint256 baseDeposits);\\n    function poolLength() external view returns (uint256);\\n    function pendingVictimReward(uint256 pid) external view returns (uint256);\\n}\\n\\n/**\\n* @title Controls the \\\"drain\\\" of pool rewards\\n*\\n* drainPools should be called by a whitelisted node.\\n* This function calls drain() for each pool in MasterVampire if the reward\\n* WETH value is greater then the configured threshold.\\n*\\n* This contract has \\\"gas treasury\\\" which is funded in ETH by DrainDistributor.\\n* ETH is refunded to the node to pay for a portion of the gas fee.\\n* Chi Tokens can be used for any remaining gas discounts if caller holds the tokens.\\n*\\n* If the contract needs to be replaced the deployer can destruct the contract and get\\n* a gas refund, as well as collect any remaining ETH to be deployed to the new contract.\\n*/\\ncontract DrainController is Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    using VampireAdapter for Victim;\\n\\n    IMasterVampire public masterVampire;\\n    uint256 public wethThreshold = 200000000000000000 wei;\\n    uint256 public maxGasPrice = 60; // This is the maximum gas price in Gwei that this contract will refund\\n\\n    mapping(address => bool) internal whitelistedNode;\\n\\n    IChiToken public immutable chi;\\n\\n    constructor(address _chi) {\\n        whitelistedNode[msg.sender] = true;\\n        chi = IChiToken(_chi);\\n    }\\n\\n    /**\\n     * @notice Allow depositing ether to the contract\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @notice Calculates estimated gas cost of a function and attempts to refund that amount to caller\\n     */\\n    modifier refundGasCost() {\\n        uint256 gasStart = gasleft();\\n        uint256 ethBalance = address(this).balance;\\n        uint256 weiGasPriceMax = maxGasPrice.mul(10**9); // The maximum gas price in Wei units\\n        uint256 weiGasPrice = tx.gasprice; // The gas price for the current transaction\\n        if (maxGasPrice > 0 && weiGasPrice > weiGasPriceMax){\\n            // User should not spend more than the gas price max\\n            weiGasPrice = weiGasPriceMax;\\n        }\\n        _;\\n        uint256 usedGas = 85000 + gasStart - gasleft();\\n        uint gasCost = usedGas * weiGasPrice;\\n        // Refund total gas cost if contract has enough funds\\n        if (ethBalance >= gasCost) {\\n            msg.sender.transfer(gasCost);\\n            return;\\n        }\\n\\n        // Otherwise send what we can and try use chi to save some gas\\n        msg.sender.transfer(ethBalance);\\n        usedGas = 85000 + gasStart - gasleft();\\n        gasCost = usedGas * weiGasPrice;\\n        uint256 remainingGasSpent = (gasCost - ethBalance) / weiGasPrice;\\n        chi.freeFromUpTo(msg.sender, (remainingGasSpent + 14154) / 41947);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the whitelister\\n     */\\n    modifier onlyWhitelister() {\\n        require(\\n            whitelistedNode[msg.sender],\\n            \\\"account is not whitelisted\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Adds account to whitelist\\n     * @param account_ The address to whitelist\\n     */\\n    function whitelist(address account_) external onlyOwner {\\n        whitelistedNode[account_] = true;\\n    }\\n\\n    /**\\n     * @dev Removes account from whitelist\\n     * @param account_ The address to remove from the whitelist\\n     */\\n    function unWhitelist(address account_) external onlyOwner {\\n        whitelistedNode[account_] = false;\\n    }\\n\\n    /**\\n     * @notice Change MasterVampire contract\\n     */\\n    function setMasterVampire(address masterVampire_) external onlyOwner {\\n        require(masterVampire_ != address(0));\\n        masterVampire = IMasterVampire(masterVampire_);\\n    }\\n\\n    /**\\n     * @notice Change the WETH drain threshold\\n     */\\n    function setWETHThreshold(uint256 wethThreshold_) external onlyOwner {\\n        wethThreshold = wethThreshold_;\\n    }\\n\\n    /**\\n     * @notice Change the maximum gas price in Gwei for refunds\\n     */\\n    function setMaxGasPrice(uint256 maxGasPrice_) external onlyOwner {\\n        maxGasPrice = maxGasPrice_;\\n    }\\n\\n    /**\\n     * @notice Determines if drain can be performed\\n     */\\n    function isDrainable() external view returns(int32[] memory) {\\n        uint256 poolLength = masterVampire.poolLength();\\n        int32[] memory drainablePools = new int32[](poolLength);\\n        for (uint pid = 0; pid < poolLength; pid++) {\\n            drainablePools[pid] = -1;\\n            (Victim victim, uint256 victimPoolId,,,,,) = masterVampire.poolInfo(pid);\\n            if (address(victim) != address(0)) {\\n                uint256 pendingReward = masterVampire.pendingVictimReward(pid);\\n                if (pendingReward > 0) {\\n                    if (victim.rewardValue(victimPoolId, pendingReward) >= wethThreshold) {\\n                        drainablePools[pid] = int32(pid);\\n                    }\\n                }\\n            }\\n        }\\n        return drainablePools;\\n    }\\n\\n    /**\\n     * @notice Drains the specified pools\\n     */\\n    function drainPools(uint256[] memory pids) external onlyWhitelister refundGasCost {\\n        uint256 poolLength = pids.length;\\n        for (uint i = 0; i < poolLength; ++i) {\\n            uint pid = pids[i];\\n            masterVampire.drain(pid);\\n        }\\n    }\\n\\n    /**\\n     * @notice Provides a way to remove ETH balance from contract\\n     * @param to Address to send ETH balance\\n     */\\n    function withdrawETH(address payable to) external onlyOwner {\\n        to.transfer(address(this).balance);\\n    }\\n\\n    /**\\n     * @notice Destruct contract to get a refund and also move any left over ETH to specified address\\n     * @param to Address to send any remaining ETH to before contract is destroyed\\n     */\\n    function kill(address payable to) external onlyOwner {\\n        to.transfer(address(this).balance);\\n        selfdestruct(msg.sender);\\n    }\\n}\\n\",\"keccak256\":\"0xfaf5e7fd1aab55c4a2a89c03726168aaba26badfaf6a183bde1bf80377c9dc3e\",\"license\":\"MIT\"},\"contracts/VampireAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract Victim {}\\n\\nlibrary VampireAdapter {\\n    // Victim info\\n    function rewardToken(Victim victim, uint256 poolId) external view returns (IERC20) {\\n        (bool success, bytes memory result) = address(victim).staticcall(abi.encodeWithSignature(\\\"rewardToken(uint256)\\\", poolId));\\n        require(success, \\\"rewardToken(uint256) staticcall failed.\\\");\\n        return abi.decode(result, (IERC20));\\n    }\\n\\n    function rewardValue(Victim victim, uint256 poolId, uint256 amount) external view returns (uint256) {\\n        (bool success, bytes memory result) = address(victim).staticcall(abi.encodeWithSignature(\\\"rewardValue(uint256,uint256)\\\", poolId, amount));\\n        require(success, \\\"rewardValue(uint256,uint256) staticcall failed.\\\");\\n        return abi.decode(result, (uint256));\\n    }\\n\\n    function poolCount(Victim victim) external view returns (uint256) {\\n        (bool success, bytes memory result) = address(victim).staticcall(abi.encodeWithSignature(\\\"poolCount()\\\"));\\n        require(success, \\\"poolCount() staticcall failed.\\\");\\n        return abi.decode(result, (uint256));\\n    }\\n\\n    function sellableRewardAmount(Victim victim, uint256 poolId) external view returns (uint256) {\\n        (bool success, bytes memory result) = address(victim).staticcall(abi.encodeWithSignature(\\\"sellableRewardAmount(uint256)\\\", poolId));\\n        require(success, \\\"sellableRewardAmount(uint256) staticcall failed.\\\");\\n        return abi.decode(result, (uint256));\\n    }\\n\\n    // Victim actions\\n    function sellRewardForWeth(Victim victim, uint256 poolId, uint256 rewardAmount, address to) external returns(uint256) {\\n        (bool success, bytes memory result) = address(victim).delegatecall(abi.encodeWithSignature(\\\"sellRewardForWeth(address,uint256,uint256,address)\\\", address(victim), poolId, rewardAmount, to));\\n        require(success, \\\"sellRewardForWeth(uint256,address) delegatecall failed.\\\");\\n        return abi.decode(result, (uint256));\\n    }\\n\\n    // Pool info\\n    function lockableToken(Victim victim, uint256 poolId) external view returns (IERC20) {\\n        (bool success, bytes memory result) = address(victim).staticcall(abi.encodeWithSignature(\\\"lockableToken(uint256)\\\", poolId));\\n        require(success, \\\"lockableToken(uint256) staticcall failed.\\\");\\n        return abi.decode(result, (IERC20));\\n    }\\n\\n    function lockedAmount(Victim victim, uint256 poolId) external view returns (uint256) {\\n        // note the impersonation\\n        (bool success, bytes memory result) = address(victim).staticcall(abi.encodeWithSignature(\\\"lockedAmount(address,uint256)\\\", address(this), poolId));\\n        require(success, \\\"lockedAmount(uint256) staticcall failed.\\\");\\n        return abi.decode(result, (uint256));\\n    }\\n\\n    function pendingReward(Victim victim, uint256 poolId, uint256 victimPoolId) external view returns (uint256) {\\n        // note the impersonation\\n        (bool success, bytes memory result) = address(victim).staticcall(abi.encodeWithSignature(\\\"pendingReward(address,uint256,uint256)\\\", address(victim), poolId, victimPoolId));\\n        require(success, \\\"pendingReward(address,uint256,uint256) staticcall failed.\\\");\\n        return abi.decode(result, (uint256));\\n    }\\n\\n    // Pool actions\\n    function deposit(Victim victim, uint256 poolId, uint256 amount) external returns (uint256) {\\n        (bool success, bytes memory result) = address(victim).delegatecall(abi.encodeWithSignature(\\\"deposit(address,uint256,uint256)\\\", address(victim), poolId, amount));\\n        require(success, \\\"deposit(uint256,uint256) delegatecall failed.\\\");\\n        return abi.decode(result, (uint256));\\n    }\\n\\n    function withdraw(Victim victim, uint256 poolId, uint256 amount) external returns (uint256) {\\n        (bool success, bytes memory result) = address(victim).delegatecall(abi.encodeWithSignature(\\\"withdraw(address,uint256,uint256)\\\", address(victim), poolId, amount));\\n        require(success, \\\"withdraw(uint256,uint256) delegatecall failed.\\\");\\n        return abi.decode(result, (uint256));\\n    }\\n\\n    function claimReward(Victim victim, uint256 poolId, uint256 victimPoolId) external {\\n        (bool success,) = address(victim).delegatecall(abi.encodeWithSignature(\\\"claimReward(address,uint256,uint256)\\\", address(victim), poolId, victimPoolId));\\n        require(success, \\\"claimReward(uint256,uint256) delegatecall failed.\\\");\\n    }\\n\\n    function emergencyWithdraw(Victim victim, uint256 poolId) external {\\n        (bool success,) = address(victim).delegatecall(abi.encodeWithSignature(\\\"emergencyWithdraw(address,uint256)\\\", address(victim), poolId));\\n        require(success, \\\"emergencyWithdraw(uint256) delegatecall failed.\\\");\\n    }\\n\\n    // Service methods\\n    function poolAddress(Victim victim, uint256 poolId) external view returns (address) {\\n        (bool success, bytes memory result) = address(victim).staticcall(abi.encodeWithSignature(\\\"poolAddress(uint256)\\\", poolId));\\n        require(success, \\\"poolAddress(uint256) staticcall failed.\\\");\\n        return abi.decode(result, (address));\\n    }\\n\\n    function rewardToWethPool(Victim victim) external view returns (address) {\\n        (bool success, bytes memory result) = address(victim).staticcall(abi.encodeWithSignature(\\\"rewardToWethPool()\\\"));\\n        require(success, \\\"rewardToWethPool() staticcall failed.\\\");\\n        return abi.decode(result, (address));\\n    }\\n}\",\"keccak256\":\"0x0e27a650f2a17e4bd6765182a82685d8349eb7bb1d40c7373c76fc3a79711611\",\"license\":\"MIT\"},\"contracts/interfaces/IChiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IChiToken is IERC20 {\\n    function mint(uint256 value) external;\\n    function freeFromUpTo(address from, uint256 value) external returns(uint256 freed);\\n}\",\"keccak256\":\"0x50021275c39583e189bd5b98435f37afc552059b819604409b8e83c532e56be8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040526702c68af0bb140000600255603c60035534801561002157600080fd5b506040516115f53803806115f5833981016040819052610040916100c9565b600061004a6100c5565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3503360009081526004602052604090208054600160ff1990911617905560601b6001600160601b0319166080526100f7565b3390565b6000602082840312156100da578081fd5b81516001600160a01b03811681146100f0578182fd5b9392505050565b60805160601c6114dc61011960003980610a9252806110db52506114dc6000f3fe6080604052600436106100f75760003560e01c8063c92aecc41161008a578063e75b377e11610059578063e75b377e14610268578063f21af00714610288578063f2fde38b146102a8578063f6304d90146102c8576100fe565b8063c92aecc4146101fe578063cbf0b0c014610213578063d24aeaee14610233578063d2fa635e14610248576100fe565b8063715018a6116100c6578063715018a6146101925780638da5cb5b146101a75780639b19251a146101bc578063a7418259146101dc576100fe565b806315d22534146101035780633de39c111461012e5780634d8ce39614610150578063690d832014610172576100fe565b366100fe57005b600080fd5b34801561010f57600080fd5b506101186102e8565b6040516101259190611341565b60405180910390f35b34801561013a57600080fd5b50610143610304565b6040516101259190611434565b34801561015c57600080fd5b5061017061016b3660046111eb565b61030a565b005b34801561017e57600080fd5b5061017061018d3660046111eb565b6103ff565b34801561019e57600080fd5b506101706104d3565b3480156101b357600080fd5b506101186105d0565b3480156101c857600080fd5b506101706101d73660046111eb565b6105ec565b3480156101e857600080fd5b506101f16106c9565b6040516101259190611388565b34801561020a57600080fd5b50610118610a90565b34801561021f57600080fd5b5061017061022e3660046111eb565b610ab4565b34801561023f57600080fd5b50610143610b88565b34801561025457600080fd5b50610170610263366004611311565b610b8e565b34801561027457600080fd5b50610170610283366004611311565b610c21565b34801561029457600080fd5b506101706102a33660046111eb565b610cb4565b3480156102b457600080fd5b506101706102c33660046111eb565b610d8e565b3480156102d457600080fd5b506101706102e3366004611207565b610efb565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b610312611185565b73ffffffffffffffffffffffffffffffffffffffff166103306105d0565b73ffffffffffffffffffffffffffffffffffffffff1614610398576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166103b857600080fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b610407611185565b73ffffffffffffffffffffffffffffffffffffffff166104256105d0565b73ffffffffffffffffffffffffffffffffffffffff161461048d576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60405173ffffffffffffffffffffffffffffffffffffffff8216904780156108fc02916000818181858888f193505050501580156104cf573d6000803e3d6000fd5b5050565b6104db611185565b73ffffffffffffffffffffffffffffffffffffffff166104f96105d0565b73ffffffffffffffffffffffffffffffffffffffff1614610561576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b6105f4611185565b73ffffffffffffffffffffffffffffffffffffffff166106126105d0565b73ffffffffffffffffffffffffffffffffffffffff161461067a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff16600090815260046020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b60606000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663081e3eda6040518163ffffffff1660e01b815260040160206040518083038186803b15801561073557600080fd5b505afa158015610749573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076d9190611329565b905060008167ffffffffffffffff8111801561078857600080fd5b506040519080825280602002602001820160405280156107b2578160200160208202803683370190505b50905060005b82811015610a89577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8282815181106107ed57fe5b600392830b90920b602092830291909101909101526001546040517f1526fe27000000000000000000000000000000000000000000000000000000008152600091829173ffffffffffffffffffffffffffffffffffffffff90911690631526fe279061085d908690600401611434565b60e06040518083038186803b15801561087557600080fd5b505afa158015610889573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ad91906112b5565b505050505091509150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610a7f576001546040517f89c70e7900000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff16906389c70e7990610941908790600401611434565b60206040518083038186803b15801561095957600080fd5b505afa15801561096d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109919190611329565b90508015610a7d576002546040517f9fe833db0000000000000000000000000000000000000000000000000000000081527344DdA8E799dE6A4a4a50052793D208B3bE16cA3390639fe833db90610a069073ffffffffffffffffffffffffffffffffffffffff881690879087906004016113cf565b60206040518083038186803b158015610a1e57600080fd5b505af4158015610a32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a569190611329565b10610a7d5783858581518110610a6857fe5b602002602001019060030b908160030b815250505b505b50506001016107b8565b5091505090565b7f000000000000000000000000000000000000000000000000000000000000000081565b610abc611185565b73ffffffffffffffffffffffffffffffffffffffff16610ada6105d0565b73ffffffffffffffffffffffffffffffffffffffff1614610b42576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60405173ffffffffffffffffffffffffffffffffffffffff8216904780156108fc02916000818181858888f19350505050158015610b84573d6000803e3d6000fd5b5033ff5b60025481565b610b96611185565b73ffffffffffffffffffffffffffffffffffffffff16610bb46105d0565b73ffffffffffffffffffffffffffffffffffffffff1614610c1c576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600355565b610c29611185565b73ffffffffffffffffffffffffffffffffffffffff16610c476105d0565b73ffffffffffffffffffffffffffffffffffffffff1614610caf576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600255565b610cbc611185565b73ffffffffffffffffffffffffffffffffffffffff16610cda6105d0565b73ffffffffffffffffffffffffffffffffffffffff1614610d42576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff16600090815260046020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b610d96611185565b73ffffffffffffffffffffffffffffffffffffffff16610db46105d0565b73ffffffffffffffffffffffffffffffffffffffff1614610e1c576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116610e6e5760405162461bcd60e51b81526004018080602001828103825260268152602001806114606026913960400191505060405180910390fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b3360009081526004602052604090205460ff16610f335760405162461bcd60e51b8152600401610f2a906113fd565b60405180910390fd5b60005a6003549091504790600090610f4f90633b9aca00611189565b6003549091503a9015801590610f6457508181115b15610f6c5750805b845160005b81811015611027576000878281518110610f8757fe5b60209081029190910101516001546040517ff6b19c7400000000000000000000000000000000000000000000000000000000815291925073ffffffffffffffffffffffffffffffffffffffff169063f6b19c7490610fe9908490600401611434565b600060405180830381600087803b15801561100357600080fd5b505af1158015611017573d6000803e3d6000fd5b5050505050806001019050610f71565b505060005a850362014c0801905081810280851061107857604051339082156108fc029083906000818181858888f1935050505015801561106c573d6000803e3d6000fd5b50505050505050611182565b604051339086156108fc029087906000818181858888f193505050501580156110a5573d6000803e3d6000fd5b505a860362014c0801915050818102600083868303816110c157fe5b04905073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663079d229f3361a3db61374a8501046040518363ffffffff1660e01b8152600401611127929190611362565b602060405180830381600087803b15801561114157600080fd5b505af1158015611155573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111799190611329565b50505050505050505b50565b3390565b600082611198575060006111e5565b828202828482816111a557fe5b04146111e25760405162461bcd60e51b81526004018080602001828103825260218152602001806114866021913960400191505060405180910390fd5b90505b92915050565b6000602082840312156111fc578081fd5b81356111e28161143d565b60006020808385031215611219578182fd5b823567ffffffffffffffff80821115611230578384fd5b818501915085601f830112611243578384fd5b81358181111561124f57fe5b8381026040518582820101818110858211171561126857fe5b604052828152858101935084860182860187018a1015611286578788fd5b8795505b838610156112a857803585526001959095019493860193860161128a565b5098975050505050505050565b600080600080600080600060e0888a0312156112cf578283fd5b87516112da8161143d565b602089015160408a015160608b015160808c015160a08d015160c0909d0151949e939d50919b909a50909850965090945092505050565b600060208284031215611322578081fd5b5035919050565b60006020828403121561133a578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156113c357835160030b835292840192918401916001016113a4565b50909695505050505050565b73ffffffffffffffffffffffffffffffffffffffff9390931683526020830191909152604082015260600190565b6020808252601a908201527f6163636f756e74206973206e6f742077686974656c6973746564000000000000604082015260600190565b90815260200190565b73ffffffffffffffffffffffffffffffffffffffff8116811461118257600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a264697066735822122023377c7631de29ba16e0d307d818335fed33d458f01c7f88e6715c6cabb65d0064736f6c63430007060033",
  "deployedBytecode": "0x6080604052600436106100f75760003560e01c8063c92aecc41161008a578063e75b377e11610059578063e75b377e14610268578063f21af00714610288578063f2fde38b146102a8578063f6304d90146102c8576100fe565b8063c92aecc4146101fe578063cbf0b0c014610213578063d24aeaee14610233578063d2fa635e14610248576100fe565b8063715018a6116100c6578063715018a6146101925780638da5cb5b146101a75780639b19251a146101bc578063a7418259146101dc576100fe565b806315d22534146101035780633de39c111461012e5780634d8ce39614610150578063690d832014610172576100fe565b366100fe57005b600080fd5b34801561010f57600080fd5b506101186102e8565b6040516101259190611341565b60405180910390f35b34801561013a57600080fd5b50610143610304565b6040516101259190611434565b34801561015c57600080fd5b5061017061016b3660046111eb565b61030a565b005b34801561017e57600080fd5b5061017061018d3660046111eb565b6103ff565b34801561019e57600080fd5b506101706104d3565b3480156101b357600080fd5b506101186105d0565b3480156101c857600080fd5b506101706101d73660046111eb565b6105ec565b3480156101e857600080fd5b506101f16106c9565b6040516101259190611388565b34801561020a57600080fd5b50610118610a90565b34801561021f57600080fd5b5061017061022e3660046111eb565b610ab4565b34801561023f57600080fd5b50610143610b88565b34801561025457600080fd5b50610170610263366004611311565b610b8e565b34801561027457600080fd5b50610170610283366004611311565b610c21565b34801561029457600080fd5b506101706102a33660046111eb565b610cb4565b3480156102b457600080fd5b506101706102c33660046111eb565b610d8e565b3480156102d457600080fd5b506101706102e3366004611207565b610efb565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b610312611185565b73ffffffffffffffffffffffffffffffffffffffff166103306105d0565b73ffffffffffffffffffffffffffffffffffffffff1614610398576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166103b857600080fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b610407611185565b73ffffffffffffffffffffffffffffffffffffffff166104256105d0565b73ffffffffffffffffffffffffffffffffffffffff161461048d576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60405173ffffffffffffffffffffffffffffffffffffffff8216904780156108fc02916000818181858888f193505050501580156104cf573d6000803e3d6000fd5b5050565b6104db611185565b73ffffffffffffffffffffffffffffffffffffffff166104f96105d0565b73ffffffffffffffffffffffffffffffffffffffff1614610561576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b6105f4611185565b73ffffffffffffffffffffffffffffffffffffffff166106126105d0565b73ffffffffffffffffffffffffffffffffffffffff161461067a576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff16600090815260046020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b60606000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663081e3eda6040518163ffffffff1660e01b815260040160206040518083038186803b15801561073557600080fd5b505afa158015610749573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076d9190611329565b905060008167ffffffffffffffff8111801561078857600080fd5b506040519080825280602002602001820160405280156107b2578160200160208202803683370190505b50905060005b82811015610a89577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8282815181106107ed57fe5b600392830b90920b602092830291909101909101526001546040517f1526fe27000000000000000000000000000000000000000000000000000000008152600091829173ffffffffffffffffffffffffffffffffffffffff90911690631526fe279061085d908690600401611434565b60e06040518083038186803b15801561087557600080fd5b505afa158015610889573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ad91906112b5565b505050505091509150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610a7f576001546040517f89c70e7900000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff16906389c70e7990610941908790600401611434565b60206040518083038186803b15801561095957600080fd5b505afa15801561096d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109919190611329565b90508015610a7d576002546040517f9fe833db00000000000000000000000000000000000000000000000000000000815273__$73c6edfe3f2e6e88b24dd13808d31aba3f$__90639fe833db90610a069073ffffffffffffffffffffffffffffffffffffffff881690879087906004016113cf565b60206040518083038186803b158015610a1e57600080fd5b505af4158015610a32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a569190611329565b10610a7d5783858581518110610a6857fe5b602002602001019060030b908160030b815250505b505b50506001016107b8565b5091505090565b7f000000000000000000000000000000000000000000000000000000000000000081565b610abc611185565b73ffffffffffffffffffffffffffffffffffffffff16610ada6105d0565b73ffffffffffffffffffffffffffffffffffffffff1614610b42576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60405173ffffffffffffffffffffffffffffffffffffffff8216904780156108fc02916000818181858888f19350505050158015610b84573d6000803e3d6000fd5b5033ff5b60025481565b610b96611185565b73ffffffffffffffffffffffffffffffffffffffff16610bb46105d0565b73ffffffffffffffffffffffffffffffffffffffff1614610c1c576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600355565b610c29611185565b73ffffffffffffffffffffffffffffffffffffffff16610c476105d0565b73ffffffffffffffffffffffffffffffffffffffff1614610caf576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600255565b610cbc611185565b73ffffffffffffffffffffffffffffffffffffffff16610cda6105d0565b73ffffffffffffffffffffffffffffffffffffffff1614610d42576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff16600090815260046020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b610d96611185565b73ffffffffffffffffffffffffffffffffffffffff16610db46105d0565b73ffffffffffffffffffffffffffffffffffffffff1614610e1c576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116610e6e5760405162461bcd60e51b81526004018080602001828103825260268152602001806114606026913960400191505060405180910390fd5b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b3360009081526004602052604090205460ff16610f335760405162461bcd60e51b8152600401610f2a906113fd565b60405180910390fd5b60005a6003549091504790600090610f4f90633b9aca00611189565b6003549091503a9015801590610f6457508181115b15610f6c5750805b845160005b81811015611027576000878281518110610f8757fe5b60209081029190910101516001546040517ff6b19c7400000000000000000000000000000000000000000000000000000000815291925073ffffffffffffffffffffffffffffffffffffffff169063f6b19c7490610fe9908490600401611434565b600060405180830381600087803b15801561100357600080fd5b505af1158015611017573d6000803e3d6000fd5b5050505050806001019050610f71565b505060005a850362014c0801905081810280851061107857604051339082156108fc029083906000818181858888f1935050505015801561106c573d6000803e3d6000fd5b50505050505050611182565b604051339086156108fc029087906000818181858888f193505050501580156110a5573d6000803e3d6000fd5b505a860362014c0801915050818102600083868303816110c157fe5b04905073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663079d229f3361a3db61374a8501046040518363ffffffff1660e01b8152600401611127929190611362565b602060405180830381600087803b15801561114157600080fd5b505af1158015611155573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111799190611329565b50505050505050505b50565b3390565b600082611198575060006111e5565b828202828482816111a557fe5b04146111e25760405162461bcd60e51b81526004018080602001828103825260218152602001806114866021913960400191505060405180910390fd5b90505b92915050565b6000602082840312156111fc578081fd5b81356111e28161143d565b60006020808385031215611219578182fd5b823567ffffffffffffffff80821115611230578384fd5b818501915085601f830112611243578384fd5b81358181111561124f57fe5b8381026040518582820101818110858211171561126857fe5b604052828152858101935084860182860187018a1015611286578788fd5b8795505b838610156112a857803585526001959095019493860193860161128a565b5098975050505050505050565b600080600080600080600060e0888a0312156112cf578283fd5b87516112da8161143d565b602089015160408a015160608b015160808c015160a08d015160c0909d0151949e939d50919b909a50909850965090945092505050565b600060208284031215611322578081fd5b5035919050565b60006020828403121561133a578081fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156113c357835160030b835292840192918401916001016113a4565b50909695505050505050565b73ffffffffffffffffffffffffffffffffffffffff9390931683526020830191909152604082015260600190565b6020808252601a908201527f6163636f756e74206973206e6f742077686974656c6973746564000000000000604082015260600190565b90815260200190565b73ffffffffffffffffffffffffffffffffffffffff8116811461118257600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a264697066735822122023377c7631de29ba16e0d307d818335fed33d458f01c7f88e6715c6cabb65d0064736f6c63430007060033",
  "libraries": {
    "VampireAdapter": "0x44DdA8E799dE6A4a4a50052793D208B3bE16cA33"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "kill(address)": {
        "params": {
          "to": "Address to send any remaining ETH to before contract is destroyed"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unWhitelist(address)": {
        "details": "Removes account from whitelist",
        "params": {
          "account_": "The address to remove from the whitelist"
        }
      },
      "whitelist(address)": {
        "details": "Adds account to whitelist",
        "params": {
          "account_": "The address to whitelist"
        }
      },
      "withdrawETH(address)": {
        "params": {
          "to": "Address to send ETH balance"
        }
      }
    },
    "title": "Controls the \"drain\" of pool rewards drainPools should be called by a whitelisted node. This function calls drain() for each pool in MasterVampire if the reward WETH value is greater then the configured threshold. This contract has \"gas treasury\" which is funded in ETH by DrainDistributor. ETH is refunded to the node to pay for a portion of the gas fee. Chi Tokens can be used for any remaining gas discounts if caller holds the tokens. If the contract needs to be replaced the deployer can destruct the contract and get a gas refund, as well as collect any remaining ETH to be deployed to the new contract.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "drainPools(uint256[])": {
        "notice": "Drains the specified pools"
      },
      "isDrainable()": {
        "notice": "Determines if drain can be performed"
      },
      "kill(address)": {
        "notice": "Destruct contract to get a refund and also move any left over ETH to specified address"
      },
      "setMasterVampire(address)": {
        "notice": "Change MasterVampire contract"
      },
      "setMaxGasPrice(uint256)": {
        "notice": "Change the maximum gas price in Gwei for refunds"
      },
      "setWETHThreshold(uint256)": {
        "notice": "Change the WETH drain threshold"
      },
      "withdrawETH(address)": {
        "notice": "Provides a way to remove ETH balance from contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/DrainController.sol:DrainController",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3717,
        "contract": "contracts/DrainController.sol:DrainController",
        "label": "masterVampire",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IMasterVampire)3703"
      },
      {
        "astId": 3720,
        "contract": "contracts/DrainController.sol:DrainController",
        "label": "wethThreshold",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3723,
        "contract": "contracts/DrainController.sol:DrainController",
        "label": "maxGasPrice",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3727,
        "contract": "contracts/DrainController.sol:DrainController",
        "label": "whitelistedNode",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IMasterVampire)3703": {
        "encoding": "inplace",
        "label": "contract IMasterVampire",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}