{
  "language": "Solidity",
  "sources": {
    "contracts/adapters/alchemix/AlchemixAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../../interfaces/IUniswapV2Pair.sol\";\nimport \"../../interfaces/IUniswapV2Router02.sol\";\nimport \"../../libraries/UniswapV2Library.sol\";\nimport \"../../BaseAdapter.sol\";\nimport \"./IStakingPools.sol\";\n\ncontract AlchemixAdapter is BaseAdapter {\n    address immutable MASTER_VAMPIRE;\n    IERC20 constant ALCX = IERC20(0xdBdb4d16EdA451D0503b854CF79D55697F90c8DF);\n    IStakingPools constant ALCX_STAKINGPOOLS = IStakingPools(0xAB8e74017a8Cc7c15FFcCd726603790d26d7DeCa);\n    IUniswapV2Pair constant ALCX_WETH_PAIR = IUniswapV2Pair(0x352E5EeE2D9C957710be656534D51Fbb3Ce074d6);\n\n    constructor(address _weth, address _factory, address _masterVampire)\n        BaseAdapter(_weth, _factory)\n    {\n        MASTER_VAMPIRE = _masterVampire;\n    }\n\n    // Victim info\n    function rewardToken(uint256) public pure override returns (IERC20) {\n        return ALCX;\n    }\n\n    function poolCount() external view override returns (uint256) {\n        return ALCX_STAKINGPOOLS.poolCount();\n    }\n\n    function sellableRewardAmount(uint256) external pure override returns (uint256) {\n        return uint256(-1);\n    }\n\n    function sellRewardForWeth(address, uint256, uint256 rewardAmount, address to) external override returns (uint256) {\n        // ETH-ALCX Pair\n        ALCX.transfer(address(ALCX_WETH_PAIR), rewardAmount);\n        (uint256 wethReserve, uint256 alcxReserve,) = ALCX_WETH_PAIR.getReserves();\n        uint256 amountOutput = UniswapV2Library.getAmountOut(rewardAmount, wethReserve, alcxReserve);\n        ALCX_WETH_PAIR.swap(amountOutput, uint256(0), to, new bytes(0));\n        return amountOutput;\n    }\n\n    // Pool info\n    function lockableToken(uint256 poolId) external view override returns (IERC20) {\n        return ALCX_STAKINGPOOLS.getPoolToken(poolId);\n    }\n\n    function lockedAmount(address user, uint256 poolId) external view override returns (uint256) {\n        return ALCX_STAKINGPOOLS.getStakeTotalDeposited(user, poolId);\n    }\n\n    function pendingReward(address, uint256, uint256 victimPoolId) external view override returns (uint256) {\n        return ALCX_STAKINGPOOLS.getStakeTotalUnclaimed(MASTER_VAMPIRE, victimPoolId);\n    }\n\n    // Pool actions, requires impersonation via delegatecall\n    function deposit(address _adapter, uint256 poolId, uint256 amount) external override returns (uint256) {\n        IVampireAdapter adapter = IVampireAdapter(_adapter);\n        adapter.lockableToken(poolId).approve(address(ALCX_STAKINGPOOLS), uint256(-1));\n        ALCX_STAKINGPOOLS.deposit(poolId, amount);\n        return 0;\n    }\n\n    function withdraw(address, uint256 poolId, uint256 amount) external override returns (uint256) {\n        ALCX_STAKINGPOOLS.withdraw(poolId, amount);\n        return 0;\n    }\n\n    function claimReward(address, uint256, uint256 victimPoolId) external override {\n        ALCX_STAKINGPOOLS.claim(victimPoolId);\n    }\n\n    function emergencyWithdraw(address, uint256) external pure override {\n        require(false, \"not implemented\");\n    }\n\n    // Service methods\n    function poolAddress(uint256) external pure override returns (address) {\n        return address(ALCX_STAKINGPOOLS);\n    }\n\n    function rewardToWethPool() external pure override returns (address) {\n        return address(ALCX_WETH_PAIR);\n    }\n\n    function lockedValue(address, uint256) external pure override returns (uint256) {\n        require(false, \"not implemented\");\n        return 0;\n    }\n\n    function totalLockedValue(uint256) external pure override returns (uint256) {\n        require(false, \"not implemented\");\n        return 0;\n    }\n\n    function normalizedAPY(uint256) external pure override returns (uint256) {\n        require(false, \"not implemented\");\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}"
    },
    "contracts/interfaces/IUniswapV2Router02.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\nimport './IUniswapV2Router01.sol';\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}"
    },
    "contracts/libraries/UniswapV2Library.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\n\nimport \"../interfaces/IUniswapV2Pair.sol\";\nimport \"./SafeMath.sol\";\n\nlibrary UniswapV2Library {\n    using SafeMathUniswap for uint;\n\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n    }\n\n    // calculates the CREATE2 address for a pair without making any external calls\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\n        pair = address(uint(keccak256(abi.encodePacked(\n                hex'ff',\n                factory,\n                keccak256(abi.encodePacked(token0, token1)),\n                hex'e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303' // init code hash\n            ))));\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n        (address token0,) = sortTokens(tokenA, tokenB);\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        amountB = amountA.mul(reserveB) / reserveA;\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint amountInWithFee = amountIn.mul(997);\n        uint numerator = amountInWithFee.mul(reserveOut);\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\n        uint denominator = reserveOut.sub(amountOut).mul(997);\n        amountIn = (numerator / denominator).add(1);\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[0] = amountIn;\n        for (uint i; i < path.length - 1; i++) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[amounts.length - 1] = amountOut;\n        for (uint i = path.length - 1; i > 0; i--) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}\n"
    },
    "contracts/BaseAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./interfaces/IUniswapV2Factory.sol\";\nimport \"./libraries/UniswapV2Library.sol\";\nimport \"./IVampireAdapter.sol\";\n\nabstract contract BaseAdapter is IVampireAdapter {\n    using SafeMath for uint256;\n\n    IERC20 immutable weth;\n    IUniswapV2Factory immutable factory;\n\n    constructor(address _weth, address _factory) {\n        weth = IERC20(_weth);\n        factory = IUniswapV2Factory(_factory);\n    }\n\n    /**\n     * @notice Calculates the WETH value of an LP token\n     */\n    function lpTokenValue(uint256 amount, IUniswapV2Pair lpToken) public virtual override view returns(uint256) {\n        (uint256 token0Reserve, uint256 token1Reserve,) = lpToken.getReserves();\n        address token0 = lpToken.token0();\n        address token1 = lpToken.token1();\n        if (token0 == address(weth)) {\n            return amount.mul(token0Reserve).mul(2).div(lpToken.totalSupply());\n        }\n\n        if (token1 == address(weth)) {\n            return amount.mul(token1Reserve).mul(2).div(lpToken.totalSupply());\n        }\n\n        if (IUniswapV2Factory(lpToken.factory()).getPair(token0, address(weth)) != address(0)) {\n            (uint256 wethReserve0, uint256 token0ToWethReserve0) = UniswapV2Library.getReserves(lpToken.factory(), address(weth), token0);\n            uint256 tmp0 = amount.mul(token0Reserve).mul(wethReserve0).mul(2);\n            return tmp0.div(token0ToWethReserve0).div(lpToken.totalSupply());\n        }\n\n        require(\n            IUniswapV2Factory(lpToken.factory()).getPair(token1, address(weth)) != address(0),\n            \"Neither token0-weth nor token1-weth pair exists\");\n        (uint256 wethReserve1, uint256 token1ToWethReserve1) = UniswapV2Library.getReserves(lpToken.factory(), address(weth), token1);\n        uint256 tmp1 = amount.mul(token1Reserve).mul(wethReserve1).mul(2);\n        return tmp1.div(token1ToWethReserve1).div(lpToken.totalSupply());\n    }\n\n    /**\n     * @notice Calculates the WETH value for an amount of pool reward token\n     */\n    function rewardValue(uint256 poolId, uint256 amount) external virtual override view returns(uint256) {\n        address token = address(rewardToken(poolId));\n\n        IUniswapV2Pair pair = IUniswapV2Pair(factory.getPair(address(token), address(weth)));\n        if (address(pair) != address(0)) {\n                (uint tokenReserve0, uint wethReserve0,) = pair.getReserves();\n                return UniswapV2Library.getAmountOut(amount, tokenReserve0, wethReserve0);\n        }\n\n        pair = IUniswapV2Pair(factory.getPair(address(weth), address(token)));\n        require(\n            address(pair) != address(0),\n            \"Neither token-weth nor weth-token pair exists\");\n        (uint wethReserve1, uint tokenReserve1,) = pair.getReserves();\n        return UniswapV2Library.getAmountOut(amount, tokenReserve1, wethReserve1);\n    }\n\n    function rewardToken(uint256) public virtual override view returns (IERC20) {\n        return IERC20(0);\n    }\n}\n"
    },
    "contracts/adapters/alchemix/IStakingPools.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IStakingPools {\n    function poolCount() external view returns (uint256);\n    function getPoolToken(uint256 _poolId) external view returns (IERC20);\n    function getStakeTotalDeposited(address _account, uint256 _poolId) external view returns (uint256);\n    function getStakeTotalUnclaimed(address _account, uint256 _poolId) external view returns (uint256);\n    function deposit(uint256 _poolId, uint256 _depositAmount) external;\n    function withdraw(uint256 _poolId, uint256 _withdrawAmount) external;\n    function claim(uint256 _poolId) external;\n}\n"
    },
    "contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}"
    },
    "contracts/libraries/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\n\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\n\nlibrary SafeMathUniswap {\n    function add(uint x, uint y) internal pure returns (uint z) {\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\n    }\n\n    function sub(uint x, uint y) internal pure returns (uint z) {\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n    }\n\n    function mul(uint x, uint y) internal pure returns (uint z) {\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
    },
    "contracts/IVampireAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./interfaces/IUniswapV2Pair.sol\";\n\ninterface IVampireAdapter {\n    // Victim info\n    function rewardToken(uint256 poolId) external view returns (IERC20);\n    function rewardValue(uint256 poolId, uint256 amount) external view returns(uint256);\n    function poolCount() external view returns (uint256);\n    function sellableRewardAmount(uint256 poolId) external view returns (uint256);\n\n    // Victim actions, requires impersonation via delegatecall\n    function sellRewardForWeth(address adapter, uint256 poolId, uint256 rewardAmount, address to) external returns(uint256);\n\n    // Pool info\n    function lockableToken(uint256 poolId) external view returns (IERC20);\n    function lockedAmount(address user, uint256 poolId) external view returns (uint256);\n    function pendingReward(address adapter, uint256 poolId, uint256 victimPoolId) external view returns (uint256);\n\n    // Pool actions, requires impersonation via delegatecall\n    function deposit(address adapter, uint256 poolId, uint256 amount) external returns (uint256);\n    function withdraw(address adapter, uint256 poolId, uint256 amount) external returns (uint256);\n    function claimReward(address adapter, uint256 poolId, uint256 victimPoolId) external;\n\n    function emergencyWithdraw(address adapter, uint256 poolId) external;\n\n    // Service methods\n    function poolAddress(uint256 poolId) external view returns (address);\n    function rewardToWethPool() external view returns (address);\n\n    // Governance info methods\n    function lpTokenValue(uint256 amount, IUniswapV2Pair lpToken) external view returns(uint256);\n    function lockedValue(address user, uint256 poolId) external view returns (uint256);\n    function totalLockedValue(uint256 poolId) external view returns (uint256);\n    function normalizedAPY(uint256 poolId) external view returns (uint256);\n}\n"
    },
    "contracts/test/MockYearnV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\n\ncontract MockYearnV2 is ERC20 {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    IERC20 public underlying;\n\n    constructor(string memory name, string memory symbol, IERC20 _underlying) ERC20(name, symbol) {\n        underlying = _underlying;\n    }\n\n    function balance() public view returns (uint256) {\n        return underlying.balanceOf(address(this));\n    }\n\n    function pricePerShare() public view returns (uint256) {\n        uint256 supply = totalSupply();\n        if (supply == 0) {\n            return 0;\n        }\n        return balance().mul(1e18).div(supply);\n    }\n\n    function deposit() external returns (uint256) {\n        uint256 _balance = underlying.balanceOf(msg.sender);\n        return deposit(_balance);\n    }\n\n    function deposit(uint256 _amount) public returns (uint256) {\n        uint256 underlyingTotal = balance();\n        uint256 _before = balance();\n        underlying.safeTransferFrom(msg.sender, address(this), _amount);\n        uint256 _after = balance();\n        _amount = _after.sub(_before);\n        uint256 shares;\n        if (totalSupply() == 0) {\n            shares = _amount;\n        } else {\n            shares = (_amount.mul(totalSupply())).div(underlyingTotal);\n        }\n        _mint(msg.sender, shares);\n        return shares;\n    }\n\n    function withdraw() external {\n        withdraw(balanceOf(msg.sender));\n    }\n\n    function withdraw(uint256 _amount) public {\n        uint256 ret = (balance().mul(_amount)).div(totalSupply());\n        _burn(msg.sender, _amount);\n        underlying.safeTransfer(msg.sender, ret);\n    }\n\n    function token() external view returns (address) {\n        return address(underlying);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n     * a default value of 18.\n     *\n     * To select a different value for {decimals}, use {_setupDecimals}.\n     *\n     * All three of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n     * called.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Sets {decimals} to a value other than the default one of 18.\n     *\n     * WARNING: This function should only be called from the constructor. Most\n     * applications that interact with token contracts will not expect\n     * {decimals} to ever change, and may work incorrectly if it does.\n     */\n    function _setupDecimals(uint8 decimals_) internal virtual {\n        _decimals = decimals_;\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/test/MockRariFundManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"../interfaces/IRariFundManager.sol\";\nimport \"./MockERC20.sol\";\n\ncontract MockRariFundManager is IRariFundManager {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    MockERC20 public immutable reptToken;\n    mapping(address => uint256) public balances;\n\n    constructor () {\n        reptToken = new MockERC20(\"RARI ETH\", \"REPT\", 18);\n    }\n\n    receive() external payable {\n        _deposit(msg.value);\n    }\n\n    function rariFundToken() external view override returns (IERC20) {\n        return IERC20(address(reptToken));\n    }\n\n    function getFundBalance() external view override returns (uint256) {\n        return address(this).balance;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return balances[account];\n    }\n\n    function balance() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    function deposit() external override payable {\n        _deposit(msg.value);\n    }\n\n    function withdraw(uint256 _amount) external override returns (bool) {\n        _withdraw(_amount);\n        return true;\n    }\n\n    function _deposit(uint256 _ethAmount) internal {\n        uint256 totalETH = balance();\n        uint256 totalShares = reptToken.totalSupply();\n        uint256 shares = 0;\n        if (totalShares == 0 || totalETH == 0) {\n            shares = _ethAmount;\n        } else {\n            // Note: input amount of eth is subtracted from total ETH because by the time\n            // we hit this statement, totalETH already includes ethAmount and would skew the\n            // calculation of shares.\n            shares = _ethAmount.mul(totalShares).div(totalETH.sub(_ethAmount));\n        }\n\n        balances[msg.sender] = balances[msg.sender].add(_ethAmount);\n        reptToken.mint(msg.sender, shares);\n    }\n\n    function _withdraw(uint256 _ethAmount) internal {\n        uint256 totalETH = balance();\n        uint256 totalShares = reptToken.totalSupply();\n        uint256 reptAmount = _ethAmount.mul(totalShares).div(totalETH);\n        reptToken.burnFrom(msg.sender, reptAmount);\n        balances[msg.sender] = balances[msg.sender].sub(_ethAmount);\n        msg.sender.transfer(_ethAmount);\n    }\n}\n"
    },
    "contracts/interfaces/IRariFundManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IRariFundManager {\n    function deposit() external payable;\n    function withdraw(uint256 amount) external returns (bool);\n    function rariFundToken() external view returns (IERC20);\n    function balanceOf(address account) external returns (uint256);\n    function getFundBalance() external returns (uint256);\n}"
    },
    "contracts/test/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\ncontract MockERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    address private _owner;\n\n    uint internal _totalSupply;\n\n    mapping(address => uint)                   private _balance;\n    mapping(address => mapping(address => uint)) private _allowance;\n\n    modifier _onlyOwner_() {\n        require(msg.sender == _owner, \"ERR_NOT_OWNER\");\n        _;\n    }\n\n    event Approval(address indexed src, address indexed dst, uint amt);\n    event Transfer(address indexed src, address indexed dst, uint amt);\n\n    // Math\n    function add(uint a, uint b) internal pure returns (uint c) {\n        require((c = a + b) >= a);\n    }\n\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require((c = a - b) <= a);\n    }\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_\n    ) {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = decimals_;\n        _owner = msg.sender;\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function _move(address src, address dst, uint amt) internal {\n        require(_balance[src] >= amt, \"!bal\");\n        _balance[src] = sub(_balance[src], amt);\n        _balance[dst] = add(_balance[dst], amt);\n        emit Transfer(src, dst, amt);\n    }\n\n    function _push(address to, uint amt) internal {\n        _move(address(this), to, amt);\n    }\n\n    function _pull(address from, uint amt) internal {\n        _move(from, address(this), amt);\n    }\n\n    function _mint(address dst, uint amt) internal {\n        _balance[dst] = add(_balance[dst], amt);\n        _totalSupply = add(_totalSupply, amt);\n        emit Transfer(address(0), dst, amt);\n    }\n\n    function _burn(address dst, uint amt) internal {\n        _balance[dst] = sub(_balance[dst], amt);\n        _totalSupply = sub(_totalSupply, amt);\n        emit Transfer(dst, address(0), amt);\n    }\n\n    function allowance(address src, address dst) external view returns (uint) {\n        return _allowance[src][dst];\n    }\n\n    function balanceOf(address whom) public view returns (uint) {\n        return _balance[whom];\n    }\n\n    function faucet(uint256 amt) public returns (bool) {\n        _mint(msg.sender, amt);\n        return true;\n    }\n\n    function totalSupply() public view returns (uint) {\n        return _totalSupply;\n    }\n\n    function approve(address dst, uint amt) external returns (bool) {\n        _allowance[msg.sender][dst] = amt;\n        emit Approval(msg.sender, dst, amt);\n        return true;\n    }\n\n    function mint(address dst, uint256 amt) public _onlyOwner_ returns (bool) {\n        _mint(dst, amt);\n        return true;\n    }\n\n    function burn(uint amt) public returns (bool) {\n        require(_balance[msg.sender] >= amt, \"!bal\");\n        _burn(msg.sender, amt);\n        return true;\n    }\n\n    function burnFrom(address src, uint amt) public _onlyOwner_ returns (bool) {\n        require(_balance[src] >= amt, \"!bal\");\n        _burn(src, amt);\n        return true;\n    }\n\n    function transfer(address dst, uint amt) external returns (bool) {\n        _move(msg.sender, dst, amt);\n        return true;\n    }\n\n    function transferFrom(address src, address dst, uint amt) external returns (bool) {\n        require(msg.sender == src || amt <= _allowance[src][msg.sender], \"!spender\");\n        _move(src, dst, amt);\n        if (msg.sender != src && _allowance[src][msg.sender] != uint256(- 1)) {\n            _allowance[src][msg.sender] = sub(_allowance[src][msg.sender], amt);\n            emit Approval(msg.sender, dst, _allowance[src][msg.sender]);\n        }\n        return true;\n    }\n\n    function transferOwnership(address newOwner) external _onlyOwner_ {\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/test/MockMasterChef.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./MockERC20.sol\";\n\n// MockMasterChef is the master of mocks.\ncontract MockMasterChef is Ownable, ReentrancyGuard {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount;     // How many LP tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n    }\n\n    // Info of each pool.\n    struct PoolInfo {\n        IERC20 lpToken;           // Address of LP token contract.\n        uint256 allocPoint;       // How many allocation points assigned to this pool. Mock to distribute per block.\n        uint256 lastRewardBlock;  // Last block number that Mock distribution occurs.\n        uint256 accMockPerShare; // Accumulated Mock per share, times 1e12. See below.\n    }\n\n    // The TOKEN\n    MockERC20 public token;\n    // Reward updater\n    address public rewardUpdater;\n    // Block number when bonus Mock period ends.\n    uint256 public bonusEndBlock;\n    // Mock tokens created per block.\n    uint256 public tokenPerBlock;\n    // Bonus muliplier for early token makers.\n    uint256 public constant BONUS_MULTIPLIER = 1;\n\n    // Info of each pool.\n    PoolInfo[] public poolInfo;\n    // Info of each user that stakes LP tokens.\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\n    // Total allocation points. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint;\n    // The block number when Mock mining starts.\n    uint256 public startBlock;\n\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event Claimed(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n\n    modifier onlyRewardUpdater() {\n        require(rewardUpdater == _msgSender(), \"not reward updater\");\n        _;\n    }\n\n    constructor(\n        MockERC20 token_,\n        uint256 tokenPerBlock_,\n        uint256 startBlock_,\n        uint256 bonusEndBlock_\n    ) {\n        token = token_;\n        rewardUpdater = _msgSender();\n        tokenPerBlock = tokenPerBlock_;\n        bonusEndBlock = bonusEndBlock_;\n        startBlock = startBlock_;\n    }\n\n    /// Return the number of pools\n    function poolLength() external view returns (uint256) {\n        return poolInfo.length;\n    }\n\n    /**\n     * @notice Sets the reward updater address\n     * @param rewardUpdaterAddress_ address where rewards are sent\n     */\n    function setRewardUpdater(address rewardUpdaterAddress_) external onlyRewardUpdater {\n        rewardUpdater = rewardUpdaterAddress_;\n    }\n\n    /**\n     * @notice Sets the rewards per block\n     * @param rewardPerBlock amount of rewards minted per block\n     */\n    function setRewardPerBlock(uint256 rewardPerBlock) external onlyRewardUpdater {\n        massUpdatePools();\n        tokenPerBlock = rewardPerBlock;\n    }\n\n    function add(uint256 allocPoint, IERC20 lpToken) external onlyOwner {\n        massUpdatePools();\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\n        totalAllocPoint = totalAllocPoint.add(allocPoint);\n        poolInfo.push(PoolInfo({\n            lpToken: lpToken,\n            allocPoint: allocPoint,\n            lastRewardBlock: lastRewardBlock,\n            accMockPerShare: 0\n        }));\n    }\n\n    function set(uint256 pid, uint256 allocPoint) external onlyOwner {\n        massUpdatePools();\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[pid].allocPoint).add(allocPoint);\n        poolInfo[pid].allocPoint = allocPoint;\n    }\n\n    function getMultiplier(uint256 from, uint256 to) public view returns (uint256) {\n        if (to <= bonusEndBlock) {\n            return to.sub(from).mul(BONUS_MULTIPLIER);\n        } else if (from >= bonusEndBlock) {\n            return to.sub(from);\n        } else {\n            return bonusEndBlock.sub(from).mul(BONUS_MULTIPLIER).add(\n                to.sub(bonusEndBlock)\n            );\n        }\n    }\n\n    function pendingMock(uint256 pid, address user_) external view returns (uint256) {\n        PoolInfo storage pool = poolInfo[pid];\n        UserInfo storage user = userInfo[pid][user_];\n        uint256 accMockPerShare = pool.accMockPerShare;\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n            uint256 tokenReward = multiplier.mul(tokenPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n            accMockPerShare = accMockPerShare.add(tokenReward.mul(1e12).div(lpSupply));\n        }\n        return user.amount.mul(accMockPerShare).div(1e12).sub(user.rewardDebt);\n    }\n\n    /// Update reward variables for all pools. Be careful of gas spending!\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    function updatePool(uint256 pid) public {\n        PoolInfo storage pool = poolInfo[pid];\n        if (block.number <= pool.lastRewardBlock) {\n            return;\n        }\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n        if (lpSupply == 0) {\n            pool.lastRewardBlock = block.number;\n            return;\n        }\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n        uint256 tokenReward = multiplier.mul(tokenPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n        token.mint(address(this), tokenReward);\n        pool.accMockPerShare = pool.accMockPerShare.add(tokenReward.mul(1e12).div(lpSupply));\n        pool.lastRewardBlock = block.number;\n    }\n\n    function deposit(uint256 pid, uint256 amount) external {\n        PoolInfo storage pool = poolInfo[pid];\n        UserInfo storage user = userInfo[pid][msg.sender];\n        updatePool(pid);\n        if (user.amount > 0) {\n            _claim(pid);\n        }\n        if (amount > 0) {\n            pool.lpToken.safeTransferFrom(msg.sender, address(this), amount);\n            user.amount = user.amount.add(amount);\n        }\n        user.rewardDebt = user.amount.mul(pool.accMockPerShare).div(1e12);\n        emit Deposit(msg.sender, pid, amount);\n    }\n\n    function withdraw(uint256 pid, uint256 amount) external nonReentrant {\n        PoolInfo storage pool = poolInfo[pid];\n        UserInfo storage user = userInfo[pid][msg.sender];\n        require(user.amount >= amount, \"withdraw: not good\");\n        updatePool(pid);\n        _claim(pid);\n\n        if (amount > 0) {\n            user.amount = user.amount.sub(amount);\n            pool.lpToken.safeTransfer(msg.sender, amount);\n        }\n        user.rewardDebt = user.amount.mul(pool.accMockPerShare).div(1e12);\n        emit Withdraw(msg.sender, pid, amount);\n    }\n\n    function claim(uint256 pid) external nonReentrant {\n        PoolInfo storage pool = poolInfo[pid];\n        UserInfo storage user = userInfo[pid][msg.sender];\n        updatePool(pid);\n        _claim(pid);\n        user.rewardDebt = user.amount.mul(pool.accMockPerShare).div(1e12);\n    }\n\n    function emergencyWithdraw(uint256 pid) external nonReentrant {\n        PoolInfo storage pool = poolInfo[pid];\n        UserInfo storage user = userInfo[pid][msg.sender];\n        uint256 amount = user.amount;\n        user.amount = 0;\n        user.rewardDebt = 0;\n        pool.lpToken.safeTransfer(msg.sender, amount);\n        emit EmergencyWithdraw(msg.sender, pid, amount);\n    }\n\n    /// Claim rewards from pool\n    function _claim(uint256 pid) internal {\n        PoolInfo storage pool = poolInfo[pid];\n        UserInfo storage user = userInfo[pid][msg.sender];\n        uint256 pending = user.amount.mul(pool.accMockPerShare).div(1e12).sub(user.rewardDebt);\n        if (pending > 0) {\n            _safeTokenTransfer(msg.sender, pending);\n            emit Claimed(msg.sender, pid, pending);\n        }\n    }\n\n    function _safeTokenTransfer(address to, uint256 amount) internal {\n        uint256 tokenBal = token.balanceOf(address(this));\n        if (amount > tokenBal) {\n            token.transfer(to, tokenBal);\n        } else {\n            token.transfer(to, amount);\n        }\n    }\n}"
    },
    "@openzeppelin/contracts/utils/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "contracts/test/MockBadgerSett.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract MockBadgerSett is ERC20 {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n\n    IERC20 immutable public token;\n\n    constructor (\n        string memory name,\n        string memory symbol,\n        address _token\n    ) ERC20(name, symbol) {\n        token = IERC20(_token);\n    }\n\n    function getPricePerFullShare() public view virtual returns (uint256) {\n        if (totalSupply() == 0) {\n            return 1e18;\n        }\n        return balance().mul(1e18).div(totalSupply());\n    }\n\n    function balance() public view returns (uint256) {\n        return token.balanceOf(address(this));\n    }\n\n    function deposit(uint256 _amount) public {\n        _deposit(_amount);\n    }\n\n    function depositAll() external {\n        _deposit(token.balanceOf(msg.sender));\n    }\n\n    function withdraw(uint256 _shares) public {\n        _withdraw(_shares);\n    }\n\n    function withdrawAll() external {\n        _withdraw(balanceOf(msg.sender));\n    }\n\n    function _deposit(uint256 _amount) internal {\n        uint256 _pool = balance();\n        uint256 _before = token.balanceOf(address(this));\n        token.safeTransferFrom(msg.sender, address(this), _amount);\n        uint256 _after = token.balanceOf(address(this));\n        _amount = _after.sub(_before); // Additional check for deflationary tokens\n        uint256 shares = 0;\n        if (totalSupply() == 0) {\n            shares = _amount;\n        } else {\n            shares = (_amount.mul(totalSupply())).div(_pool);\n        }\n        _mint(msg.sender, shares);\n    }\n\n    function _withdraw(uint256 _shares) internal {\n        uint256 r = (balance().mul(_shares)).div(totalSupply());\n        _burn(msg.sender, _shares);\n        token.safeTransfer(msg.sender, r);\n    }\n}\n"
    },
    "contracts/Timelock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\ncontract Timelock {\n    using SafeMath for uint;\n\n    event NewAdmin(address indexed newAdmin);\n    event NewPendingAdmin(address indexed newPendingAdmin);\n    event NewDelay(uint indexed newDelay);\n    event CancelTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature,  bytes data, uint eta);\n    event ExecuteTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature,  bytes data, uint eta);\n    event QueueTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature, bytes data, uint eta);\n\n    uint public constant GRACE_PERIOD = 14 days;\n    uint public constant MINIMUM_DELAY = 6 hours;\n    uint public constant MAXIMUM_DELAY = 30 days;\n\n    address public admin;\n    address public pendingAdmin;\n    uint public delay;\n    bool public admin_initialized;\n\n    mapping (bytes32 => bool) public queuedTransactions;\n\n\n    constructor(address admin_, uint delay_) {\n        require(delay_ >= MINIMUM_DELAY, \"Timelock::constructor: Delay must exceed minimum delay.\");\n        require(delay_ <= MAXIMUM_DELAY, \"Timelock::constructor: Delay must not exceed maximum delay.\");\n\n        admin = admin_;\n        delay = delay_;\n        admin_initialized = false;\n    }\n\n    receive() external payable { }\n\n    function setDelay(uint delay_) public {\n        require(msg.sender == address(this), \"Timelock::setDelay: Call must come from Timelock.\");\n        require(delay_ >= MINIMUM_DELAY, \"Timelock::setDelay: Delay must exceed minimum delay.\");\n        require(delay_ <= MAXIMUM_DELAY, \"Timelock::setDelay: Delay must not exceed maximum delay.\");\n        delay = delay_;\n\n        emit NewDelay(delay);\n    }\n\n    function acceptAdmin() public {\n        require(msg.sender == pendingAdmin, \"Timelock::acceptAdmin: Call must come from pendingAdmin.\");\n        admin = msg.sender;\n        pendingAdmin = address(0);\n\n        emit NewAdmin(admin);\n    }\n\n    function setPendingAdmin(address pendingAdmin_) public {\n        // allows one time setting of admin for deployment purposes\n        if (admin_initialized) {\n            require(msg.sender == address(this), \"Timelock::setPendingAdmin: Call must come from Timelock.\");\n        } else {\n            require(msg.sender == admin, \"Timelock::setPendingAdmin: First call must come from admin.\");\n            admin_initialized = true;\n        }\n        pendingAdmin = pendingAdmin_;\n\n        emit NewPendingAdmin(pendingAdmin);\n    }\n\n    function queueTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public returns (bytes32) {\n        require(msg.sender == admin, \"Timelock::queueTransaction: Call must come from admin.\");\n        require(eta >= getBlockTimestamp().add(delay), \"Timelock::queueTransaction: Estimated execution block must satisfy delay.\");\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n        queuedTransactions[txHash] = true;\n\n        emit QueueTransaction(txHash, target, value, signature, data, eta);\n        return txHash;\n    }\n\n    function cancelTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public {\n        require(msg.sender == admin, \"Timelock::cancelTransaction: Call must come from admin.\");\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n        queuedTransactions[txHash] = false;\n\n        emit CancelTransaction(txHash, target, value, signature, data, eta);\n    }\n\n    function executeTransaction(address target, uint _value, string memory signature, bytes memory data, uint eta) public payable returns (bytes memory) {\n        require(msg.sender == admin, \"Timelock::executeTransaction: Call must come from admin.\");\n\n        bytes32 txHash = keccak256(abi.encode(target, _value, signature, data, eta));\n        require(queuedTransactions[txHash], \"Timelock::executeTransaction: Transaction hasn't been queued.\");\n        require(getBlockTimestamp() >= eta, \"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\");\n        require(getBlockTimestamp() <= eta.add(GRACE_PERIOD), \"Timelock::executeTransaction: Transaction is stale.\");\n\n        queuedTransactions[txHash] = false;\n\n        bytes memory callData;\n\n        if (bytes(signature).length == 0) {\n            callData = data;\n        } else {\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\n        }\n\n        // solium-disable-next-line security/no-call-value\n        (bool success, bytes memory returnData) = target.call{value:_value}(callData);\n        require(success, \"Timelock::executeTransaction: Transaction execution reverted.\");\n\n        emit ExecuteTransaction(txHash, target, _value, signature, data, eta);\n\n        return returnData;\n    }\n\n    function getBlockTimestamp() internal view returns (uint) {\n        // solium-disable-next-line security/no-block-members\n        return block.timestamp;\n    }\n}\n"
    },
    "contracts/test/MockChiToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/math/Math.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nabstract contract ERC20WithoutTotalSupply is IERC20 {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        uint256 allowed = _allowances[sender][msg.sender];\n        if ((allowed >> 255) == 0) {\n            _approve(sender, msg.sender, allowed.sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        }\n        return true;\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _approve(address owner, address spender, uint256 amount) internal {\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _mint(address account, uint256 amount) internal {\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal {\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        emit Transfer(account, address(0), amount);\n    }\n\n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        uint256 allowed = _allowances[account][msg.sender];\n        if ((allowed >> 255) == 0) {\n            _approve(account, msg.sender, allowed.sub(amount, \"ERC20: burn amount exceeds allowance\"));\n        }\n    }\n}\n\n\ncontract MockChiToken is IERC20, ERC20WithoutTotalSupply {\n    string constant public name = \"Chi Token by 1inch\";\n    string constant public symbol = \"CHI\";\n    uint8 constant public decimals = 0;\n\n    uint256 public totalMinted;\n    uint256 public totalBurned;\n\n    function totalSupply() public view override returns(uint256) {\n        return totalMinted - totalBurned;\n    }\n\n    function mint(uint256 value) public {\n        uint256 offset = totalMinted;\n        assembly {\n            mstore(0, 0x746d4946c0e9F43F4Dee607b0eF1fA1c3318585733ff6000526015600bf30000)\n\n            for {let i := div(value, 32)} i {i := sub(i, 1)} {\n                pop(create2(0, 0, 30, add(offset, 0))) pop(create2(0, 0, 30, add(offset, 1)))\n                pop(create2(0, 0, 30, add(offset, 2))) pop(create2(0, 0, 30, add(offset, 3)))\n                pop(create2(0, 0, 30, add(offset, 4))) pop(create2(0, 0, 30, add(offset, 5)))\n                pop(create2(0, 0, 30, add(offset, 6))) pop(create2(0, 0, 30, add(offset, 7)))\n                pop(create2(0, 0, 30, add(offset, 8))) pop(create2(0, 0, 30, add(offset, 9)))\n                pop(create2(0, 0, 30, add(offset, 10))) pop(create2(0, 0, 30, add(offset, 11)))\n                pop(create2(0, 0, 30, add(offset, 12))) pop(create2(0, 0, 30, add(offset, 13)))\n                pop(create2(0, 0, 30, add(offset, 14))) pop(create2(0, 0, 30, add(offset, 15)))\n                pop(create2(0, 0, 30, add(offset, 16))) pop(create2(0, 0, 30, add(offset, 17)))\n                pop(create2(0, 0, 30, add(offset, 18))) pop(create2(0, 0, 30, add(offset, 19)))\n                pop(create2(0, 0, 30, add(offset, 20))) pop(create2(0, 0, 30, add(offset, 21)))\n                pop(create2(0, 0, 30, add(offset, 22))) pop(create2(0, 0, 30, add(offset, 23)))\n                pop(create2(0, 0, 30, add(offset, 24))) pop(create2(0, 0, 30, add(offset, 25)))\n                pop(create2(0, 0, 30, add(offset, 26))) pop(create2(0, 0, 30, add(offset, 27)))\n                pop(create2(0, 0, 30, add(offset, 28))) pop(create2(0, 0, 30, add(offset, 29)))\n                pop(create2(0, 0, 30, add(offset, 30))) pop(create2(0, 0, 30, add(offset, 31)))\n                offset := add(offset, 32)\n            }\n\n            for {let i := and(value, 0x1F)} i {i := sub(i, 1)} {\n                pop(create2(0, 0, 30, offset))\n                offset := add(offset, 1)\n            }\n        }\n\n        _mint(msg.sender, value);\n        totalMinted = offset;\n    }\n\n    function computeAddress2(uint256 salt) public pure returns (address child) {\n        assembly {\n            let data := mload(0x40)\n            mstore(data, 0xff0000000000004946c0e9F43F4Dee607b0eF1fA1c0000000000000000000000)\n            mstore(add(data, 21), salt)\n            mstore(add(data, 53), 0x3c1644c68e5d6cb380c36d1bf847fdbc0c7ac28030025a2fc5e63cce23c16348)\n            child := and(keccak256(data, 85), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n        }\n    }\n\n    function _destroyChildren(uint256 value) internal {\n        assembly {\n            let i := sload(totalBurned.slot)\n            let end := add(i, value)\n            sstore(totalBurned.slot, end)\n\n            let data := mload(0x40)\n            mstore(data, 0xff0000000000004946c0e9F43F4Dee607b0eF1fA1c0000000000000000000000)\n            mstore(add(data, 53), 0x3c1644c68e5d6cb380c36d1bf847fdbc0c7ac28030025a2fc5e63cce23c16348)\n            let ptr := add(data, 21)\n            for { } lt(i, end) { i := add(i, 1) } {\n                mstore(ptr, i)\n                pop(call(gas(), keccak256(data, 85), 0, 0, 0, 0, 0))\n            }\n        }\n    }\n\n    function free(uint256 value) public returns (uint256)  {\n        if (value > 0) {\n            _burn(msg.sender, value);\n            _destroyChildren(value);\n        }\n        return value;\n    }\n\n    function freeUpTo(uint256 value) public returns (uint256) {\n        return free(Math.min(value, balanceOf(msg.sender)));\n    }\n\n    function freeFrom(address from, uint256 value) public returns (uint256) {\n        if (value > 0) {\n            _burnFrom(from, value);\n            _destroyChildren(value);\n        }\n        return value;\n    }\n\n    function freeFromUpTo(address from, uint256 value) public returns (uint256) {\n        return freeFrom(from, Math.min(Math.min(value, balanceOf(from)), allowance(from, msg.sender)));\n    }\n}"
    },
    "@openzeppelin/contracts/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n"
    },
    "contracts/MasterVampire.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.7.6;\r\n\r\nimport \"@openzeppelin/contracts/math/Math.sol\";\r\nimport \"./IMasterVampire.sol\";\r\nimport \"./IIBVEth.sol\";\r\n\r\ncontract MasterVampire is IMasterVampire, ChiGasSaver {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for IERC20;\r\n    using VampireAdapter for Victim;\r\n    //     (_                   _)\r\n    //      /\\                 /\\\r\n    //     / \\'._   (\\_/)   _.'/ \\\r\n    //    /_.''._'--('.')--'_.''._\\\r\n    //    | \\_ / `;=/ \" \\=;` \\ _/ |\r\n    //     \\/ `\\__|`\\___/`|__/`  \\/\r\n    //   jgs`      \\(/|\\)/       `\r\n    //              \" ` \"\r\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event RewardClaimed(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\r\n    event ETHValue(uint256 amount);\r\n    event DrainedReward(uint256 indexed pid, uint256 amount);\r\n\r\n    IWETH immutable weth;\r\n\r\n    modifier onlyDev() {\r\n        require(devAddress == msg.sender, \"not dev\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyRewardUpdater() {\r\n        require(poolRewardUpdater == msg.sender, \"not reward updater\");\r\n        _;\r\n    }\r\n\r\n    modifier updateReward(uint256 _pid, address _user) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        pool.accWethPerShare = wethPerShare(_pid);\r\n        pool.lastUpdateBlock = lastTimeRewardApplicable(_pid);\r\n        if (_user != address(0)) {\r\n            UserInfo storage user = userInfo[_pid][_user];\r\n            user.rewards = pendingWeth(_pid, _user);\r\n            user.rewardDebt = pool.accWethPerShare;\r\n        }\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address _drainAddress,\r\n        address _drainController,\r\n        address _IBVETH,\r\n        address _weth\r\n    ) {\r\n        drainAddress = _drainAddress;\r\n        drainController = _drainController;\r\n        devAddress = msg.sender;\r\n        poolRewardUpdater = msg.sender;\r\n        IBVETH = _IBVETH;\r\n        weth = IWETH(_weth);\r\n    }\r\n\r\n    /**\r\n     * @notice Allow depositing ether to the contract\r\n     */\r\n    receive() external payable {}\r\n\r\n    function poolLength() external view returns (uint256) {\r\n        return poolInfo.length;\r\n    }\r\n\r\n    function add(Victim _victim, uint256 _victimPoolId) external onlyOwner {\r\n        poolInfo.push(PoolInfo({\r\n            victim: _victim,\r\n            victimPoolId: _victimPoolId,\r\n            lastUpdateBlock: 0,\r\n            accWethPerShare: 0,\r\n            wethAccumulator: 0,\r\n            rewardRate: 0,\r\n            periodFinish: 0,\r\n            basePoolShares: 0,\r\n            baseDeposits: 0\r\n        }));\r\n    }\r\n\r\n    // Add multiple pools for one victim\r\n    function addBulk(Victim _victim, uint256[] memory victimPids) external onlyOwner {\r\n        for (uint i = 0; i < victimPids.length; i++) {\r\n            poolInfo.push(PoolInfo({\r\n                victim: _victim,\r\n                victimPoolId: victimPids[i],\r\n                lastUpdateBlock: 0,\r\n                accWethPerShare: 0,\r\n                wethAccumulator: 0,\r\n                rewardRate: 0,\r\n                periodFinish: 0,\r\n                basePoolShares: 0,\r\n                baseDeposits: 0\r\n            }));\r\n        }\r\n    }\r\n\r\n    function updateDistributionPeriod(uint256 _distributionPeriod) external onlyRewardUpdater {\r\n        distributionPeriod = _distributionPeriod;\r\n    }\r\n\r\n    function updateVictimAddress(uint256 _pid, address _victim) external onlyOwner {\r\n        poolInfo[_pid].victim = Victim(_victim);\r\n    }\r\n\r\n    function updateVictimAddressBulk(uint256[] memory pids, address _victim) public onlyRewardUpdater {\r\n        for (uint i = 0; i < pids.length; i++) {\r\n            uint256 pid = pids[i];\r\n            poolInfo[pid].victim = Victim(_victim);\r\n        }\r\n    }\r\n\r\n    function updateVictimInfo(uint256 _pid, address _victim, uint256 _victimPoolId) external onlyOwner {\r\n        poolInfo[_pid].victim = Victim(_victim);\r\n        poolInfo[_pid].victimPoolId = _victimPoolId;\r\n    }\r\n\r\n    function updatePoolDrain(uint256 _wethDrainModifier) external onlyOwner {\r\n        wethDrainModifier = _wethDrainModifier;\r\n    }\r\n\r\n    function updateDevAddress(address _devAddress) external onlyDev {\r\n        devAddress = _devAddress;\r\n    }\r\n\r\n    function updateDrainAddress(address _drainAddress) external onlyOwner {\r\n        drainAddress = _drainAddress;\r\n    }\r\n\r\n    function updateIBEthStrategy(address _ibveth) external onlyOwner {\r\n        IBVETH = _ibveth;\r\n        (bool success,) = address(IBVETH).delegatecall(abi.encodeWithSignature(\"migrate()\"));\r\n        require(success, \"migrate() delegatecall failed.\");\r\n    }\r\n\r\n    function updateDrainController(address _drainController) external onlyOwner {\r\n        drainController = _drainController;\r\n    }\r\n\r\n    function updateRewardUpdaterAddress(address _poolRewardUpdater) external onlyOwner {\r\n        poolRewardUpdater = _poolRewardUpdater;\r\n    }\r\n\r\n    function lastTimeRewardApplicable(uint256 _pid) public view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        return Math.min(block.number, pool.periodFinish);\r\n    }\r\n\r\n    // WETH reward per staked share\r\n    function wethPerShare(uint256 _pid) public view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        uint256 totalStaked = pool.victim.lockedAmount(pool.victimPoolId);\r\n        if (totalStaked == 0) {\r\n            return pool.accWethPerShare;\r\n        }\r\n        return\r\n            pool.accWethPerShare.add(\r\n                lastTimeRewardApplicable(_pid)\r\n                    .sub(pool.lastUpdateBlock)\r\n                    .mul(pool.rewardRate)\r\n                    .mul(1e18)\r\n                    .div(totalStaked)\r\n            );\r\n    }\r\n\r\n    // Total rewards to distribute for the duration\r\n    function rewardForDuration(uint256 _pid) external view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[_pid];\r\n        return pool.rewardRate.mul(distributionPeriod);\r\n    }\r\n\r\n    // Returns the interest-bearing ETH value\r\n    function pendingWeth(uint256 _pid, address _user) public view returns (uint256) {\r\n        UserInfo storage user = userInfo[_pid][_user];\r\n        return\r\n            user.amount\r\n                .mul(wethPerShare(_pid).sub(user.rewardDebt))\r\n                .div(1e18)\r\n                .add(user.rewards);\r\n    }\r\n\r\n    // Returns the actual WETH value (interest-bearing ETH converted)\r\n    function pendingWethReal(uint256 _pid, address _user) external returns (uint256) {\r\n        uint256 ibETH = pendingWeth(_pid, _user);\r\n        uint256 ethVal = IIBVEth(IBVETH).ibETHValue(ibETH);\r\n        emit ETHValue(ethVal);\r\n        return ethVal;\r\n    }\r\n\r\n    // Returns the underlying pending rewards for a victim\r\n    function pendingVictimReward(uint256 pid) external view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[pid];\r\n        return pool.victim.pendingReward(pid, pool.victimPoolId);\r\n    }\r\n\r\n    // Returns the current drained/accumulated rewards for a pool\r\n    function poolAccWeth(uint256 pid) external view returns (uint256) {\r\n        PoolInfo storage pool = poolInfo[pid];\r\n        return pool.wethAccumulator;\r\n    }\r\n\r\n    function deposit(uint256 pid, uint256 amount) external nonReentrant updateReward(pid, msg.sender) {\r\n        require(amount > 0, \"Cannot deposit 0\");\r\n        PoolInfo storage pool = poolInfo[pid];\r\n        UserInfo storage user = userInfo[pid][msg.sender];\r\n\r\n        pool.victim.lockableToken(pool.victimPoolId).safeTransferFrom(address(msg.sender), address(this), amount);\r\n        uint256 shares = pool.victim.deposit(pool.victimPoolId, amount);\r\n        if (shares > 0) {\r\n            pool.basePoolShares = pool.basePoolShares.add(shares);\r\n            pool.baseDeposits = pool.baseDeposits.add(amount);\r\n            user.poolShares = user.poolShares.add(shares);\r\n        }\r\n        user.amount = user.amount.add(amount);\r\n        emit Deposit(msg.sender, pid, amount);\r\n    }\r\n\r\n    function withdraw(uint256 pid, uint256 amount, uint256 tipAmount, uint8 flag) external payable nonReentrant updateReward(pid, msg.sender) {\r\n        PoolInfo storage pool = poolInfo[pid];\r\n        UserInfo storage user = userInfo[pid][msg.sender];\r\n        require(amount > 0 && user.amount >= amount, \"withdraw: not good\");\r\n\r\n        user.amount = user.amount.sub(amount);\r\n        uint256 shares = pool.victim.withdraw(pool.victimPoolId, amount);\r\n        if (shares > 0) {\r\n            pool.basePoolShares = pool.basePoolShares.sub(shares);\r\n            pool.baseDeposits = pool.baseDeposits.sub(amount);\r\n            user.poolShares = user.poolShares.sub(shares);\r\n        }\r\n        pool.victim.lockableToken(pool.victimPoolId).safeTransfer(address(msg.sender), amount);\r\n        _claim(pid, tipAmount, flag);\r\n        emit Withdraw(msg.sender, pid, amount);\r\n    }\r\n\r\n    function claim(uint256 pid, uint256 tipAmount, uint8 flag) external payable nonReentrant updateReward(pid, msg.sender) {\r\n        _claim(pid, tipAmount, flag);\r\n    }\r\n\r\n    // Withdraw in case of emergency. No rewards will be claimed.\r\n    function emergencyWithdraw(uint256 pid) external nonReentrant {\r\n        PoolInfo storage pool = poolInfo[pid];\r\n        UserInfo storage user = userInfo[pid][msg.sender];\r\n        pool.victim.withdraw(pool.victimPoolId, user.amount);\r\n        pool.victim.lockableToken(pool.victimPoolId).safeTransfer(address(msg.sender), user.amount);\r\n        emit EmergencyWithdraw(msg.sender, pid, user.amount);\r\n        user.amount = 0;\r\n        user.rewards = 0;\r\n        user.rewardDebt = 0;\r\n        user.poolShares = 0;\r\n    }\r\n\r\n    /// Can only be called by DrainController\r\n    function drain(uint256 pid) external updateReward(pid, address(0)) {\r\n        require(drainController == msg.sender, \"not drainctrl\");\r\n        PoolInfo storage pool = poolInfo[pid];\r\n        Victim victim = pool.victim;\r\n        uint256 victimPoolId = pool.victimPoolId;\r\n        victim.claimReward(pid, victimPoolId);\r\n        IERC20 rewardToken = victim.rewardToken(pid);\r\n        uint256 claimedReward = rewardToken.balanceOf(address(this));\r\n\r\n        if (claimedReward == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 wethReward = victim.sellRewardForWeth(pid, claimedReward, address(this));\r\n\r\n        // Take a % of the drained reward to be redistributed to other contracts\r\n        uint256 wethDrainAmount = wethReward.mul(wethDrainModifier).div(1000);\r\n        if (wethDrainAmount > 0) {\r\n            weth.transfer(drainAddress, wethDrainAmount);\r\n            wethReward = wethReward.sub(wethDrainAmount);\r\n        }\r\n\r\n        // Remainder of rewards go to users of the drained pool as interest-bearing ETH\r\n        uint256 ibethBefore = IIBVEth(IBVETH).balance(address(this));\r\n        (bool success,) = IBVETH.delegatecall(abi.encodeWithSignature(\"handleDrainedWETH(uint256)\", wethReward));\r\n        require(success, \"handleDrainedWETH(uint256 amount) delegatecall failed.\");\r\n        uint256 ibethAfter = IIBVEth(IBVETH).balance(address(this));\r\n        uint256 newRewards = ibethAfter.sub(ibethBefore);\r\n        pool.wethAccumulator = pool.wethAccumulator.add(newRewards);\r\n\r\n        if (block.number >= pool.periodFinish) {\r\n            pool.rewardRate = newRewards.div(distributionPeriod);\r\n        } else {\r\n            uint256 remaining = pool.periodFinish.sub(block.number);\r\n            uint256 leftover = remaining.mul(pool.rewardRate);\r\n            pool.rewardRate = newRewards.add(leftover).div(distributionPeriod);\r\n        }\r\n\r\n        pool.lastUpdateBlock = block.number;\r\n        pool.periodFinish = block.number.add(distributionPeriod);\r\n        emit DrainedReward(pid, newRewards);\r\n    }\r\n\r\n    /// This function allows owner to take unsupported tokens out of the contract.\r\n    /// It also allows for removal of airdropped tokens.\r\n    function recoverUnsupported(IERC20 token, uint256 amount, address to) external onlyOwner {\r\n        uint256 length = poolInfo.length;\r\n        for (uint256 pid = 0; pid < length; ++pid) {\r\n            PoolInfo storage pool = poolInfo[pid];\r\n            IERC20 lpToken = pool.victim.lockableToken(pool.victimPoolId);\r\n            // cant take staked asset\r\n            require(token != lpToken, \"!pool.lpToken\");\r\n        }\r\n        // transfer to\r\n        token.safeTransfer(to, amount);\r\n    }\r\n\r\n    /// Claim rewards from pool\r\n    function _claim(uint256 pid, uint256 tipAmount, uint8 flag) internal {\r\n        PoolInfo storage pool = poolInfo[pid];\r\n        UserInfo storage user = userInfo[pid][msg.sender];\r\n        uint256 pending = user.rewards;\r\n        if (pending > 0) {\r\n            user.rewards = 0;\r\n            uint256 poolBalance = pool.wethAccumulator;\r\n            if (poolBalance < pending) {\r\n                pending = poolBalance; // Prevents contract from locking up\r\n            }\r\n            (bool success,) = address(IBVETH).delegatecall(abi.encodeWithSignature(\"handleClaim(uint256,uint256,uint8)\", pending, tipAmount, flag));\r\n            require(success, \"handleClaim(uint256 pending, uint256 tipAmount, uint8 flag) delegatecall failed.\");\r\n            emit RewardClaimed(msg.sender, pid, pending);\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/IMasterVampire.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"./VampireAdapter.sol\";\nimport \"./ChiGasSaver.sol\";\n\n/**\n* @title Interface for MV and adapters that follows the `Inherited Storage` pattern\n* This allows adapters to add storage variables locally without causing collisions.\n* Adapters simply need to inherit this interface so that new variables are appended.\n*/\nabstract contract IMasterVampire is Ownable, ReentrancyGuard {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using VampireAdapter for Victim;\n\n    struct UserInfo {\n        uint256 amount;\n        uint256 rewards;\n        uint256 rewardDebt;\n        uint256 poolShares;\n    }\n\n    struct PoolInfo {\n        Victim victim;\n        uint256 victimPoolId;\n        uint256 lastUpdateBlock;\n        uint256 accWethPerShare;\n        uint256 wethAccumulator;\n        uint256 rewardRate;\n        uint256 periodFinish;\n        // Base amount of shares from user deposits for victims that return shares for the pool.\n        uint256 basePoolShares;\n        uint256 baseDeposits;\n    }\n\n    address public IBVETH;\n\n    address public drainController;\n    address public drainAddress;\n    address public poolRewardUpdater;\n    address public devAddress;\n    uint256 public distributionPeriod = 6519; // Blocks in 24 hour period\n    uint256 public wethDrainModifier = 150;\n\n    // Info of each pool\n    PoolInfo[] public poolInfo;\n    // Info of each user that stakes LP tokens\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\n}\n"
    },
    "contracts/IIBVEth.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./interfaces/IWETH.sol\";\n\n/**\n* @title Interface for interest bearing ETH strategies\n*/\nabstract contract IIBVEth  {\n\n    IWETH immutable WETH;\n\n    constructor(address weth) {\n        WETH = IWETH(weth);\n    }\n\n    function handleDrainedWETH(uint256 amount) external virtual;\n    function handleClaim(uint256 pending, uint256 tipAmount, uint8 flag) external payable virtual;\n    function migrate() external virtual;\n    function ibToken() external view virtual returns(IERC20);\n    function balance(address account) external view virtual returns(uint256);\n    function ethBalance(address account) external virtual returns(uint256);\n    function ibETHValue(uint256 amount) external virtual returns (uint256);\n\n    function _safeETHTransfer(address payable to, uint256 amount) internal virtual {\n        uint256 _balance = address(this).balance;\n        if (amount > _balance) {\n            to.transfer(_balance);\n        } else {\n            to.transfer(amount);\n        }\n    }\n}\n"
    },
    "contracts/VampireAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract Victim {}\n\nlibrary VampireAdapter {\n    // Victim info\n    function rewardToken(Victim victim, uint256 poolId) external view returns (IERC20) {\n        (bool success, bytes memory result) = address(victim).staticcall(abi.encodeWithSignature(\"rewardToken(uint256)\", poolId));\n        require(success, \"rewardToken(uint256) staticcall failed.\");\n        return abi.decode(result, (IERC20));\n    }\n\n    function rewardValue(Victim victim, uint256 poolId, uint256 amount) external view returns (uint256) {\n        (bool success, bytes memory result) = address(victim).staticcall(abi.encodeWithSignature(\"rewardValue(uint256,uint256)\", poolId, amount));\n        require(success, \"rewardValue(uint256,uint256) staticcall failed.\");\n        return abi.decode(result, (uint256));\n    }\n\n    function poolCount(Victim victim) external view returns (uint256) {\n        (bool success, bytes memory result) = address(victim).staticcall(abi.encodeWithSignature(\"poolCount()\"));\n        require(success, \"poolCount() staticcall failed.\");\n        return abi.decode(result, (uint256));\n    }\n\n    function sellableRewardAmount(Victim victim, uint256 poolId) external view returns (uint256) {\n        (bool success, bytes memory result) = address(victim).staticcall(abi.encodeWithSignature(\"sellableRewardAmount(uint256)\", poolId));\n        require(success, \"sellableRewardAmount(uint256) staticcall failed.\");\n        return abi.decode(result, (uint256));\n    }\n\n    // Victim actions\n    function sellRewardForWeth(Victim victim, uint256 poolId, uint256 rewardAmount, address to) external returns(uint256) {\n        (bool success, bytes memory result) = address(victim).delegatecall(abi.encodeWithSignature(\"sellRewardForWeth(address,uint256,uint256,address)\", address(victim), poolId, rewardAmount, to));\n        require(success, \"sellRewardForWeth(uint256,address) delegatecall failed.\");\n        return abi.decode(result, (uint256));\n    }\n\n    // Pool info\n    function lockableToken(Victim victim, uint256 poolId) external view returns (IERC20) {\n        (bool success, bytes memory result) = address(victim).staticcall(abi.encodeWithSignature(\"lockableToken(uint256)\", poolId));\n        require(success, \"lockableToken(uint256) staticcall failed.\");\n        return abi.decode(result, (IERC20));\n    }\n\n    function lockedAmount(Victim victim, uint256 poolId) external view returns (uint256) {\n        // note the impersonation\n        (bool success, bytes memory result) = address(victim).staticcall(abi.encodeWithSignature(\"lockedAmount(address,uint256)\", address(this), poolId));\n        require(success, \"lockedAmount(uint256) staticcall failed.\");\n        return abi.decode(result, (uint256));\n    }\n\n    function pendingReward(Victim victim, uint256 poolId, uint256 victimPoolId) external view returns (uint256) {\n        // note the impersonation\n        (bool success, bytes memory result) = address(victim).staticcall(abi.encodeWithSignature(\"pendingReward(address,uint256,uint256)\", address(victim), poolId, victimPoolId));\n        require(success, \"pendingReward(address,uint256,uint256) staticcall failed.\");\n        return abi.decode(result, (uint256));\n    }\n\n    // Pool actions\n    function deposit(Victim victim, uint256 poolId, uint256 amount) external returns (uint256) {\n        (bool success, bytes memory result) = address(victim).delegatecall(abi.encodeWithSignature(\"deposit(address,uint256,uint256)\", address(victim), poolId, amount));\n        require(success, \"deposit(uint256,uint256) delegatecall failed.\");\n        return abi.decode(result, (uint256));\n    }\n\n    function withdraw(Victim victim, uint256 poolId, uint256 amount) external returns (uint256) {\n        (bool success, bytes memory result) = address(victim).delegatecall(abi.encodeWithSignature(\"withdraw(address,uint256,uint256)\", address(victim), poolId, amount));\n        require(success, \"withdraw(uint256,uint256) delegatecall failed.\");\n        return abi.decode(result, (uint256));\n    }\n\n    function claimReward(Victim victim, uint256 poolId, uint256 victimPoolId) external {\n        (bool success,) = address(victim).delegatecall(abi.encodeWithSignature(\"claimReward(address,uint256,uint256)\", address(victim), poolId, victimPoolId));\n        require(success, \"claimReward(uint256,uint256) delegatecall failed.\");\n    }\n\n    function emergencyWithdraw(Victim victim, uint256 poolId) external {\n        (bool success,) = address(victim).delegatecall(abi.encodeWithSignature(\"emergencyWithdraw(address,uint256)\", address(victim), poolId));\n        require(success, \"emergencyWithdraw(uint256) delegatecall failed.\");\n    }\n\n    // Service methods\n    function poolAddress(Victim victim, uint256 poolId) external view returns (address) {\n        (bool success, bytes memory result) = address(victim).staticcall(abi.encodeWithSignature(\"poolAddress(uint256)\", poolId));\n        require(success, \"poolAddress(uint256) staticcall failed.\");\n        return abi.decode(result, (address));\n    }\n\n    function rewardToWethPool(Victim victim) external view returns (address) {\n        (bool success, bytes memory result) = address(victim).staticcall(abi.encodeWithSignature(\"rewardToWethPool()\"));\n        require(success, \"rewardToWethPool() staticcall failed.\");\n        return abi.decode(result, (address));\n    }\n}"
    },
    "contracts/ChiGasSaver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\n\nimport \"./interfaces/IChiToken.sol\";\n\n/**\n* @title Inheritable contract to enable optional gas savings on functions via a modifier\n*/\nabstract contract ChiGasSaver {\n\n    modifier saveGas(uint8 flag) {\n        if ((flag & 0x1) == 0) {\n            _;\n        } else {\n            uint256 gasStart = gasleft();\n            _;\n            uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\n\n            IChiToken chi = IChiToken(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\n            chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41947);\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IChiToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IChiToken is IERC20 {\n    function mint(uint256 value) external;\n    function freeFromUpTo(address from, uint256 value) external returns(uint256 freed);\n}"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.5.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IWETH is IERC20 {\n    function deposit() external payable;\n    function withdraw(uint) external;\n}"
    },
    "contracts/strategies/YearnV2WETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\n\nimport \"../interfaces/IYearnV2.sol\";\nimport \"../interfaces/IWETH.sol\";\nimport \"../interfaces/IUniswapV2Pair.sol\";\nimport \"../interfaces/IUniswapV2Factory.sol\";\nimport \"../libraries/UniswapV2Library.sol\";\nimport \"../IMasterVampire.sol\";\nimport \"../IIBVEth.sol\";\n\n/**\n* @title YearnV2 WETH Vault\n*/\ncontract YearnV2WETH is IIBVEth, IMasterVampire {\n    using SafeMath for uint256;\n    using SafeERC20 for IWETH;\n\n    IYearnV2Vault private immutable vault;\n    IUniswapV2Pair private immutable drcWethPair;\n    IERC20 private immutable dracula;\n\n    constructor(\n        address _dracula,\n        address _weth,\n        address _swapFactory,\n        address _yvToken)\n        IIBVEth(_weth)\n    {\n        dracula = IERC20(_dracula);\n        IUniswapV2Factory swapFactory = IUniswapV2Factory(_swapFactory);\n        drcWethPair = IUniswapV2Pair(swapFactory.getPair(_weth, _dracula));\n        vault = IYearnV2Vault(_yvToken);\n    }\n\n    function handleDrainedWETH(uint256 amount) external override {\n        WETH.safeApprove(address(vault), amount);\n        vault.deposit(amount);\n    }\n\n    function handleClaim(uint256 pendingShares, uint256 tipAmount, uint8 flag) external payable override {\n        uint256 _wethBefore = WETH.balanceOf(address(this));\n        vault.withdraw(pendingShares);\n        uint256 _wethAfter = WETH.balanceOf(address(this));\n        // Ensure withdrawn amount is not slightly off the calculated pending value\n        uint256 pendingWETH = _wethAfter.sub(_wethBefore);\n\n        if ((flag & 0x2) == 0) {\n            WETH.safeTransfer(msg.sender, pendingWETH);\n        } else {\n            address token0 = drcWethPair.token0();\n            (uint reserve0, uint reserve1,) = drcWethPair.getReserves();\n            (uint reserveInput, uint reserveOutput) = address(WETH) == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n            uint amountOutput = UniswapV2Library.getAmountOut(pendingWETH, reserveInput, reserveOutput);\n            (uint amount0Out, uint amount1Out) = address(WETH) == token0 ? (uint(0), amountOutput) : (amountOutput, uint(0));\n\n            WETH.transfer(address(drcWethPair), pendingWETH);\n            drcWethPair.swap(amount0Out, amount1Out, msg.sender, new bytes(0));\n            // Tip the Archer miners\n            if (tipAmount > 0) {\n                block.coinbase.call{value: tipAmount}(\"\");\n            }\n        }\n    }\n\n    function migrate() external pure override {\n        require(false, \"not implemented\");\n    }\n\n    function ibToken() external view override returns(IERC20) {\n        return vault;\n    }\n\n    function balance(address account) external view override returns(uint256) {\n        return vault.balanceOf(account);\n    }\n\n    function ethBalance(address account) external override returns(uint256) {\n        uint256 totalShares = vault.balanceOf(account);\n        return totalShares.mul(1e18).div(vault.pricePerShare());\n    }\n\n    function ibETHValue(uint256 shares) public override returns (uint256) {\n        return shares.mul(1e18).div(vault.pricePerShare());\n    }\n}\n"
    },
    "contracts/interfaces/IYearnV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IYearnV2Vault is IERC20 {\n    function deposit(uint256 amount) external returns (uint256);\n    function deposit() external returns (uint256);\n    function withdraw(uint256 shares) external;\n    function withdraw() external;\n    function pricePerShare() external view returns (uint256);\n    function token() external view returns (address);\n}\n"
    },
    "contracts/strategies/IBVEthRari.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\n\nimport \"../interfaces/IRariFundManager.sol\";\nimport \"../interfaces/IWETH.sol\";\nimport \"../interfaces/IUniswapV2Pair.sol\";\nimport \"../interfaces/IUniswapV2Factory.sol\";\nimport \"../libraries/UniswapV2Library.sol\";\nimport \"../IMasterVampire.sol\";\nimport \"../IIBVEth.sol\";\n\n/**\n* @title Rari Capital ETH Strategy\n*/\ncontract IBVEthRari is IIBVEth, IMasterVampire {\n    using SafeMath for uint256;\n\n    IRariFundManager private immutable fundManager;\n    IUniswapV2Pair private immutable drcWethPair;\n    IERC20 private immutable dracula;\n\n    constructor(\n        address _dracula,\n        address _weth,\n        address _swapFactory,\n        address _fundManager)\n        IIBVEth(_weth)\n    {\n        dracula = IERC20(_dracula);\n        IUniswapV2Factory uniswapFactory = IUniswapV2Factory(_swapFactory);\n        drcWethPair = IUniswapV2Pair(uniswapFactory.getPair(_weth, _dracula));\n        fundManager = IRariFundManager(_fundManager);\n    }\n\n    function handleDrainedWETH(uint256 amount) external override {\n        WETH.withdraw(amount);\n        fundManager.deposit{value: amount}();\n    }\n\n    function handleClaim(uint256 pending, uint256 tipAmount, uint8 flag) external payable override {\n        // Convert REPT into ETH for withdrawal\n        pending = ibETHValue(pending);\n        uint256 _before = address(this).balance;\n        fundManager.withdraw(pending);\n        uint256 _after = address(this).balance;\n        // Ensure withdrawn amount is not slightly off the calculated pending value\n        pending = _after.sub(_before);\n\n        if ((flag & 0x2) == 0) {\n            _safeETHTransfer(msg.sender, pending);\n        } else {\n            WETH.deposit{value: pending}();\n            address token0 = drcWethPair.token0();\n            (uint reserve0, uint reserve1,) = drcWethPair.getReserves();\n            (uint reserveInput, uint reserveOutput) = address(WETH) == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n            uint amountOutput = UniswapV2Library.getAmountOut(pending, reserveInput, reserveOutput);\n            (uint amount0Out, uint amount1Out) = address(WETH) == token0 ? (uint(0), amountOutput) : (amountOutput, uint(0));\n\n            WETH.transfer(address(drcWethPair), pending);\n            drcWethPair.swap(amount0Out, amount1Out, address(this), new bytes(0));\n            dracula.transfer(msg.sender, amountOutput);\n        }\n    }\n\n    function migrate() external pure override {\n        require(false, \"not implemented\");\n    }\n\n    function ibToken() external view override returns(IERC20) {\n        return fundManager.rariFundToken();\n    }\n\n    function balance(address account) external view override returns(uint256) {\n        return fundManager.rariFundToken().balanceOf(account);\n    }\n\n    function ethBalance(address account) external override returns(uint256) {\n        return fundManager.balanceOf(account);\n    }\n\n    function ibETHValue(uint256 amount) public override returns (uint256) {\n        IERC20 rariFundToken = fundManager.rariFundToken();\n        uint256 reptTotalSupply = rariFundToken.totalSupply();\n        if (reptTotalSupply == 0) {\n            return 0;\n        }\n        uint256 fundBalance = fundManager.getFundBalance();\n        uint256 accountBalance = amount.mul(fundBalance).div(reptTotalSupply);\n        return accountBalance;\n    }\n}\n"
    },
    "contracts/test/MockArcherSwapRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\npragma abicoder v2;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"../interfaces/IUniswapV2Pair.sol\";\nimport \"../libraries/UniswapV2Library.sol\";\nimport \"./MockUniswapRouter.sol\";\n\nimport \"hardhat/console.sol\";\n\ncontract MockArcherSwapRouter is MockUniswapRouter {\n\n    /// @notice Trade details\n    struct Trade {\n        uint amountIn;\n        uint amountOut;\n        address[] path;\n        address payable to;\n        uint256 deadline;\n    }\n\n    constructor(address _factory) MockUniswapRouter(_factory) {\n    }\n\n    /**\n     * @notice Swap tokens for tokens and pay % of tokens as tip\n     * @param trade Trade details\n     */\n    function swapExactTokensForTokensWithTipPct(\n        address /*router*/,\n        Trade calldata trade,\n        address[] calldata /*pathToEth*/,\n        uint256 /*minEth*/,\n        uint32 /*tipPct*/\n    ) external payable {\n        swapExactTokensForTokens(trade.amountIn, trade.amountOut, trade.path, trade.to, trade.deadline);\n    }\n\n    /**\n     * @notice Swap tokens for tokens and pay ETH amount as tip\n     * @param router Uniswap V2-compliant Router contract\n     * @param trade Trade details\n     */\n    function swapExactTokensForTokensWithTipAmount(\n        address router,\n        Trade calldata trade\n    ) external payable {\n        require(msg.value > 0, \"tip amount must be > 0\");\n        swapExactTokensForTokens(trade.amountIn, trade.amountOut, trade.path, trade.to, trade.deadline);\n    }\n}"
    },
    "contracts/test/MockUniswapRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"../interfaces/IUniswapV2Pair.sol\";\nimport \"../libraries/UniswapV2Library.sol\";\nimport \"./MockUniswapFactory.sol\";\n\ninterface IUniswapRouter {\n    function factory() external view returns (address);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n\n    function getAmountsOut(uint amountIn, address[] memory path)\n        external\n        view\n        returns (uint[] memory amounts);\n}\n\ncontract MockUniswapRouter is IUniswapRouter {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    address public immutable override factory;\n\n    constructor(address _factory) {\n        factory = _factory;\n    }\n\n    function getPair(address token0, address token1) internal view returns (IUniswapV2Pair) {\n        return IUniswapV2Pair(IUniswapV2Factory(factory).getPair(token0, token1));\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'MockUniswapRouter::transferFrom: transferFrom failed'\n        );\n    }\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256\n    ) public override returns (uint256[] memory amounts) {\n        amounts = getAmountsOut(amountIn, path);\n        require(amounts[amounts.length - 1] >= amountOutMin, 'MockUniswapRouter: INSUFFICIENT_OUTPUT_AMOUNT');\n        safeTransferFrom(\n            path[0], msg.sender, address(getPair(path[0], path[1])), amounts[0]\n        );\n        _swap(amounts, path, to);\n    }\n\n    function _swap(uint[] memory amounts, address[] memory path, address _to) internal {\n        for (uint i; i < path.length - 1; i++) {\n            (address input, address output) = (path[i], path[i + 1]);\n            (address token0,) = sortTokens(input, output);\n            uint amountOut = amounts[i + 1];\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\n            address to = i < path.length - 2 ? address(getPair(output, path[i + 2])) : _to;\n            getPair(input, output).swap(\n                amount0Out, amount1Out, to, new bytes(0)\n            );\n        }\n    }\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint,\n        uint,\n        address to,\n        uint\n    ) external override returns (uint amountA, uint amountB, uint liquidity) {\n        address pair = IUniswapV2Factory(factory).getPair(tokenA, tokenB);\n        if (pair == address(0)) {\n            pair = IUniswapV2Factory(factory).createPair(tokenA, tokenB);\n        }\n        amountA = (amountADesired < amountBDesired) ? amountADesired : amountBDesired;\n        amountB = amountA;\n        require(pair != address(0), \"pair doesn't exist\");\n        IERC20(tokenA).safeTransferFrom(msg.sender, pair, amountA);\n        IERC20(tokenB).safeTransferFrom(msg.sender, pair, amountB);\n        liquidity = IUniswapV2Pair(pair).mint(to);\n    }\n\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n        require(tokenA != tokenB, 'MockUniswapRouter: IDENTICAL_ADDRESSES');\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'MockUniswapRouter: ZERO_ADDRESS');\n    }\n\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n        (address token0,) = sortTokens(tokenA, tokenB);\n        (uint reserve0, uint reserve1,) = getPair(tokenA, tokenB).getReserves();\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n    }\n\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n        require(amountIn > 0, 'MockUniswapRouter: INSUFFICIENT_INPUT_AMOUNT');\n        require(reserveIn > 0 && reserveOut > 0, 'MockUniswapRouter: INSUFFICIENT_LIQUIDITY');\n        uint amountInWithFee = amountIn.mul(997);\n        uint numerator = amountInWithFee.mul(reserveOut);\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n        amountOut = numerator / denominator;\n    }\n\n    function getAmountsOut(uint amountIn, address[] memory path)\n        public\n        view\n        virtual\n        override\n        returns (uint[] memory amounts)\n    {\n        require(path.length >= 2, 'MockUniswapRouter: INVALID_PATH');\n        amounts = new uint[](path.length);\n        amounts[0] = amountIn;\n        for (uint i; i < path.length - 1; i++) {\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "contracts/test/MockUniswapFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\n\nimport \"../interfaces/IUniswapV2Factory.sol\";\nimport \"./MockUniswapV2Pair.sol\";\n\ncontract MockUniswapFactory is IUniswapV2Factory {\n    address public override feeTo;\n    address public override feeToSetter;\n\n    mapping(address => mapping(address => address)) public override getPair;\n    address[] public override allPairs;\n\n    constructor(address _feeToSetter) {\n        feeToSetter = _feeToSetter;\n    }\n\n    function allPairsLength() external override view returns (uint) {\n        return allPairs.length;\n    }\n\n    function createPair(address tokenA, address tokenB) external override returns (address pair) {\n        require(tokenA != tokenB, 'UniswapV2: IDENTICAL_ADDRESSES');\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        require(token0 != address(0), 'UniswapV2: ZERO_ADDRESS');\n        require(getPair[token0][token1] == address(0), 'UniswapV2: PAIR_EXISTS'); // single check is sufficient\n        bytes memory bytecode = type(MockUniswapV2Pair).creationCode;\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\n        assembly {\n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\n        }\n        IUniswapV2Pair(pair).initialize(token0, token1);\n        getPair[token0][token1] = pair;\n        getPair[token1][token0] = pair; // populate mapping in the reverse direction\n        allPairs.push(pair);\n        emit PairCreated(token0, token1, pair, allPairs.length);\n    }\n\n    function setFeeTo(address _feeTo) external override {\n        require(msg.sender == feeToSetter, 'UniswapV2: FORBIDDEN');\n        feeTo = _feeTo;\n    }\n\n    function setFeeToSetter(address _feeToSetter) external override {\n        require(msg.sender == feeToSetter, 'UniswapV2: FORBIDDEN');\n        feeToSetter = _feeToSetter;\n    }\n}"
    },
    "contracts/test/MockUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"../libraries/UniswapMath.sol\";\nimport \"../libraries/UQ112x112.sol\";\nimport \"../interfaces/IUniswapV2Pair.sol\";\nimport \"../interfaces/IUniswapV2Factory.sol\";\n\ncontract MockUniswapV2Pair is IUniswapV2Pair {\n    using SafeMath  for uint;\n    using UQ112x112 for uint224;\n\n    uint public override constant MINIMUM_LIQUIDITY = 10**3;\n    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\n\n    address public override factory;\n    address public override token0;\n    address public override token1;\n\n    uint112 private reserve0;           // uses single storage slot, accessible via getReserves\n    uint112 private reserve1;           // uses single storage slot, accessible via getReserves\n    uint32  private blockTimestampLast; // uses single storage slot, accessible via getReserves\n\n    uint public override price0CumulativeLast;\n    uint public override price1CumulativeLast;\n    uint public override kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\n\n    uint private unlocked = 1;\n    modifier lock() {\n        require(unlocked == 1, 'UniswapV2: LOCKED');\n        unlocked = 0;\n        _;\n        unlocked = 1;\n    }\n\n    string public override constant name = 'Uniswap V2';\n    string public override constant symbol = 'UNI-V2';\n    uint8 public override constant decimals = 18;\n    uint  public override totalSupply;\n    mapping(address => uint) public override balanceOf;\n    mapping(address => mapping(address => uint)) public override allowance;\n\n    bytes32 public override DOMAIN_SEPARATOR;\n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    bytes32 public override constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n    mapping(address => uint) public override nonces;\n\n\n    constructor() {\n        factory = msg.sender;\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\n                keccak256(bytes(name)),\n                keccak256(bytes('1')),\n                chainId,\n                address(this)\n            )\n        );\n    }\n\n    function _mint(address to, uint value) internal {\n        totalSupply = totalSupply.add(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(address(0), to, value);\n    }\n\n    function _burn(address from, uint value) internal {\n        balanceOf[from] = balanceOf[from].sub(value);\n        totalSupply = totalSupply.sub(value);\n        emit Transfer(from, address(0), value);\n    }\n\n    function _approve(address owner, address spender, uint value) private {\n        allowance[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    function _transfer(address from, address to, uint value) private {\n        balanceOf[from] = balanceOf[from].sub(value);\n        balanceOf[to] = balanceOf[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    function approve(address spender, uint value) external override returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    function transfer(address to, uint value) external override returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint value) external override returns (bool) {\n        if (allowance[from][msg.sender] != uint(-1)) {\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n        }\n        _transfer(from, to, value);\n        return true;\n    }\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external override {\n        require(deadline >= block.timestamp, 'UniswapV2: EXPIRED');\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                '\\x19\\x01',\n                DOMAIN_SEPARATOR,\n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n            )\n        );\n        address recoveredAddress = ecrecover(digest, v, r, s);\n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'UniswapV2: INVALID_SIGNATURE');\n        _approve(owner, spender, value);\n    }\n\n    function getReserves() public override view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast) {\n        _reserve0 = reserve0;\n        _reserve1 = reserve1;\n        _blockTimestampLast = blockTimestampLast;\n    }\n\n    function _safeTransfer(address token, address to, uint value) private {\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(SELECTOR, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'UniswapV2: TRANSFER_FAILED');\n    }\n\n    // called once by the factory at time of deployment\n    function initialize(address _token0, address _token1) external override {\n        require(msg.sender == factory, 'UniswapV2: FORBIDDEN'); // sufficient check\n        token0 = _token0;\n        token1 = _token1;\n    }\n\n    // update reserves and, on the first call per block, price accumulators\n    function _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\n        require(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'UniswapV2: OVERFLOW');\n        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\n            // * never overflows, and + overflow is desired\n            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\n            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\n        }\n        reserve0 = uint112(balance0);\n        reserve1 = uint112(balance1);\n        blockTimestampLast = blockTimestamp;\n        emit Sync(reserve0, reserve1);\n    }\n\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\n    function _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\n        address feeTo = IUniswapV2Factory(factory).feeTo();\n        feeOn = feeTo != address(0);\n        uint _kLast = kLast; // gas savings\n        if (feeOn) {\n            if (_kLast != 0) {\n                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));\n                uint rootKLast = Math.sqrt(_kLast);\n                if (rootK > rootKLast) {\n                    uint numerator = totalSupply.mul(rootK.sub(rootKLast));\n                    uint denominator = rootK.mul(5).add(rootKLast);\n                    uint liquidity = numerator / denominator;\n                    if (liquidity > 0) _mint(feeTo, liquidity);\n                }\n            }\n        } else if (_kLast != 0) {\n            kLast = 0;\n        }\n    }\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function mint(address to) external override lock returns (uint liquidity) {\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n        uint balance0 = IERC20(token0).balanceOf(address(this));\n        uint balance1 = IERC20(token1).balanceOf(address(this));\n        uint amount0 = balance0.sub(_reserve0);\n        uint amount1 = balance1.sub(_reserve1);\n\n        bool feeOn = _mintFee(_reserve0, _reserve1);\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n        if (_totalSupply == 0) {\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\n           _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\n        } else {\n            liquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _reserve1);\n        }\n        require(liquidity > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED');\n        _mint(to, liquidity);\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\n        emit Mint(msg.sender, amount0, amount1);\n    }\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function burn(address to) external override lock returns (uint amount0, uint amount1) {\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n        address _token0 = token0;                                // gas savings\n        address _token1 = token1;                                // gas savings\n        uint balance0 = IERC20(_token0).balanceOf(address(this));\n        uint balance1 = IERC20(_token1).balanceOf(address(this));\n        uint liquidity = balanceOf[address(this)];\n\n        bool feeOn = _mintFee(_reserve0, _reserve1);\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\n        require(amount0 > 0 && amount1 > 0, 'UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED');\n        _burn(address(this), liquidity);\n        _safeTransfer(_token0, to, amount0);\n        _safeTransfer(_token1, to, amount1);\n        balance0 = IERC20(_token0).balanceOf(address(this));\n        balance1 = IERC20(_token1).balanceOf(address(this));\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\n        emit Burn(msg.sender, amount0, amount1, to);\n    }\n\n    // this low-level function should be called from a contract which performs important safety checks\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata) external override lock {\n        require(amount0Out > 0 || amount1Out > 0, 'UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT');\n        (uint112 _reserve0, uint112 _reserve1,) = getReserves(); // gas savings\n        require(amount0Out < _reserve0 && amount1Out < _reserve1, 'UniswapV2: INSUFFICIENT_LIQUIDITY');\n\n        uint balance0;\n        uint balance1;\n        { // scope for _token{0,1}, avoids stack too deep errors\n        address _token0 = token0;\n        address _token1 = token1;\n        require(to != _token0 && to != _token1, 'UniswapV2: INVALID_TO');\n        if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\n        if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\n        //if (data.length > 0) IUniswapV2Callee(to).uniswapV2Call(msg.sender, amount0Out, amount1Out, data);\n        balance0 = IERC20(_token0).balanceOf(address(this));\n        balance1 = IERC20(_token1).balanceOf(address(this));\n        }\n        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\n        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\n        require(amount0In > 0 || amount1In > 0, 'UniswapV2: INSUFFICIENT_INPUT_AMOUNT');\n        { // scope for reserve{0,1}Adjusted, avoids stack too deep errors\n        uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\n        uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\n        require(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2), 'UniswapV2: K');\n        }\n\n        _update(balance0, balance1, _reserve0, _reserve1);\n        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\n    }\n\n    // force balances to match reserves\n    function skim(address to) external override lock {\n        address _token0 = token0; // gas savings\n        address _token1 = token1; // gas savings\n        _safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\n        _safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\n    }\n\n    // force reserves to match balances\n    function sync() external override lock {\n        _update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), reserve0, reserve1);\n    }\n}"
    },
    "contracts/libraries/UniswapMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\n\n// a library for performing various math operations\n\nlibrary Math {\n    function min(uint x, uint y) internal pure returns (uint z) {\n        z = x < y ? x : y;\n    }\n\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    function sqrt(uint y) internal pure returns (uint z) {\n        if (y > 3) {\n            z = y;\n            uint x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n}"
    },
    "contracts/libraries/UQ112x112.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\n\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n\n// range: [0, 2**112 - 1]\n// resolution: 1 / 2**112\n\nlibrary UQ112x112 {\n    uint224 constant Q112 = 2**112;\n\n    // encode a uint112 as a UQ112x112\n    function encode(uint112 y) internal pure returns (uint224 z) {\n        z = uint224(y) * Q112; // never overflows\n    }\n\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\n        z = x / uint224(y);\n    }\n}"
    },
    "contracts/test/MockAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"../interfaces/IUniswapV2Pair.sol\";\nimport \"../libraries/UniswapV2Library.sol\";\nimport \"../BaseAdapter.sol\";\nimport \"./MockERC20.sol\";\nimport \"./IMockMasterChef.sol\";\nimport \"./MockUniswapRouter.sol\";\nimport \"./MockUniswapFactory.sol\";\n\ncontract MockAdapter is BaseAdapter {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    IUniswapV2Pair immutable rewardWethPair;\n    IERC20 immutable reward;\n    IUniswapRouter immutable router;\n\n    IMockMasterChef immutable mockChef;\n    address immutable masterVampire;\n\n    constructor(address _masterVampire, address _mockChef, address _rewardToken, address _weth, address _router, address _factory)\n        BaseAdapter(_weth, _factory)\n    {\n        masterVampire = _masterVampire;\n        mockChef = IMockMasterChef(_mockChef);\n        reward = IERC20(_rewardToken);\n        rewardWethPair = IUniswapV2Pair(MockUniswapFactory(_factory).getPair(address(_rewardToken), address(_weth)));\n        router = IUniswapRouter(_router);\n    }\n\n    // Victim info\n    function rewardToken(uint256) public view override returns (IERC20) {\n        return reward;\n    }\n\n    function poolCount() external view override returns (uint256) {\n        return mockChef.poolLength();\n    }\n\n    function sellableRewardAmount(uint256) external pure override returns (uint256) {\n        return uint256(-1);\n    }\n\n    // Victim actions, requires impersonation via delegatecall\n    function sellRewardForWeth(address, uint256, uint256 rewardAmount, address to) external override returns(uint256) {\n        reward.transfer(address(rewardWethPair), rewardAmount);\n        (uint mirReserve, uint wethReserve,) = rewardWethPair.getReserves();\n        uint amountOutput = UniswapV2Library.getAmountOut(rewardAmount, mirReserve, wethReserve);\n        rewardWethPair.swap(uint(0), amountOutput, to, new bytes(0));\n        return amountOutput;\n    }\n\n    // Pool info\n   function lockableToken(uint256 poolId) external view override returns (IERC20) {\n        (IERC20 lpToken,,,) = mockChef.poolInfo(poolId);\n        return lpToken;\n    }\n\n    function lockedAmount(address user, uint256 poolId) external view override returns (uint256) {\n        (uint256 amount,) = mockChef.userInfo(poolId, user);\n        return amount;\n    }\n\n    function pendingReward(address, uint256, uint256 victimPoolId) external view override returns (uint256) {\n        return mockChef.pendingMock(victimPoolId, masterVampire);\n    }\n\n    // Pool actions, requires impersonation via delegatecall\n    function deposit(address _adapter, uint256 poolId, uint256 amount) external override returns (uint256) {\n        IVampireAdapter adapter = IVampireAdapter(_adapter);\n        adapter.lockableToken(poolId).approve(address(mockChef), uint256(-1));\n        mockChef.deposit(poolId, amount);\n        return 0;\n    }\n\n    function withdraw(address, uint256 poolId, uint256 amount) external override returns (uint256) {\n        mockChef.withdraw(poolId, amount);\n        return 0;\n    }\n\n    function claimReward(address, uint256, uint256 victimPoolId) external override {\n        mockChef.deposit(victimPoolId, 0);\n    }\n\n    function emergencyWithdraw(address, uint256 poolId) external override {\n        mockChef.emergencyWithdraw(poolId);\n    }\n\n    // Service methods\n    function poolAddress(uint256) external view override returns (address) {\n        return address(this);\n    }\n\n    function rewardToWethPool() external view override returns (address) {\n        return address(rewardWethPair);\n    }\n\n    function lockedValue(address, uint256) external override pure returns (uint256) {\n        require(false, \"not implemented\");\n        return 0;\n    }\n\n    function totalLockedValue(uint256) external override pure returns (uint256) {\n        require(false, \"not implemented\");\n        return 0;\n    }\n\n    function normalizedAPY(uint256) external override pure returns (uint256) {\n        require(false, \"not implemented\");\n        return 0;\n    }\n}\n"
    },
    "contracts/test/IMockMasterChef.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IMockMasterChef{\n    function poolInfo(uint256) external view returns (IERC20,uint256,uint256,uint256);\n    function userInfo(uint256, address) external view returns (uint256,uint256);\n    function poolLength() external view returns (uint256);\n    function deposit(uint256 _pid, uint256 _amount) external;\n    function withdraw(uint256 _pid, uint256 _amount) external;\n    function emergencyWithdraw(uint256 _pid) external;\n    function pendingMock(uint256 _pid, address _user) external view returns (uint256);\n}\n"
    },
    "contracts/adapters/yearn/YearnV2Adapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"../../interfaces/IUniswapV2Pair.sol\";\nimport \"../../libraries/UniswapV2Library.sol\";\nimport \"../../BaseAdapter.sol\";\nimport \"../../interfaces/IYearnV2.sol\";\n\ninterface IMasterVampire {\n    function userInfo(uint256 pid, address user) external view returns (uint256 amount,\n                                                                        uint256 rewards,\n                                                                        uint256 rewardDebt,\n                                                                        uint256 poolShares);\n}\n\ncontract YearnV2Adapter is BaseAdapter {\n    using SafeMath for uint256;\n    IMasterVampire immutable MASTER_VAMPIRE;\n    IYearnV2Vault[] vaults;\n\n    constructor(address _weth, address _factory, address _masterVampire, address[] memory vaults_)\n        BaseAdapter(_weth, _factory)\n    {\n        MASTER_VAMPIRE = IMasterVampire(_masterVampire);\n        for (uint i = 0; i < vaults_.length; i++) {\n            vaults.push(IYearnV2Vault(vaults_[i]));\n        }\n    }\n\n    // Victim info\n    function rewardToken(uint256) public pure override returns (IERC20) {\n        return IERC20(0);\n    }\n\n    function poolCount() external view override returns (uint256) {\n        return vaults.length;\n    }\n\n    function sellableRewardAmount(uint256) external pure override returns (uint256) {\n        return uint256(-1);\n    }\n\n    // Victim actions, requires impersonation via delegatecall\n    function sellRewardForWeth(address, uint256, uint256, address) external pure override returns(uint256) {\n        return 0;\n    }\n\n    // Pool info\n    function lockableToken(uint256 poolId) external view override returns (IERC20) {\n        return IERC20(vaults[poolId].token());\n    }\n\n    function lockedAmount(address user, uint256 poolId) external view override returns (uint256) {\n        IYearnV2Vault vault = vaults[poolId];\n        (,,, uint256 poolShares) = MASTER_VAMPIRE.userInfo(poolId, user);\n        uint256 pricePerShare = vault.pricePerShare();\n        if (pricePerShare == 0) {\n            return 0;\n        }\n        return poolShares.mul(1e18).div(pricePerShare);\n    }\n\n    function pendingReward(address, uint256, uint256) external view override returns (uint256) {\n        return 0;\n    }\n\n    // Pool actions, requires impersonation via delegatecall\n    function deposit(address _adapter, uint256 poolId, uint256 amount) external override returns (uint256) {\n        IVampireAdapter adapter = IVampireAdapter(_adapter);\n        IYearnV2Vault vault = IYearnV2Vault(adapter.poolAddress(poolId));\n        adapter.lockableToken(poolId).approve(address(vault), uint256(-1));\n\n        uint256 _before = vault.balanceOf(address(this));\n        vault.deposit(amount);\n        uint256 _after = vault.balanceOf(address(this));\n        return _after.sub(_before);\n    }\n\n    function withdraw(address _adapter, uint256 poolId, uint256 amount) external override returns (uint256) {\n        IVampireAdapter adapter = IVampireAdapter(_adapter);\n        IYearnV2Vault vault = IYearnV2Vault(adapter.poolAddress(poolId));\n        vault.withdraw(amount);\n        return 0;\n    }\n\n    function claimReward(address, uint256, uint256 victimPoolId) external override {\n       // not implemented for vaults\n    }\n\n    function emergencyWithdraw(address, uint256) external pure override {\n        require(false, \"not implemented\");\n    }\n\n    // Service methods\n    function poolAddress(uint256 poolId) external view override returns (address) {\n        return address(vaults[poolId]);\n    }\n\n    function rewardToWethPool() external pure override returns (address) {\n        return address(0);\n    }\n\n    function lockedValue(address, uint256) external override pure returns (uint256) {\n        require(false, \"not implemented\");\n        return 0;\n    }\n\n    function totalLockedValue(uint256) external override pure returns (uint256) {\n        require(false, \"not implemented\");\n        return 0;\n    }\n\n    function normalizedAPY(uint256) external override pure returns (uint256) {\n        require(false, \"not implemented\");\n        return 0;\n    }\n}\n"
    },
    "contracts/adapters/yaxis/YAxisAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../../interfaces/IUniswapV2Pair.sol\";\nimport \"../../libraries/UniswapV2Library.sol\";\nimport \"../../BaseAdapter.sol\";\nimport \"./IYAxisMaster.sol\";\n\ncontract YAxisAdapter is BaseAdapter {\n    address immutable MASTER_VAMPIRE;\n    IYAxisMaster constant YAXIS_MASTER = IYAxisMaster(0xC330E7e73717cd13fb6bA068Ee871584Cf8A194F);\n    IERC20 constant YAX = IERC20(0xb1dC9124c395c1e97773ab855d66E879f053A289);\n    IUniswapV2Pair constant YAX_WETH_PAIR = IUniswapV2Pair(0x1107B6081231d7F256269aD014bF92E041cb08df);\n    // token 0 - YAX\n    // token 1 - WETH\n\n    constructor(address _weth, address _factory, address _masterVampire)\n        BaseAdapter(_weth, _factory)\n    {\n        MASTER_VAMPIRE = _masterVampire;\n    }\n\n    // Victim info\n    function rewardToken(uint256) public pure override returns (IERC20) {\n        return YAX;\n    }\n\n    function poolCount() external view override returns (uint256) {\n        return YAXIS_MASTER.poolLength();\n    }\n\n    function sellableRewardAmount(uint256) external pure override returns (uint256) {\n        return uint256(-1);\n    }\n\n    // Victim actions, requires impersonation via delegatecall\n    function sellRewardForWeth(address, uint256, uint256 rewardAmount, address to) external override returns(uint256) {\n        YAX.transfer(address(YAX_WETH_PAIR), rewardAmount);\n        (uint yaxisReserve, uint wethReserve,) = YAX_WETH_PAIR.getReserves();\n        uint amountOutput = UniswapV2Library.getAmountOut(rewardAmount, yaxisReserve, wethReserve);\n        YAX_WETH_PAIR.swap(uint(0), amountOutput, to, new bytes(0));\n        return amountOutput;\n    }\n\n    // Pool info\n    function lockableToken(uint256 poolId) external view override returns (IERC20) {\n        (IERC20 lpToken,,,) = YAXIS_MASTER.poolInfo(poolId);\n        return lpToken;\n    }\n\n    function lockedAmount(address user, uint256 poolId) external view override returns (uint256) {\n        (uint256 amount,) = YAXIS_MASTER.userInfo(poolId, user);\n        return amount;\n    }\n\n    function pendingReward(address, uint256, uint256 victimPoolId) external view override returns (uint256) {\n        return YAXIS_MASTER.pendingYaxis(victimPoolId, MASTER_VAMPIRE);\n    }\n\n    // Pool actions, requires impersonation via delegatecall\n    function deposit(address _adapter, uint256 poolId, uint256 amount) external override returns (uint256) {\n        IVampireAdapter adapter = IVampireAdapter(_adapter);\n        adapter.lockableToken(poolId).approve(address(YAXIS_MASTER), uint256(-1));\n        YAXIS_MASTER.deposit(poolId, amount);\n        return 0;\n    }\n\n    function withdraw(address, uint256 poolId, uint256 amount) external override returns (uint256) {\n        YAXIS_MASTER.withdraw(poolId, amount);\n        return 0;\n    }\n\n    function claimReward(address, uint256, uint256 victimPoolId) external override {\n        YAXIS_MASTER.deposit(victimPoolId, 0);\n    }\n\n    function emergencyWithdraw(address, uint256 poolId) external override {\n        YAXIS_MASTER.emergencyWithdraw(poolId);\n    }\n\n    // Service methods\n    function poolAddress(uint256) external pure override returns (address) {\n        return address(YAXIS_MASTER);\n    }\n\n    function rewardToWethPool() external pure override returns (address) {\n        return address(YAX_WETH_PAIR);\n    }\n\n    function lockedValue(address, uint256) external override pure returns (uint256) {\n        require(false, \"not implemented\");\n        return 0;\n    }\n\n    function totalLockedValue(uint256) external override pure returns (uint256) {\n        require(false, \"not implemented\");\n        return 0;\n    }\n\n    function normalizedAPY(uint256) external override pure returns (uint256) {\n        require(false, \"not implemented\");\n        return 0;\n    }\n}\n"
    },
    "contracts/adapters/yaxis/IYAxisMaster.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IYAxisMaster {\n    function poolInfo(uint256) external view returns (IERC20,uint256,uint256,uint256);\n    function userInfo(uint256, address) external view returns (uint256,uint256);\n    function poolLength() external view returns (uint256);\n    function deposit(uint256 _pid, uint256 _amount) external;\n    function withdraw(uint256 _pid, uint256 _amount) external;\n    function emergencyWithdraw(uint256 _pid) external;\n    function pendingYaxis(uint256 _pid, address _user) external view returns (uint256);\n}\n"
    },
    "contracts/adapters/truefi/TruefiAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../../interfaces/IUniswapV2Pair.sol\";\nimport \"../../libraries/UniswapV2Library.sol\";\nimport \"../../BaseAdapter.sol\";\nimport \"../../IMasterVampire.sol\";\nimport \"./ITrueFarm.sol\";\n\ncontract TruefiAdapter is BaseAdapter, IMasterVampire {\n    address immutable MASTER_VAMPIRE;\n    IERC20 constant TRU = IERC20(0x4C19596f5aAfF459fA38B0f7eD92F11AE6543784);\n    IUniswapV2Pair constant TRU_WETH_PAIR = IUniswapV2Pair(0xfCEAAf9792139BF714a694f868A215493461446D);\n    ITrueFarm[] farms;\n\n    constructor(address _weth, address _factory, address _masterVampire)\n        BaseAdapter(_weth, _factory)\n    {\n        MASTER_VAMPIRE = _masterVampire;\n        farms.push(ITrueFarm(0x8FD832757F58F71BAC53196270A4a55c8E1a29D9)); // TFI-LP farm\n        farms.push(ITrueFarm(0xED45Cf4895C110f464cE857eBE5f270949eC2ff4)); // ETH/TRU farm\n        farms.push(ITrueFarm(0xf8F14Fbb93fa0cEFe35Acf7e004fD4Ef92d8315a)); // TUSD/TFI-LP farm\n    }\n\n    // Victim info\n    function rewardToken(uint256) public pure override returns (IERC20) {\n        return TRU;\n    }\n\n    function poolCount() external view override returns (uint256) {\n        return farms.length;\n    }\n\n    function sellableRewardAmount(uint256) external pure override returns (uint256) {\n        return uint256(-1);\n    }\n\n    // Victim actions, requires impersonation via delegatecall\n    function sellRewardForWeth(address, uint256, uint256 rewardAmount, address to) external override returns(uint256) {\n        TRU.transfer(address(TRU_WETH_PAIR), rewardAmount);\n        (uint truReserve, uint wethReserve,) = TRU_WETH_PAIR.getReserves();\n        uint amountOutput = UniswapV2Library.getAmountOut(rewardAmount, truReserve, wethReserve);\n        TRU_WETH_PAIR.swap(uint(0), amountOutput, to, new bytes(0));\n        return amountOutput;\n    }\n\n    // Pool info\n    function lockableToken(uint256 poolId) external view override returns (IERC20) {\n        return farms[poolId].stakingToken();\n    }\n\n    function lockedAmount(address user, uint256 poolId) external view override returns (uint256) {\n        return farms[poolId].staked(user);\n    }\n\n    function pendingReward(address _adapter, uint256, uint256 victimPoolId) external view override returns (uint256) {\n        IVampireAdapter adapter = IVampireAdapter(_adapter);\n        ITrueFarm farm = ITrueFarm(adapter.poolAddress(victimPoolId));\n        return farm.claimableReward(MASTER_VAMPIRE);\n    }\n\n    // Pool actions, requires impersonation via delegatecall\n    function deposit(address _adapter, uint256 poolId, uint256 amount) external override returns (uint256) {\n        IVampireAdapter adapter = IVampireAdapter(_adapter);\n        adapter.lockableToken(poolId).approve(address(farms[poolId]), uint256(-1));\n        ITrueFarm(adapter.poolAddress(poolId)).stake(amount);\n        return 0;\n    }\n\n    function withdraw(address _adapter, uint256 poolId, uint256 amount) external override returns (uint256) {\n        IVampireAdapter adapter = IVampireAdapter(_adapter);\n        ITrueFarm(adapter.poolAddress(poolId)).unstake(amount);\n        return 0;\n    }\n\n    function claimReward(address _adapter, uint256, uint256 victimPoolId) external override {\n        IVampireAdapter adapter = IVampireAdapter(_adapter);\n        ITrueFarm(adapter.poolAddress(victimPoolId)).claim();\n    }\n\n    function emergencyWithdraw(address, uint256) external pure override {\n        require(false, \"not implemented\");\n    }\n\n    // Service methods\n    function poolAddress(uint256 poolId) external view override returns (address) {\n        return address(farms[poolId]);\n    }\n\n    function rewardToWethPool() external pure override returns (address) {\n        return address(TRU_WETH_PAIR);\n    }\n\n    function lockedValue(address, uint256) external override pure returns (uint256) {\n        require(false, \"not implemented\");\n        return 0;\n    }\n\n    function totalLockedValue(uint256) external override pure returns (uint256) {\n        require(false, \"not implemented\");\n        return 0;\n    }\n\n    function normalizedAPY(uint256) external override pure returns (uint256) {\n        require(false, \"not implemented\");\n        return 0;\n    }\n}"
    },
    "contracts/adapters/truefi/ITrueFarm.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface ITrueFarm {\n    function stakingToken() external view returns (IERC20);\n    function trustToken() external view returns (IERC20);\n    function totalStaked() external view returns (uint256);\n    function stake(uint256 amount) external;\n    function unstake(uint256 amount) external;\n    function claim() external;\n    function exit(uint256 amount) external;\n    function staked(address account) external view returns (uint256);\n    function claimableReward(address account) external view returns (uint256);\n}\n"
    },
    "contracts/adapters/sushi/SushiAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"../../interfaces/IUniswapV2Pair.sol\";\nimport \"../../libraries/UniswapV2Library.sol\";\nimport \"../../BaseAdapter.sol\";\nimport \"./IMasterChef.sol\";\n\n\ninterface ISushiBar is IERC20 {\n    function enter(uint256 amount) external;\n}\n\ncontract SushiAdapter is BaseAdapter {\n    using SafeMath for uint256;\n    IMasterChef constant SUSHI_MASTER_CHEF = IMasterChef(0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd);\n    address immutable MASTER_VAMPIRE;\n    address constant DEV_FUND = 0xa896e4bd97a733F049b23d2AcEB091BcE01f298d;\n    IERC20 constant SUSHI = IERC20(0x6B3595068778DD592e39A122f4f5a5cF09C90fE2);\n    ISushiBar constant SUSHI_BAR = ISushiBar(0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272);\n    IUniswapV2Pair constant SUSHI_WETH_PAIR = IUniswapV2Pair(0x795065dCc9f64b5614C407a6EFDC400DA6221FB0);\n    uint256 constant BLOCKS_PER_YEAR = 2336000;\n    uint256 constant DEV_SHARE = 20; // 2%\n    // token 0 - SUSHI\n    // token 1 - WETH\n\n    constructor(address _weth, address _factory, address _masterVampire)\n        BaseAdapter(_weth, _factory)\n    {\n        MASTER_VAMPIRE = _masterVampire;\n    }\n\n    // Victim info\n    function rewardToken(uint256) public pure override returns (IERC20) {\n        return SUSHI;\n    }\n\n    function poolCount() external view override returns (uint256) {\n        return SUSHI_MASTER_CHEF.poolLength();\n    }\n\n    function sellableRewardAmount(uint256) external pure override returns (uint256) {\n        return uint256(-1);\n    }\n\n    // Victim actions, requires impersonation via delegatecall\n    function sellRewardForWeth(address, uint256, uint256 rewardAmount, address to) external override returns(uint256) {\n        uint256 devAmt = rewardAmount.mul(DEV_SHARE).div(1000);\n        SUSHI.approve(address(SUSHI_BAR), devAmt);\n        SUSHI_BAR.enter(devAmt);\n        SUSHI_BAR.transfer(DEV_FUND, SUSHI_BAR.balanceOf(address(this)));\n        rewardAmount = rewardAmount.sub(devAmt);\n\n        SUSHI.transfer(address(SUSHI_WETH_PAIR), rewardAmount);\n        (uint sushiReserve, uint wethReserve,) = SUSHI_WETH_PAIR.getReserves();\n        uint amountOutput = UniswapV2Library.getAmountOut(rewardAmount, sushiReserve, wethReserve);\n        SUSHI_WETH_PAIR.swap(uint(0), amountOutput, to, new bytes(0));\n        return amountOutput;\n    }\n\n    // Pool info\n    function lockableToken(uint256 victimPID) external view override returns (IERC20) {\n        (IERC20 lpToken,,,) = SUSHI_MASTER_CHEF.poolInfo(victimPID);\n        return lpToken;\n    }\n\n    function lockedAmount(address user, uint256 victimPID) external view override returns (uint256) {\n        (uint256 amount,) = SUSHI_MASTER_CHEF.userInfo(victimPID, user);\n        return amount;\n    }\n\n    function pendingReward(address, uint256, uint256 victimPID) external view override returns (uint256) {\n        return SUSHI_MASTER_CHEF.pendingSushi(victimPID, MASTER_VAMPIRE);\n    }\n\n    // Pool actions, requires impersonation via delegatecall\n    function deposit(address _adapter, uint256 victimPID, uint256 amount) external override returns (uint256) {\n        IVampireAdapter adapter = IVampireAdapter(_adapter);\n        adapter.lockableToken(victimPID).approve(address(SUSHI_MASTER_CHEF), uint256(-1));\n        SUSHI_MASTER_CHEF.deposit(victimPID, amount);\n        return 0;\n    }\n\n    function withdraw(address, uint256 victimPID, uint256 amount) external override returns (uint256) {\n        SUSHI_MASTER_CHEF.withdraw(victimPID, amount);\n        return 0;\n    }\n\n    function claimReward(address, uint256, uint256 victimPID) external override {\n        SUSHI_MASTER_CHEF.deposit(victimPID, 0);\n    }\n\n    function emergencyWithdraw(address, uint256 victimPID) external override {\n        SUSHI_MASTER_CHEF.emergencyWithdraw(victimPID);\n    }\n\n    // Service methods\n    function poolAddress(uint256) external pure override returns (address) {\n        return address(SUSHI_MASTER_CHEF);\n    }\n\n    function rewardToWethPool() external pure override returns (address) {\n        return address(SUSHI_WETH_PAIR);\n    }\n\n    function lockedValue(address user, uint256 victimPID) external override view returns (uint256) {\n        SushiAdapter adapter = SushiAdapter(this);\n        return adapter.lpTokenValue(adapter.lockedAmount(user, victimPID),IUniswapV2Pair(address(adapter.lockableToken(victimPID))));\n    }\n\n    function totalLockedValue(uint256 victimPID) external override view returns (uint256) {\n        SushiAdapter adapter = SushiAdapter(this);\n        IUniswapV2Pair lockedToken = IUniswapV2Pair(address(adapter.lockableToken(victimPID)));\n        return adapter.lpTokenValue(lockedToken.balanceOf(adapter.poolAddress(victimPID)), lockedToken);\n    }\n\n    function normalizedAPY(uint256 victimPID) external override view returns (uint256) {\n        SushiAdapter adapter = SushiAdapter(this);\n        (,uint256 allocationPoints,,) = SUSHI_MASTER_CHEF.poolInfo(victimPID);\n        uint256 sushiPerBlock = SUSHI_MASTER_CHEF.sushiPerBlock();\n        uint256 totalAllocPoint = SUSHI_MASTER_CHEF.totalAllocPoint();\n        uint256 multiplier = SUSHI_MASTER_CHEF.getMultiplier(block.number - 1, block.number);\n        uint256 rewardPerBlock = multiplier.mul(sushiPerBlock).mul(allocationPoints).div(totalAllocPoint);\n        (uint256 sushiReserve, uint256 wethReserve,) = SUSHI_WETH_PAIR.getReserves();\n        uint256 valuePerYear = rewardPerBlock.mul(wethReserve).mul(BLOCKS_PER_YEAR).div(sushiReserve);\n        return valuePerYear.mul(1 ether).div(adapter.totalLockedValue(victimPID));\n    }\n}\n"
    },
    "contracts/adapters/sushi/IMasterChef.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IMasterChef{\n    function poolInfo(uint256) external view returns (IERC20,uint256,uint256,uint256);\n    function userInfo(uint256, address) external view returns (uint256,uint256);\n    function poolLength() external view returns (uint256);\n    function deposit(uint256 _pid, uint256 _amount) external;\n    function withdraw(uint256 _pid, uint256 _amount) external;\n    function emergencyWithdraw(uint256 _pid) external;\n    function getMultiplier(uint256 _from, uint256 _to) external view returns (uint256);\n    function sushiPerBlock() external view returns (uint256);\n    function totalAllocPoint() external view returns (uint256);\n    function pendingSushi(uint256 _pid, address _user) external view returns (uint256);\n}\n"
    },
    "contracts/adapters/stabilize/StabilizeAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"../../interfaces/IUniswapV2Pair.sol\";\nimport \"../../libraries/UniswapV2Library.sol\";\nimport \"../../BaseAdapter.sol\";\nimport \"./IOperator.sol\";\n\ncontract StabilizeAdapter is BaseAdapter {\n    using SafeMath for uint256;\n    IOperator constant OPERATOR = IOperator(0xEe9156C93ebB836513968F92B4A67721f3cEa08a);\n    address immutable MASTER_VAMPIRE;\n    IERC20 constant STBZ = IERC20(0xB987D48Ed8f2C468D52D6405624EADBa5e76d723);\n    IUniswapV2Pair constant STBZ_WETH_PAIR = IUniswapV2Pair(0xDB28312a8d26D59978D9B86cA185707B1A26725b);\n    uint256 constant BLOCKS_PER_YEAR = 2336000;\n    // token 0 - stbz\n    // token 1 - weth\n\n    constructor(address _weth, address _factory, address _masterVampire)\n        BaseAdapter(_weth, _factory)\n    {\n        MASTER_VAMPIRE = _masterVampire;\n    }\n\n    // Victim info\n    function rewardToken(uint256) public pure override returns (IERC20) {\n        return STBZ;\n    }\n\n    function poolCount() external view override returns (uint256) {\n        return OPERATOR.poolLength();\n    }\n\n    function sellableRewardAmount(uint256) external pure override returns (uint256) {\n        return uint256(-1);\n    }\n\n    // Victim actions, requires impersonation via delegatecall\n    function sellRewardForWeth(address, uint256, uint256 rewardAmount, address to) external override returns(uint256) {\n        STBZ.transfer(address(STBZ_WETH_PAIR), rewardAmount);\n        (uint stbzReserve, uint wethReserve,) = STBZ_WETH_PAIR.getReserves();\n        uint amountOutput = UniswapV2Library.getAmountOut(rewardAmount, stbzReserve, wethReserve);\n        STBZ_WETH_PAIR.swap(uint(0), amountOutput, to, new bytes(0));\n        return amountOutput;\n    }\n\n    // Pool info\n    function lockableToken(uint256 poolId) external view override returns (IERC20) {\n        (IERC20 lpToken,,,,,,,,) = OPERATOR.poolInfo(poolId);\n        return lpToken;\n    }\n\n    function lockedAmount(address user, uint256 poolId) external view override returns (uint256) {\n        (uint256 amount,,) = OPERATOR.userInfo(poolId, user);\n        return amount;\n    }\n\n    function pendingReward(address, uint256, uint256 victimPoolId) external view override returns (uint256) {\n        return OPERATOR.rewardEarned(victimPoolId, MASTER_VAMPIRE);\n    }\n\n    // Pool actions, requires impersonation via delegatecall\n    function deposit(address _adapter, uint256 poolId, uint256 amount) external override returns (uint256) {\n        IVampireAdapter adapter = IVampireAdapter(_adapter);\n        adapter.lockableToken(poolId).approve(address(OPERATOR), uint256(-1));\n        OPERATOR.deposit(poolId, amount);\n        return 0;\n    }\n\n    function withdraw(address, uint256 poolId, uint256 amount) external override returns (uint256) {\n        OPERATOR.withdraw(poolId, amount);\n        return 0;\n    }\n\n    function claimReward(address, uint256, uint256 victimPoolId) external override {\n        OPERATOR.getReward(victimPoolId);\n    }\n\n    function emergencyWithdraw(address, uint256) external pure override {\n        require(false, \"not implemented\");\n    }\n\n    // Service methods\n    function poolAddress(uint256) external pure override returns (address) {\n        return address(OPERATOR);\n    }\n\n    function rewardToWethPool() external pure override returns (address) {\n        return address(STBZ_WETH_PAIR);\n    }\n\n    function lockedValue(address user, uint256 poolId) external override view returns (uint256) {\n        StabilizeAdapter adapter = StabilizeAdapter(this);\n        return adapter.lpTokenValue(adapter.lockedAmount(user, poolId),IUniswapV2Pair(address(adapter.lockableToken(poolId))));\n    }\n\n    function totalLockedValue(uint256 poolId) external override view returns (uint256) {\n        StabilizeAdapter adapter = StabilizeAdapter(this);\n        IUniswapV2Pair lockedToken = IUniswapV2Pair(address(adapter.lockableToken(poolId)));\n        return adapter.lpTokenValue(lockedToken.balanceOf(adapter.poolAddress(poolId)), lockedToken);\n    }\n\n    function normalizedAPY(uint256) external override pure returns (uint256) {\n        require(false, \"not implemented\");\n        return 0;\n    }\n}\n"
    },
    "contracts/adapters/stabilize/IOperator.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IOperator {\n    function poolInfo(uint256) external view returns (IERC20,uint256,uint256,uint256,bool,uint256,bool,uint256,uint256);\n    function userInfo(uint256, address) external view returns (uint256,uint256,uint256);\n    function poolLength() external view returns (uint256);\n    function deposit(uint256 _pid, uint256 _amount) external;\n    function withdraw(uint256 _pid, uint256 _amount) external;\n    function rewardEarned(uint256 _pid, address _user) external view returns (uint256);\n    function getReward(uint256 _pid) external;\n    function rewardRate(uint256 _pid) external view returns (uint256);\n}\n"
    },
    "contracts/adapters/pickle/PickleAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../../interfaces/IUniswapV2Pair.sol\";\nimport \"../../libraries/UniswapV2Library.sol\";\nimport \"../../BaseAdapter.sol\";\nimport \"./IMasterChef.sol\";\n\ncontract PickleAdapter is BaseAdapter {\n    IMasterChef constant PICKLE_MASTER_CHEF = IMasterChef(0xbD17B1ce622d73bD438b9E658acA5996dc394b0d);\n    address immutable MASTER_VAMPIRE;\n    IERC20 constant PICKLE = IERC20(0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5);\n    IUniswapV2Pair constant PICKLE_WETH_PAIR = IUniswapV2Pair(0x269Db91Fc3c7fCC275C2E6f22e5552504512811c);\n    // token 0 - PICKLE\n    // token 1 - weth\n\n    constructor(address _weth, address _factory, address _masterVampire)\n        BaseAdapter(_weth, _factory)\n    {\n        MASTER_VAMPIRE = _masterVampire;\n    }\n\n    // Victim info\n    function rewardToken(uint256) public pure override returns (IERC20) {\n        return PICKLE;\n    }\n\n    function poolCount() external view override returns (uint256) {\n        return PICKLE_MASTER_CHEF.poolLength();\n    }\n\n    function sellableRewardAmount(uint256) external pure override returns (uint256) {\n        return uint256(-1);\n    }\n\n    // Victim actions, requires impersonation via delegatecall\n    function sellRewardForWeth(address, uint256, uint256 rewardAmount, address to) external override returns(uint256) {\n        PICKLE.transfer(address(PICKLE_WETH_PAIR), rewardAmount);\n        (uint pickleReserve, uint wethReserve,) = PICKLE_WETH_PAIR.getReserves();\n        uint amountOutput = UniswapV2Library.getAmountOut(rewardAmount, pickleReserve, wethReserve);\n        PICKLE_WETH_PAIR.swap(uint(0), amountOutput, to, new bytes(0));\n        return amountOutput;\n    }\n\n    // Pool info\n    function lockableToken(uint256 poolId) external view override returns (IERC20) {\n        (IERC20 lpToken,,,) = PICKLE_MASTER_CHEF.poolInfo(poolId);\n        return lpToken;\n    }\n\n    function lockedAmount(address user, uint256 poolId) external view override returns (uint256) {\n        (uint256 amount,) = PICKLE_MASTER_CHEF.userInfo(poolId, user);\n        return amount;\n    }\n\n    function pendingReward(address, uint256, uint256 victimPoolId) external view override returns (uint256) {\n        return PICKLE_MASTER_CHEF.pendingPickle(victimPoolId, MASTER_VAMPIRE);\n    }\n\n    // Pool actions, requires impersonation via delegatecall\n    function deposit(address _adapter, uint256 poolId, uint256 amount) external override returns (uint256) {\n        IVampireAdapter adapter = IVampireAdapter(_adapter);\n        adapter.lockableToken(poolId).approve(address(PICKLE_MASTER_CHEF), uint256(-1));\n        PICKLE_MASTER_CHEF.deposit(poolId, amount);\n        return 0;\n    }\n\n    function withdraw(address, uint256 poolId, uint256 amount) external override returns (uint256) {\n        PICKLE_MASTER_CHEF.withdraw(poolId, amount);\n        return 0;\n    }\n\n    function claimReward(address, uint256, uint256 victimPoolId) external override {\n        PICKLE_MASTER_CHEF.deposit(victimPoolId, 0);\n    }\n\n    function emergencyWithdraw(address, uint256 poolId) external override {\n        PICKLE_MASTER_CHEF.emergencyWithdraw(poolId);\n    }\n\n    // Service methods\n    function poolAddress(uint256) external pure override returns (address) {\n        return address(PICKLE_MASTER_CHEF);\n    }\n\n    function rewardToWethPool() external pure override returns (address) {\n        return address(PICKLE_WETH_PAIR);\n    }\n\n    function lockedValue(address, uint256) external override pure returns (uint256) {\n        require(false, \"not implemented\");\n        return 0;\n    }\n\n    function totalLockedValue(uint256) external override pure returns (uint256) {\n        require(false, \"not implemented\");\n        return 0;\n    }\n\n    function normalizedAPY(uint256) external override pure returns (uint256) {\n        require(false, \"not implemented\");\n        return 0;\n    }\n}\n"
    },
    "contracts/adapters/pickle/IMasterChef.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IMasterChef{\n    function poolInfo(uint256) external view returns (IERC20,uint256,uint256,uint256);\n    function userInfo(uint256, address) external view returns (uint256,uint256);\n    function poolLength() external view returns (uint256);\n    function pendingPickle(uint256 _pid, address _user) external view returns (uint256);\n    function deposit(uint256 _pid, uint256 _amount) external;\n    function withdraw(uint256 _pid, uint256 _amount) external;\n    function emergencyWithdraw(uint256 _pid) external;\n}\n"
    },
    "contracts/adapters/mirror/MirrorAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../../interfaces/IUniswapV2Pair.sol\";\nimport \"../../libraries/UniswapV2Library.sol\";\nimport \"../../BaseAdapter.sol\";\nimport \"./ILPPool.sol\";\n\ncontract MirrorAdapter is BaseAdapter {\n    ILPPool[] pools;\n    address immutable MASTER_VAMPIRE;\n    IERC20 constant MIR = IERC20(0x09a3EcAFa817268f77BE1283176B946C4ff2E608);\n    IUniswapV2Pair constant MIR_WETH_PAIR = IUniswapV2Pair(0x57aB5AEB8baC2586A0d437163C3eb844246336CE);\n\n    constructor(address _weth, address _factory, address _masterVampire)\n        BaseAdapter(_weth, _factory)\n    {\n        MASTER_VAMPIRE = _masterVampire;\n\n        pools.push(ILPPool(0x5d447Fc0F8965cED158BAB42414Af10139Edf0AF)); // MIR-UST\n        pools.push(ILPPool(0x735659C8576d88A2Eb5C810415Ea51cB06931696)); // UST-mAAPL\n        pools.push(ILPPool(0x5b64BB4f69c8C03250Ac560AaC4C7401d78A1c32)); // mGOOGL-UST\n        pools.push(ILPPool(0x43DFb87a26BA812b0988eBdf44e3e341144722Ab)); // mTSLA-UST\n        pools.push(ILPPool(0x29cF719d134c1C18daB61C2F4c0529C4895eCF44)); // UST-mNFLX\n        pools.push(ILPPool(0xc1d2ca26A59E201814bF6aF633C3b3478180E91F)); // mQQQ-UST\n        pools.push(ILPPool(0x99d737ab0df10cdC99c6f64D0384ACd5C03AEF7F)); // UST-mTWTR\n        pools.push(ILPPool(0x27a14c03C364D3265e0788f536ad8d7afB0695F7)); // mMSFT-UST\n        pools.push(ILPPool(0x1fABef2C2DAB77f01053E9600F70bE1F3F657F51)); // mAMZN-UST\n        pools.push(ILPPool(0x769325E8498bF2C2c3cFd6464A60fA213f26afcc)); // mBABA-UST\n        pools.push(ILPPool(0xE214a6ca22BE90f011f34FDddC7c5A07800F8BCd)); // mIAU-UST\n        pools.push(ILPPool(0xDB278fb5f7d4A7C3b83F80D18198d872Bbf7b923)); // mSLV-UST\n        pools.push(ILPPool(0x2221518288AF8c5D5a87fd32717fAb154240d942)); // mUSO-UST\n        pools.push(ILPPool(0xBC07342D01fF5D72021Bb4cb95F07C252e575309)); // mVIXY-UST\n    }\n\n    // Victim info\n    function rewardToken(uint256) public pure override returns (IERC20) {\n        return MIR;\n    }\n\n    function poolCount() external view override returns (uint256) {\n        return pools.length;\n    }\n\n    function sellableRewardAmount(uint256) external pure override returns (uint256) {\n        return uint256(-1);\n    }\n\n    // Victim actions, requires impersonation via delegatecall\n    function sellRewardForWeth(address, uint256, uint256 rewardAmount, address to) external override returns(uint256) {\n        MIR.transfer(address(MIR_WETH_PAIR), rewardAmount);\n        (uint mirReserve, uint wethReserve,) = MIR_WETH_PAIR.getReserves();\n        uint amountOutput = UniswapV2Library.getAmountOut(rewardAmount, mirReserve, wethReserve);\n        MIR_WETH_PAIR.swap(uint(0), amountOutput, to, new bytes(0));\n        return amountOutput;\n    }\n\n    // Pool info\n    function lockableToken(uint256 poolId) external view override returns (IERC20) {\n        return pools[poolId].lpt();\n    }\n\n    function lockedAmount(address user, uint256 poolId) external view override returns (uint256) {\n        return pools[poolId].lpt().balanceOf(user);\n    }\n\n    function pendingReward(address, uint256, uint256 victimPoolId) external view override returns (uint256) {\n        return pools[victimPoolId].earned(MASTER_VAMPIRE);\n    }\n\n    // Pool actions, requires impersonation via delegatecall\n    function deposit(address _adapter, uint256 poolId, uint256 amount) external override returns (uint256) {\n        IVampireAdapter adapter = IVampireAdapter(_adapter);\n        adapter.lockableToken(poolId).approve(address(pools[poolId]), uint256(-1));\n        ILPPool(adapter.poolAddress(poolId)).stake(amount);\n        return 0;\n    }\n\n    function withdraw(address _adapter, uint256 poolId, uint256 amount) external override returns (uint256) {\n        IVampireAdapter adapter = IVampireAdapter(_adapter);\n        ILPPool(adapter.poolAddress(poolId)).withdraw(amount);\n        return 0;\n    }\n\n    function claimReward(address _adapter, uint256, uint256 victimPoolId) external override {\n        IVampireAdapter adapter = IVampireAdapter(_adapter);\n        ILPPool(adapter.poolAddress(victimPoolId)).getReward();\n    }\n\n    function emergencyWithdraw(address, uint256) external pure override {\n        require(false, \"not implemented\");\n    }\n\n    // Service methods\n    function poolAddress(uint256 poolId) external view override returns (address) {\n        return address(pools[poolId]);\n    }\n\n    function rewardToWethPool() external pure override returns (address) {\n        return address(MIR_WETH_PAIR);\n    }\n\n    function lockedValue(address, uint256) external override pure returns (uint256) {\n        require(false, \"not implemented\");\n        return 0;\n    }\n\n    function totalLockedValue(uint256) external override pure returns (uint256) {\n        require(false, \"not implemented\");\n        return 0;\n    }\n\n    function normalizedAPY(uint256) external override pure returns (uint256) {\n        require(false, \"not implemented\");\n        return 0;\n    }\n}\n"
    },
    "contracts/adapters/mirror/ILPPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface ILPPool {\n    function lpt() external view returns (IERC20);\n    function earned(address account) external view returns (uint256);\n    function stake(uint256 amount) external;\n    function withdraw(uint256 amount) external;\n    function getReward() external;\n}\n"
    },
    "contracts/adapters/lua/LuaAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../../interfaces/IUniswapV2Pair.sol\";\nimport \"../../interfaces/IUniswapV2Router02.sol\";\nimport \"../../libraries/UniswapV2Library.sol\";\nimport \"../../BaseAdapter.sol\";\nimport \"./ILuaMasterFarmer.sol\";\n\ncontract LuaAdapter is BaseAdapter {\n    ILuaMasterFarmer constant LUA_MASTER_FARMER = ILuaMasterFarmer(0xb67D7a6644d9E191Cac4DA2B88D6817351C7fF62);\n    address immutable MASTER_VAMPIRE;\n    IUniswapV2Router02 constant router = IUniswapV2Router02(0x1d5C6F1607A171Ad52EFB270121331b3039dD83e);\n    IERC20 constant lua = IERC20(0xB1f66997A5760428D3a87D68b90BfE0aE64121cC);\n\n    constructor(address _weth, address _factory, address _masterVampire)\n        BaseAdapter(_weth, _factory)\n    {\n        MASTER_VAMPIRE = _masterVampire;\n    }\n\n    // Victim info\n    function rewardToken(uint256) public override pure returns (IERC20) {\n        return lua;\n    }\n\n    function poolCount() external override view returns (uint256) {\n        return LUA_MASTER_FARMER.poolLength();\n    }\n\n    function sellableRewardAmount(uint256) external override pure returns (uint256) {\n        return uint256(-1);\n    }\n\n    // Victim actions, requires impersonation via delegatecall\n    function sellRewardForWeth(\n        address,\n        uint256,\n        uint256 rewardAmount,\n        address to\n    ) external override returns (uint256) {\n        address[] memory path = new address[](2);\n        path[0] = address(lua);\n        path[1] = address(weth);\n        uint[] memory amounts = router.getAmountsOut(rewardAmount, path);\n        lua.approve(address(router), uint256(-1));\n        amounts = router.swapExactTokensForTokens(rewardAmount, amounts[amounts.length - 1], path, to, block.timestamp);\n        return amounts[amounts.length - 1];\n    }\n\n    // Pool info\n    function lockableToken(uint256 poolId)\n        external\n        override\n        view\n        returns (IERC20)\n    {\n        (IERC20 lpToken, , , ) = LUA_MASTER_FARMER.poolInfo(poolId);\n        return lpToken;\n    }\n\n    function lockedAmount(address user, uint256 poolId)\n        external\n        override\n        view\n        returns (uint256)\n    {\n        (uint256 amount, , ) = LUA_MASTER_FARMER.userInfo(poolId, user);\n        return amount;\n    }\n\n    function pendingReward(address, uint256, uint256 victimPoolId) external view override returns (uint256) {\n        return LUA_MASTER_FARMER.pendingReward(victimPoolId, MASTER_VAMPIRE);\n    }\n\n    // Pool actions, requires impersonation via delegatecall\n    function deposit(\n        address _adapter,\n        uint256 poolId,\n        uint256 amount\n    ) external override returns (uint256) {\n        IVampireAdapter adapter = IVampireAdapter(_adapter);\n        adapter.lockableToken(poolId).approve(address(LUA_MASTER_FARMER), uint256(-1));\n        LUA_MASTER_FARMER.deposit(poolId, amount);\n        return 0;\n    }\n\n    function withdraw(\n        address,\n        uint256 poolId,\n        uint256 amount\n    ) external override returns (uint256) {\n        LUA_MASTER_FARMER.withdraw(poolId, amount);\n        return 0;\n    }\n\n    function claimReward(address, uint256, uint256 victimPoolId) external override {\n        LUA_MASTER_FARMER.claimReward(victimPoolId);\n    }\n\n    function emergencyWithdraw(address, uint256 poolId) external override {\n        LUA_MASTER_FARMER.emergencyWithdraw(poolId);\n    }\n\n    // Service methods\n    function poolAddress(uint256) external override pure returns (address) {\n        return address(LUA_MASTER_FARMER);\n    }\n\n    function rewardToWethPool() external override pure returns (address) {\n        return address(0);\n    }\n\n    function lockedValue(address, uint256) external override pure returns (uint256) {\n        require(false, \"not implemented\");\n        return 0;\n    }\n\n    function totalLockedValue(uint256) external override pure returns (uint256) {\n        require(false, \"not implemented\");\n        return 0;\n    }\n\n    function normalizedAPY(uint256) external override pure returns (uint256) {\n        require(false, \"not implemented\");\n        return 0;\n    }\n}\n"
    },
    "contracts/adapters/lua/ILuaMasterFarmer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface ILuaMasterFarmer{\n    function poolInfo(uint256) external view returns (IERC20,uint256,uint256,uint256);\n    function userInfo(uint256, address) external view returns (uint256,uint256,uint256);\n    function poolLength() external view returns (uint256);\n    function deposit(uint256 _pid, uint256 _amount) external;\n    function withdraw(uint256 _pid, uint256 _amount) external;\n    function claimReward(uint256 _pid) external;\n    function emergencyWithdraw(uint256 _pid) external;\n    function pendingReward(uint256 _pid, address _user) external view returns (uint256);\n}\n"
    },
    "contracts/DrainDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./interfaces/IWETH.sol\";\nimport \"./libraries/UniswapV2Library.sol\";\nimport \"./interfaces/IUniswapV2Router02.sol\";\n\ninterface IRewardPool {\n    function fundPool(uint256 reward) external;\n}\n\n/**\n* @title Receives rewards from MasterVampire via drain and redistributes\n*/\ncontract DrainDistributor is Ownable {\n    using SafeMath for uint256;\n    IWETH immutable WETH;\n\n    // Distribution\n    // Percentages are using decimal base of 1000 ie: 10% = 100\n    uint256 public gasShare = 100;\n    uint256 public treasuryShare = 250;\n    uint256 public lpRewardPoolShare = 400;\n    uint256 public drcRewardPoolShare = 250;\n    uint256 public wethThreshold = 200000000000000000 wei;\n\n    address public immutable drc;\n    address public treasury;\n    address public lpRewardPool;\n    address payable public drcRewardPool;\n    address payable public drainController;\n\n    IUniswapV2Router02 public immutable swapRouter;\n\n    /**\n     * @notice Construct the contract\n     * @param lpRewardPool_ address of the uniswap LP reward pool\n     * @param drcRewardPool_ address of the DRC reward pool\n     */\n    constructor(\n        address weth_,\n        address drc_,\n        address _treasury,\n        address lpRewardPool_,\n        address payable drcRewardPool_,\n        address swapRouter_)\n    {\n        require((gasShare + treasuryShare + lpRewardPoolShare + drcRewardPoolShare) == 1000, \"invalid distribution\");\n        lpRewardPool = lpRewardPool_;\n        drcRewardPool = drcRewardPool_;\n        swapRouter = IUniswapV2Router02(swapRouter_);\n        WETH = IWETH(weth_);\n        drc = drc_;\n        treasury = _treasury;\n        IWETH(weth_).approve(lpRewardPool, uint256(-1));\n        IWETH(weth_).approve(swapRouter_, uint256(-1));\n    }\n\n    /**\n     * @notice Allow depositing ether to the contract\n     */\n    receive() external payable {}\n\n    /**\n     * @notice Distributes drained rewards\n     */\n    function distribute(uint256 tipAmount) external payable {\n        require(drainController != address(0), \"drainctrl not set\");\n        require(WETH.balanceOf(address(this)) >= wethThreshold, \"weth balance too low\");\n        uint256 drainWethBalance = WETH.balanceOf(address(this));\n        uint256 gasAmt = drainWethBalance.mul(gasShare).div(1000);\n        uint256 devAmt = drainWethBalance.mul(treasuryShare).div(1000);\n        uint256 lpRewardPoolAmt = drainWethBalance.mul(lpRewardPoolShare).div(1000);\n        uint256 drcRewardPoolAmt = drainWethBalance.mul(drcRewardPoolShare).div(1000);\n\n        // Unwrap WETH and transfer ETH to DrainController to cover drain gas fees\n        WETH.withdraw(gasAmt);\n        drainController.transfer(gasAmt);\n\n        // Treasury\n        WETH.transfer(treasury, devAmt);\n\n        // Reward pools\n        IRewardPool(lpRewardPool).fundPool(lpRewardPoolAmt);\n\n        // Buy-back\n        address[] memory path = new address[](2);\n        path[0] = address(WETH);\n        path[1] = drc;\n\n        if (tipAmount > 0) {\n            (bool success, ) = block.coinbase.call{value: tipAmount}(\"\");\n            require(success, \"Could not tip miner\");\n        }\n\n        uint[] memory amounts = swapRouter.getAmountsOut(drcRewardPoolAmt, path);\n        swapRouter.swapExactTokensForTokens(drcRewardPoolAmt, amounts[amounts.length - 1], path, drcRewardPool, block.timestamp);\n    }\n\n    /**\n     * @notice Changes the distribution percentage\n     *         Percentages are using decimal base of 1000 ie: 10% = 100\n     */\n    function changeDistribution(\n        uint256 gasShare_,\n        uint256 treasuryShare_,\n        uint256 lpRewardPoolShare_,\n        uint256 drcRewardPoolShare_)\n        external\n        onlyOwner\n    {\n        require((gasShare_ + treasuryShare_ + lpRewardPoolShare_ + drcRewardPoolShare_) == 1000, \"invalid distribution\");\n        gasShare = gasShare_;\n        treasuryShare = treasuryShare_;\n        lpRewardPoolShare = lpRewardPoolShare_;\n        drcRewardPoolShare = drcRewardPoolShare_;\n    }\n\n    /**\n     * @notice Changes the address of the treasury\n     * @param treasury_ the new address\n     */\n    function changeTreasury(address treasury_) external onlyOwner {\n        require(treasury_ != address(0));\n        treasury = treasury_;\n    }\n\n    /**\n     * @notice Changes the address of the Drain controller\n     * @param drainController_ the new address\n     */\n    function changeDrainController(address payable drainController_) external onlyOwner {\n        require(drainController_ != address(0));\n        drainController = drainController_;\n    }\n\n    /**\n     * @notice Changes the address of the uniswap LP reward pool\n     * @param rewardPool_ the new address\n     */\n    function changeLPRewardPool(address rewardPool_) external onlyOwner {\n        require(rewardPool_ != address(0));\n        lpRewardPool = rewardPool_;\n        WETH.approve(lpRewardPool, uint256(-1));\n    }\n\n    /**\n     * @notice Changes the address of the DRC->ETH reward pool\n     * @param rewardPool_ the new address\n     */\n    function changeDRCRewardPool(address payable rewardPool_) external onlyOwner {\n        require(rewardPool_ != address(0));\n        drcRewardPool = rewardPool_;\n    }\n\n    /**\n     * @notice Change the WETH distribute threshold\n     */\n    function setWETHThreshold(uint256 wethThreshold_) external onlyOwner {\n        wethThreshold = wethThreshold_;\n    }\n}\n"
    },
    "contracts/adapters/dodo/DODOAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"../../interfaces/IUniswapV2Pair.sol\";\nimport \"../../libraries/UniswapV2Library.sol\";\nimport \"../../BaseAdapter.sol\";\nimport \"./interfaces/IDODO.sol\";\nimport \"./IDODOMine.sol\";\n\ncontract DODOAdapter is BaseAdapter {\n    using SafeERC20 for IERC20;\n\n    address immutable MASTER_VAMPIRE;\n    IUniswapV2Pair constant WETH_USDT_PAIR = IUniswapV2Pair(0x0d4a11d5EEaaC28EC3F61d100daF4d40471f1852);\n    IDODOMine constant DODO_MINE = IDODOMine(0xaeD7384F03844Af886b830862FF0a7AFce0a632C);\n    IDODO constant DODO_USDT = IDODO(0x8876819535b48b551C9e97EBc07332C7482b4b2d);\n    IERC20 constant DODO = IERC20(0x43Dfc4159D86F3A37A5A4B3D4580b888ad7d4DDd);\n    IERC20 constant USDT = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n\n    constructor(address _weth, address _factory, address _masterVampire)\n        BaseAdapter(_weth, _factory)\n    {\n        MASTER_VAMPIRE = _masterVampire;\n    }\n\n    // Victim info\n    function rewardToken(uint256) public pure override returns (IERC20) {\n        return DODO;\n    }\n\n    function poolCount() external view override returns (uint256) {\n        return DODO_MINE.poolLength();\n    }\n\n    function sellableRewardAmount(uint256) external pure override returns (uint256) {\n        return uint256(-1);\n    }\n\n    // Victim actions, requires impersonation via delegatecall\n    function sellRewardForWeth(address, uint256, uint256 rewardAmount, address to) external override returns(uint256) {\n        require(rewardAmount > 0, \"reward amount is zero\");\n        /*\n            1. Swap DODO for USDT on DODODEX\n            2. Swap USDT for WETH on Uniswap\n        */\n        // 1\n        DODO.approve(address(DODO_USDT), rewardAmount);\n        uint256 usdtAmount = DODO_USDT.sellBaseToken(rewardAmount, 0, new bytes(0));\n        require(usdtAmount > 0, \"DODO to USDT failed\");\n\n        // 2\n        USDT.safeTransfer(address(WETH_USDT_PAIR), usdtAmount);\n        (uint wethReserve, uint usdtReserve,) = WETH_USDT_PAIR.getReserves();\n        uint amountOutput = UniswapV2Library.getAmountOut(usdtAmount, usdtReserve, wethReserve);\n        WETH_USDT_PAIR.swap(amountOutput, uint(0), to, new bytes(0));\n        return amountOutput;\n    }\n\n    // Pool info\n    function lockableToken(uint256 poolId) external view override returns (IERC20) {\n        (address lpToken,,,) = DODO_MINE.poolInfos(poolId);\n        return IERC20(lpToken);\n    }\n\n    function lockedAmount(address user, uint256 poolId) external view override returns (uint256) {\n        (uint256 amount,) = DODO_MINE.userInfo(poolId, user);\n        return amount;\n    }\n\n    function pendingReward(address, uint256, uint256 victimPoolId) external view override returns (uint256) {\n        (address lpToken,,,) = DODO_MINE.poolInfos(victimPoolId);\n        return DODO_MINE.getPendingReward(lpToken, MASTER_VAMPIRE);\n    }\n\n    // Pool actions, requires impersonation via delegatecall\n    function deposit(address _adapter, uint256 poolId, uint256 amount) external override returns (uint256) {\n        IVampireAdapter adapter = IVampireAdapter(_adapter);\n        IERC20 lpToken = adapter.lockableToken(poolId);\n        lpToken.approve(address(DODO_MINE), uint256(-1));\n        DODO_MINE.deposit(address(lpToken), amount);\n        return 0;\n    }\n\n    function withdraw(address, uint256 poolId, uint256 amount) external override returns (uint256) {\n        (address lpToken,,,) = DODO_MINE.poolInfos(poolId);\n        DODO_MINE.withdraw(lpToken, amount);\n        return 0;\n    }\n\n    function claimReward(address, uint256, uint256 victimPoolId) external override {\n        (address lpToken,,,) = DODO_MINE.poolInfos(victimPoolId);\n        DODO_MINE.claim(lpToken);\n    }\n\n    function emergencyWithdraw(address, uint256 poolId) external override {\n        (address lpToken,,,) = DODO_MINE.poolInfos(poolId);\n        DODO_MINE.emergencyWithdraw(lpToken);\n    }\n\n    // Service methods\n    function poolAddress(uint256) external pure override returns (address) {\n        return address(DODO_MINE);\n    }\n\n    function rewardToWethPool() external pure override returns (address) {\n        return address(0);\n    }\n\n    function lockedValue(address, uint256) external override pure returns (uint256) {\n        require(false, \"not implemented\");\n        return 0;\n    }\n\n    function totalLockedValue(uint256) external override pure returns (uint256) {\n        require(false, \"not implemented\");\n        return 0;\n    }\n\n    function normalizedAPY(uint256) external override pure returns (uint256) {\n        require(false, \"not implemented\");\n        return 0;\n    }\n}\n"
    },
    "contracts/adapters/dodo/interfaces/IDODO.sol": {
      "content": "/*\n\n    Copyright 2020 DODO ZOO.\n    SPDX-License-Identifier: Apache-2.0\n\n*/\n\npragma solidity ^0.7.6;\n\ninterface IDODO {\n\n    function sellBaseToken(\n        uint256 amount,\n        uint256 minReceiveQuote,\n        bytes calldata data\n    ) external returns (uint256);\n}"
    },
    "contracts/adapters/dodo/IDODOMine.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IDODOMine{\n    function poolInfos(uint256) external view returns (address,uint256,uint256,uint256);\n    function userInfo(uint256, address) external view returns (uint256,uint256);\n    function poolLength() external view returns (uint256);\n    function deposit(address _lpToken, uint256 _amount) external;\n    function withdraw(address _lpToken, uint256 _amount) external;\n    function emergencyWithdraw(address _lpToken) external;\n    function claim(address _lpToken) external;\n    function getPendingReward(address _lpToken, address _user) external view returns (uint256);\n}\n"
    },
    "contracts/DrainControllerK3PR.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./VampireAdapter.sol\";\nimport \"./interfaces/IChiToken.sol\";\nimport \"./interfaces/KeeperCompatibleInterface.sol\";\n\ninterface IMasterVampire {\n    function drain(uint256 pid) external;\n    function poolInfo(uint256 pid) external view returns (Victim victim,\n                                                          uint256 victimPoolId,\n                                                          uint256 lastRewardBlock,\n                                                          uint256 accWethPerShare,\n                                                          uint256 wethAccumulator,\n                                                          uint256 basePoolShares,\n                                                          uint256 baseDeposits);\n    function poolLength() external view returns (uint256);\n    function pendingVictimReward(uint256 pid) external view returns (uint256);\n}\n\n/**\n* @title Controls the \"drain\" of pool rewards\n*\n*/\ncontract DrainControllerK3PR is Ownable, KeeperCompatibleInterface {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using VampireAdapter for Victim;\n\n    IMasterVampire public masterVampire;\n    uint256 public wethThreshold = 200000000000000000 wei;\n    address public registryContractAddress;\n\n    constructor(address _registryContractAddress) {\n        registryContractAddress = _registryContractAddress;\n    }\n\n    /**\n     * @notice Change MasterVampire contract\n     */\n    function setMasterVampire(address masterVampire_) external onlyOwner {\n        require(masterVampire_ != address(0));\n        masterVampire = IMasterVampire(masterVampire_);\n    }\n\n    /**\n     * @notice Change the WETH drain threshold\n     */\n    function setWETHThreshold(uint256 wethThreshold_) external onlyOwner {\n        wethThreshold = wethThreshold_;\n    }\n\n\n\n    function checkUpkeep(bytes calldata checkData) external override returns (bool upkeepNeeded, bytes memory performData) {\n\n    }\n\n    function performUpkeep(bytes calldata performData) external override {\n        require(msg.sender == registryContractAddress);\n\n    }\n\n\n\n    /**\n     * @notice Determines if drain can be performed\n     */\n    function isDrainable() external view returns(int32[] memory) {\n        uint256 poolLength = masterVampire.poolLength();\n        int32[] memory drainablePools = new int32[](poolLength);\n        for (uint pid = 0; pid < poolLength; pid++) {\n            drainablePools[pid] = -1;\n            (Victim victim, uint256 victimPoolId,,,,,) = masterVampire.poolInfo(pid);\n            if (address(victim) != address(0)) {\n                uint256 pendingReward = masterVampire.pendingVictimReward(pid);\n                if (pendingReward > 0) {\n                    if (victim.rewardValue(victimPoolId, pendingReward) >= wethThreshold) {\n                        drainablePools[pid] = int32(pid);\n                    }\n                }\n            }\n        }\n        return drainablePools;\n    }\n\n    /**\n     * @notice Determines which pools can be drained based on value of rewards available\n     */\n    function drainPools(uint256[] memory pids) external returns(uint32) {\n        uint256 poolLength = pids.length;\n        uint32 numDrained;\n        for (uint i = 0; i < poolLength; ++i) {\n            uint pid = pids[i];\n            (Victim victim, uint256 victimPoolId,,,,,) = masterVampire.poolInfo(pid);\n            if (address(victim) != address(0)) {\n                uint256 pendingReward = victim.pendingReward(pid, victimPoolId);\n                if (pendingReward > 0) {\n                    uint256 rewardValue_ = victim.rewardValue(victimPoolId, pendingReward);\n                    if (rewardValue_ >= wethThreshold) {\n                        try masterVampire.drain(pid) {\n                            // success\n                            ++numDrained;\n                        } catch {\n                            // ignore failed drain\n                        }\n                    }\n                }\n            }\n        }\n\n        return numDrained;\n    }\n}\n"
    },
    "contracts/interfaces/KeeperCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.7.6;\n\ninterface KeeperCompatibleInterface {\n    /**\n     * @notice method that is simulated by the keepers to see if any work actually\n     * needs to be performed. This method does does not actually need to be\n     * executable, and since it is only ever simulated it can consume lots of gas.\n     * @dev To ensure that it is never called, you may want to add the\n     * cannotExecute modifier from KeeperBase to your implementation of this\n     * method.\n     * @param checkData specified in the upkeep registration so it is always the\n     * same for a registered upkeep. This can easily be broken down into specific\n     * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n     * same contract and easily differentiated by the contract.\n     * @return upkeepNeeded boolean to indicate whether the keeper should call\n     * performUpkeep or not.\n     * @return performData bytes that the keeper should call performUpkeep with, if\n     * upkeep is needed. If you would like to encode data to decode later, try\n     * `abi.encode`.\n     */\n    function checkUpkeep(\n        bytes calldata checkData\n    ) external\n    returns (\n        bool upkeepNeeded,\n        bytes memory performData\n    );\n\n    /**\n     * @notice method that is actually executed by the keepers, via the registry.\n     * The data returned by the checkUpkeep simulation will be passed into\n     * this method to actually be executed.\n     * @dev The input to this method should not be trusted, and the caller of the\n     * method should not even be restricted to any single registry. Anyone should\n     * be able call it, and the input should be validated, there is no guarantee\n     * that the data passed in is the performData returned from checkUpkeep. This\n     * could happen due to malicious keepers, racing keepers, or simply a state\n     * change while the performUpkeep transaction is waiting for confirmation.\n     * Always validate the data passed in.\n     * @param performData is the data which was passed back from the checkData\n     * simulation. If it is encoded, it can easily be decoded into other types by\n     * calling `abi.decode`. This data should not be trusted, and should be\n     * validated against the contract's current state.\n     */\n    function performUpkeep(\n        bytes calldata performData\n    ) external;\n}\n"
    },
    "contracts/DrainController.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./VampireAdapter.sol\";\nimport \"./interfaces/IChiToken.sol\";\n\ninterface IMasterVampire {\n    function drain(uint256 pid) external;\n    function poolInfo(uint256 pid) external view returns (Victim victim,\n                                                          uint256 victimPoolId,\n                                                          uint256 lastRewardBlock,\n                                                          uint256 accWethPerShare,\n                                                          uint256 wethAccumulator,\n                                                          uint256 basePoolShares,\n                                                          uint256 baseDeposits);\n    function poolLength() external view returns (uint256);\n    function pendingVictimReward(uint256 pid) external view returns (uint256);\n}\n\n/**\n* @title Controls the \"drain\" of pool rewards\n*\n* drainPools should be called by a whitelisted node.\n* This function calls drain() for each pool in MasterVampire if the reward\n* WETH value is greater then the configured threshold.\n*\n* This contract has \"gas treasury\" which is funded in ETH by DrainDistributor.\n* ETH is refunded to the node to pay for a portion of the gas fee.\n* Chi Tokens can be used for any remaining gas discounts if caller holds the tokens.\n*\n* If the contract needs to be replaced the deployer can destruct the contract and get\n* a gas refund, as well as collect any remaining ETH to be deployed to the new contract.\n*/\ncontract DrainController is Ownable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using VampireAdapter for Victim;\n\n    IMasterVampire public masterVampire;\n    uint256 public wethThreshold = 200000000000000000 wei;\n    uint256 public maxGasPrice = 60; // This is the maximum gas price in Gwei that this contract will refund\n\n    mapping(address => bool) internal whitelistedNode;\n\n    IChiToken public immutable chi;\n\n    constructor(address _chi) {\n        whitelistedNode[msg.sender] = true;\n        chi = IChiToken(_chi);\n    }\n\n    /**\n     * @notice Allow depositing ether to the contract\n     */\n    receive() external payable {}\n\n    /**\n     * @notice Calculates estimated gas cost of a function and attempts to refund that amount to caller\n     */\n    modifier refundGasCost() {\n        uint256 gasStart = gasleft();\n        uint256 ethBalance = address(this).balance;\n        uint256 weiGasPriceMax = maxGasPrice.mul(10**9); // The maximum gas price in Wei units\n        uint256 weiGasPrice = tx.gasprice; // The gas price for the current transaction\n        if (maxGasPrice > 0 && weiGasPrice > weiGasPriceMax){\n            // User should not spend more than the gas price max\n            weiGasPrice = weiGasPriceMax;\n        }\n        _;\n        uint256 usedGas = 85000 + gasStart - gasleft();\n        uint gasCost = usedGas * weiGasPrice;\n        // Refund total gas cost if contract has enough funds\n        if (ethBalance >= gasCost) {\n            msg.sender.transfer(gasCost);\n            return;\n        }\n\n        // Otherwise send what we can and try use chi to save some gas\n        msg.sender.transfer(ethBalance);\n        usedGas = 85000 + gasStart - gasleft();\n        gasCost = usedGas * weiGasPrice;\n        uint256 remainingGasSpent = (gasCost - ethBalance) / weiGasPrice;\n        chi.freeFromUpTo(msg.sender, (remainingGasSpent + 14154) / 41947);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the whitelister\n     */\n    modifier onlyWhitelister() {\n        require(\n            whitelistedNode[msg.sender],\n            \"account is not whitelisted\"\n        );\n        _;\n    }\n\n    /**\n     * @dev Adds account to whitelist\n     * @param account_ The address to whitelist\n     */\n    function whitelist(address account_) external onlyOwner {\n        whitelistedNode[account_] = true;\n    }\n\n    /**\n     * @dev Removes account from whitelist\n     * @param account_ The address to remove from the whitelist\n     */\n    function unWhitelist(address account_) external onlyOwner {\n        whitelistedNode[account_] = false;\n    }\n\n    /**\n     * @notice Change MasterVampire contract\n     */\n    function setMasterVampire(address masterVampire_) external onlyOwner {\n        require(masterVampire_ != address(0));\n        masterVampire = IMasterVampire(masterVampire_);\n    }\n\n    /**\n     * @notice Change the WETH drain threshold\n     */\n    function setWETHThreshold(uint256 wethThreshold_) external onlyOwner {\n        wethThreshold = wethThreshold_;\n    }\n\n    /**\n     * @notice Change the maximum gas price in Gwei for refunds\n     */\n    function setMaxGasPrice(uint256 maxGasPrice_) external onlyOwner {\n        maxGasPrice = maxGasPrice_;\n    }\n\n    /**\n     * @notice Determines if drain can be performed\n     */\n    function isDrainable() external view returns(int32[] memory) {\n        uint256 poolLength = masterVampire.poolLength();\n        int32[] memory drainablePools = new int32[](poolLength);\n        for (uint pid = 0; pid < poolLength; pid++) {\n            drainablePools[pid] = -1;\n            (Victim victim, uint256 victimPoolId,,,,,) = masterVampire.poolInfo(pid);\n            if (address(victim) != address(0)) {\n                uint256 pendingReward = masterVampire.pendingVictimReward(pid);\n                if (pendingReward > 0) {\n                    if (victim.rewardValue(victimPoolId, pendingReward) >= wethThreshold) {\n                        drainablePools[pid] = int32(pid);\n                    }\n                }\n            }\n        }\n        return drainablePools;\n    }\n\n    /**\n     * @notice Drains the specified pools\n     */\n    function drainPools(uint256[] memory pids) external onlyWhitelister refundGasCost {\n        uint256 poolLength = pids.length;\n        for (uint i = 0; i < poolLength; ++i) {\n            uint pid = pids[i];\n            masterVampire.drain(pid);\n        }\n    }\n\n    /**\n     * @notice Provides a way to remove ETH balance from contract\n     * @param to Address to send ETH balance\n     */\n    function withdrawETH(address payable to) external onlyOwner {\n        to.transfer(address(this).balance);\n    }\n\n    /**\n     * @notice Destruct contract to get a refund and also move any left over ETH to specified address\n     * @param to Address to send any remaining ETH to before contract is destroyed\n     */\n    function kill(address payable to) external onlyOwner {\n        to.transfer(address(this).balance);\n        selfdestruct(msg.sender);\n    }\n}\n"
    },
    "contracts/RewardPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/math/Math.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"./IRewardSupplier.sol\";\n\n/// @title A reward pool that does not mint\n/// @dev The rewards are transferred to the pool by calling `fundPool`.\n///      Only the reward supplier can notify.\ncontract RewardPool is IRewardSupplier, ReentrancyGuard {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    IERC20 public stakingToken;\n    IERC20 public rewardToken;\n    uint256 public rewardsDuration;\n\n    uint256 public periodFinish;\n    uint256 public rewardRate;\n    uint256 public lastUpdateTime;\n    uint256 public rewardPerTokenStored;\n    uint256 public totalStaked;\n    mapping(address => uint256) public stakedBalances;\n    mapping(address => uint256) public userRewardPerTokenPaid;\n    mapping(address => uint256) public rewards;\n\n    event RewardAdded(uint256 reward);\n    event Staked(address indexed user, uint256 amount);\n    event Withdrawn(address indexed user, uint256 amount);\n    event RewardPaid(address indexed user, uint256 reward);\n\n    modifier updateReward(address account) {\n        rewardPerTokenStored = rewardPerToken();\n        lastUpdateTime = lastTimeRewardApplicable();\n        if (account != address(0)) {\n            rewards[account] = earned(account);\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\n        }\n        _;\n    }\n\n    constructor(\n        address rewardToken_,\n        address stakingToken_,\n        uint256 rewardsDuration_,\n        address rewardSupplier_)\n        IRewardSupplier(rewardSupplier_)\n    {\n        rewardToken = IERC20(rewardToken_);\n        stakingToken = IERC20(stakingToken_);\n        rewardsDuration = rewardsDuration_;\n    }\n\n    /// @notice Staked balance for account\n    function balanceOf(address account) external view returns (uint256) {\n        return stakedBalances[account];\n    }\n\n    /// @notice Last time rewards were applicable\n    function lastTimeRewardApplicable() public view returns (uint256) {\n        return Math.min(block.timestamp, periodFinish);\n    }\n\n    /// @notice Reward per token staked\n    function rewardPerToken() public view returns (uint256) {\n        if (totalStaked == 0) {\n            return rewardPerTokenStored;\n        }\n        return\n            rewardPerTokenStored.add(\n                lastTimeRewardApplicable()\n                    .sub(lastUpdateTime)\n                    .mul(rewardRate)\n                    .mul(1e18)\n                    .div(totalStaked)\n            );\n    }\n\n    /// @notice Total rewards to distribute for the duration\n    function rewardForDuration() external view returns (uint256) {\n        return rewardRate.mul(rewardsDuration);\n    }\n\n    /// @notice Calculate the earned rewards for an account\n    /// @return amount earned by specified account\n    function earned(address account) public view returns (uint256) {\n        return\n            stakedBalances[account]\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\n                .div(1e18)\n                .add(rewards[account]);\n    }\n\n    /// @notice Stake specified amount\n    function stake(uint256 amount) external nonReentrant updateReward(msg.sender) {\n        require(amount > 0, \"Cannot stake 0\");\n        totalStaked = totalStaked.add(amount);\n        stakedBalances[msg.sender] = stakedBalances[msg.sender].add(amount);\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\n        emit Staked(msg.sender, amount);\n    }\n\n    /// @notice Withdraw specified amount and collect rewards\n    function unstake(uint256 amount) external {\n        _withdraw(amount);\n        getReward();\n    }\n\n    /// @notice Claims reward for the sender account\n    function getReward() public nonReentrant updateReward(msg.sender) {\n        uint256 reward = rewards[msg.sender];\n        if (reward > 0) {\n            rewards[msg.sender] = 0;\n            uint256 contractBalance = rewardToken.balanceOf(address(this));\n            if (contractBalance < reward) {\n                reward = contractBalance; // Prevents contract from locking up\n            }\n            rewardToken.safeTransfer(msg.sender, reward);\n            emit RewardPaid(msg.sender, reward);\n        }\n    }\n\n    /// @notice Withdraw specified amount\n    function _withdraw(uint256 amount) internal virtual nonReentrant updateReward(msg.sender) {\n        require(amount > 0, \"Cannot withdraw 0\");\n        uint256 amount_send = amount;\n        totalStaked = totalStaked.sub(amount);\n        stakedBalances[msg.sender] = stakedBalances[msg.sender].sub(amount);\n        stakingToken.safeTransfer(msg.sender, amount_send);\n        emit Withdrawn(msg.sender, amount_send);\n    }\n\n    /// @notice Transfers reward amount to pool and updates reward rate\n    /// @dev Should be called by external mechanism\n    function fundPool(uint256 reward)\n        external\n        override\n        onlyRewardSupplier\n        updateReward(address(0))\n    {\n        // overflow fix according to https://sips.synthetix.io/sips/sip-77\n        require(reward < uint(-1) / 1e18, \"the notified reward cannot invoke multiplication overflow\");\n\n        rewardToken.safeTransferFrom(msg.sender, address(this), reward);\n\n        if (block.timestamp >= periodFinish) {\n            rewardRate = reward.div(rewardsDuration);\n        } else {\n            uint256 remaining = periodFinish.sub(block.timestamp);\n            uint256 leftover = remaining.mul(rewardRate);\n            rewardRate = reward.add(leftover).div(rewardsDuration);\n        }\n\n        lastUpdateTime = block.timestamp;\n        periodFinish = block.timestamp.add(rewardsDuration);\n        emit RewardAdded(reward);\n    }\n}\n"
    },
    "contracts/IRewardSupplier.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nabstract contract IRewardSupplier is Ownable {\n    mapping(address => bool) public suppliers;\n\n    constructor(address supplier) {\n        suppliers[supplier] = true;\n    }\n\n    function fundPool(uint256 reward) external virtual;\n\n    modifier onlyRewardSupplier() {\n        require(suppliers[_msgSender()] == true, \"Caller is not reward supplier\");\n        _;\n    }\n\n    function addRewardSupplier(address supplier)\n        external\n        onlyOwner\n    {\n        suppliers[supplier] = true;\n    }\n\n    function removeRewardSupplier(address supplier)\n        external\n        onlyOwner\n    {\n        suppliers[supplier] = false;\n    }\n}\n"
    },
    "contracts/DRCRewardPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\nimport \"./DraculaToken.sol\";\nimport \"./RewardPool.sol\";\n\n/// @title Stake DRC and earn WETH for rewards\ncontract DRCRewardPool is RewardPool {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    uint256 public burnRate = 10; // default 1%\n\n    constructor(\n        address rewardToken_,\n        address stakingToken_,\n        uint256 rewardsDuration_,\n        address rewardSupplier_)\n        RewardPool(rewardToken_, stakingToken_, rewardsDuration_, rewardSupplier_)\n    {\n    }\n\n    function setBurnRate(uint256 _burnRate) external onlyOwner {\n        require(_burnRate <= 100, \"Invalid burn rate value\");\n        burnRate = _burnRate;\n    }\n\n    /// @notice Withdraw specified amount\n    /// @dev A configurable percentage of DRC is burnt on withdrawal\n    function _withdraw(uint256 amount) internal override nonReentrant updateReward(msg.sender) {\n        require(amount > 0, \"Cannot withdraw 0\");\n        uint256 amount_send = amount;\n\n        if (burnRate > 0) {\n            uint256 amount_burn = amount.mul(burnRate).div(1000);\n            amount_send = amount.sub(amount_burn);\n            require(amount == amount_send.add(amount_burn), \"Burn value invalid\");\n            DraculaToken(address(stakingToken)).burn(amount_burn);\n        }\n\n        totalStaked = totalStaked.sub(amount);\n        stakedBalances[msg.sender] = stakedBalances[msg.sender].sub(amount);\n        stakingToken.safeTransfer(msg.sender, amount_send);\n        emit Withdrawn(msg.sender, amount_send);\n    }\n}\n"
    },
    "contracts/DraculaToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\n\ncontract DraculaToken is ERC20(\"Dracula Token\", \"DRC\"), Ownable {\n    using SafeMath for uint256;\n\n    event Minted(address indexed minter, address indexed receiver, uint mintAmount);\n    event Burned(address indexed burner, uint burnAmount);\n\n    function mint(address _to, uint256 _amount) public onlyOwner {\n        _mint(_to, _amount);\n        emit Minted(owner(), _to, _amount);\n    }\n\n    function burn(uint256 _amount) public {\n        _burn(msg.sender, _amount);\n        emit Burned(msg.sender, _amount);\n    }\n\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override virtual {\n        _moveDelegates(_delegates[from], _delegates[to], amount);\n    }\n\n    /// @dev A record of each accounts delegate\n    mapping (address => address) internal _delegates;\n\n    /// @notice A checkpoint for marking number of votes from a given block\n    struct Checkpoint {\n        uint32 fromBlock;\n        uint256 votes;\n    }\n\n    /// @notice A record of votes checkpoints for each account, by index\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\n\n    /// @notice The number of checkpoints for each account\n    mapping (address => uint32) public numCheckpoints;\n\n    /// @notice The EIP-712 typehash for the contract's domain\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\n\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n\n    /// @notice A record of states for signing / validating signatures\n    mapping (address => uint) public nonces;\n\n      /// @notice An event thats emitted when an account changes its delegate\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n\n    /// @notice An event thats emitted when a delegate account's vote balance changes\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\n\n    /**\n     * @notice Delegate votes from `msg.sender` to `delegatee`\n     * @param delegator The address to get delegatee for\n     */\n    function delegates(address delegator)\n        external\n        view\n        returns (address)\n    {\n        return _delegates[delegator];\n    }\n\n   /**\n    * @notice Delegate votes from `msg.sender` to `delegatee`\n    * @param delegatee The address to delegate votes to\n    */\n    function delegate(address delegatee) external {\n        return _delegate(msg.sender, delegatee);\n    }\n\n    /**\n     * @notice Delegates votes from signatory to `delegatee`\n     * @param delegatee The address to delegate votes to\n     * @param nonce The contract state required to match the signature\n     * @param expiry The time at which to expire the signature\n     * @param v The recovery byte of the signature\n     * @param r Half of the ECDSA signature pair\n     * @param s Half of the ECDSA signature pair\n     */\n    function delegateBySig(\n        address delegatee,\n        uint nonce,\n        uint expiry,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    )\n        external\n    {\n        bytes32 domainSeparator = keccak256(\n            abi.encode(\n                DOMAIN_TYPEHASH,\n                keccak256(bytes(name())),\n                getChainId(),\n                address(this)\n            )\n        );\n\n        bytes32 structHash = keccak256(\n            abi.encode(\n                DELEGATION_TYPEHASH,\n                delegatee,\n                nonce,\n                expiry\n            )\n        );\n\n        bytes32 digest = keccak256(\n            abi.encodePacked(\n                \"\\x19\\x01\",\n                domainSeparator,\n                structHash\n            )\n        );\n\n        address signatory = ecrecover(digest, v, r, s);\n        require(signatory != address(0), \"DRC::delegateBySig: invalid signature\");\n        require(nonce == nonces[signatory]++, \"DRC::delegateBySig: invalid nonce\");\n        require(block.timestamp <= expiry, \"DRC::delegateBySig: signature expired\");\n        return _delegate(signatory, delegatee);\n    }\n\n    /**\n     * @notice Gets the current votes balance for `account`\n     * @param account The address to get votes balance\n     * @return The number of current votes for `account`\n     */\n    function getCurrentVotes(address account)\n        external\n        view\n        returns (uint256)\n    {\n        uint32 nCheckpoints = numCheckpoints[account];\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\n    }\n\n    /**\n     * @notice Determine the prior number of votes for an account as of a block number\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n     * @param account The address of the account to check\n     * @param blockNumber The block number to get the vote balance at\n     * @return The number of votes the account had as of the given block\n     */\n    function getPriorVotes(address account, uint blockNumber)\n        external\n        view\n        returns (uint256)\n    {\n        require(blockNumber < block.number, \"DRC::getPriorVotes: not yet determined\");\n\n        uint32 nCheckpoints = numCheckpoints[account];\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n\n        // First check most recent balance\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\n            return checkpoints[account][nCheckpoints - 1].votes;\n        }\n\n        // Next check implicit zero balance\n        if (checkpoints[account][0].fromBlock > blockNumber) {\n            return 0;\n        }\n\n        uint32 lower = 0;\n        uint32 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            Checkpoint memory cp = checkpoints[account][center];\n            if (cp.fromBlock == blockNumber) {\n                return cp.votes;\n            } else if (cp.fromBlock < blockNumber) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return checkpoints[account][lower].votes;\n    }\n\n    function _delegate(address delegator, address delegatee)\n        internal\n    {\n        address currentDelegate = _delegates[delegator];\n        uint256 delegatorBalance = balanceOf(delegator); // balance of underlying DRCs (not scaled);\n        _delegates[delegator] = delegatee;\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\n    }\n\n    function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {\n        if (srcRep != dstRep && amount > 0) {\n            if (srcRep != address(0)) {\n                // decrease old representative\n                uint32 srcRepNum = numCheckpoints[srcRep];\n                uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\n                uint256 srcRepNew = srcRepOld.sub(amount);\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n            }\n\n            if (dstRep != address(0)) {\n                // increase new representative\n                uint32 dstRepNum = numCheckpoints[dstRep];\n                uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\n                uint256 dstRepNew = dstRepOld.add(amount);\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n            }\n        }\n    }\n\n    function _writeCheckpoint(\n        address delegatee,\n        uint32 nCheckpoints,\n        uint256 oldVotes,\n        uint256 newVotes\n    )\n        internal\n    {\n        uint32 blockNumber = safe32(block.number, \"DRC::_writeCheckpoint: block number exceeds 32 bits\");\n\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n        } else {\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\n            numCheckpoints[delegatee] = nCheckpoints + 1;\n        }\n\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n    }\n\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\n        require(n < 2**32, errorMessage);\n        return uint32(n);\n    }\n\n    function getChainId() internal pure returns (uint) {\n        uint256 chainId;\n        assembly { chainId := chainid() }\n        return chainId;\n    }\n}"
    },
    "contracts/DraculaHoard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./DraculaToken.sol\";\n\ncontract DraculaHoard is ERC20(\"DraculaHoard\", \"xDRC\"), Ownable {\n    using SafeMath for uint256;\n    IERC20 public immutable dracula;\n    uint256 public burnRate = 10;\n\n    constructor(IERC20 _dracula) {\n        dracula = _dracula;\n    }\n\n    function setBurnRate(uint256 _burnRate) external onlyOwner {\n        require(_burnRate <= 10, \"Invalid burn rate value\");\n        burnRate = _burnRate;\n    }\n\n    /// @notice Return staked amount + rewards\n    function balance(address account) public view returns (uint256) {\n        uint256 totalShares = totalSupply();\n        return (totalShares > 0) ? balanceOf(account).mul(dracula.balanceOf(address(this))).div(totalShares) : 0;\n    }\n\n    function stake(uint256 _amount) external {\n        uint256 totalDracula = dracula.balanceOf(address(this));\n        uint256 totalShares = totalSupply();\n        if (totalShares == 0 || totalDracula == 0) {\n            _mint(msg.sender, _amount);\n        }\n        else {\n            uint256 what = _amount.mul(totalShares).div(totalDracula);\n            _mint(msg.sender, what);\n        }\n        dracula.transferFrom(msg.sender, address(this), _amount);\n    }\n\n    function unstake(uint256 _share) external {\n        uint256 totalShares = totalSupply();\n        uint256 what = _share.mul(dracula.balanceOf(address(this))).div(totalShares);\n        _burn(msg.sender, _share);\n        uint256 burnAmount = what.mul(burnRate).div(1000);\n        if (burnAmount > 0) {\n            DraculaToken(address(dracula)).burn(burnAmount);\n        }\n        dracula.transfer(msg.sender, what.sub(burnAmount));\n    }\n}"
    },
    "contracts/interfaces/IIBETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IIBETH is IERC20 {\n    function deposit() external payable;\n    function withdraw(uint amount) external;\n    function claim(uint totalReward, bytes32[] memory proof) external;\n    function claimAndWithdraw(\n        uint claimAmount,\n        bytes32[] memory proof,\n        uint withdrawAmount\n    ) external;\n    function cToken() external view returns (address);\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 9999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}